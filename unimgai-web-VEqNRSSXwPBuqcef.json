{"createdAt":"2025-10-19T02:46:27.429Z","updatedAt":"2025-10-20T17:25:49.000Z","id":"VEqNRSSXwPBuqcef","name":"unimgai web","active":true,"isArchived":false,"nodes":[{"parameters":{"path":"2e2e62ee-3551-4233-b140-0a8322d98ae6","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[-128,0],"id":"506cd860-9cc8-4db8-b778-c725c72197b5","name":"Webhook","webhookId":"2e2e62ee-3551-4233-b140-0a8322d98ae6"},{"parameters":{"respondWith":"text","responseBody":"=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>unimgai - Dashboard</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🎨</text></svg>\">\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        :root {\n            --bg-primary: #0F0E11;\n            --text-primary: #E3E3E3;\n            --color-primary: #E61E85;\n            --color-secondary: #0F2D5C;\n            --surface: #1A191C;\n            --text-muted: #BFBFBF;\n            --success: #4CAF50;\n            --warning: #FF9800;\n            --error: #F44336;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background: linear-gradient(135deg, var(--bg-primary) 0%, #1a1a1f 100%);\n            color: var(--text-primary);\n            min-height: 100vh;\n            overflow-x: hidden;\n            position: relative;\n        }\n\n        /* Custom Scrollbar Styles */\n        ::-webkit-scrollbar {\n            width: 12px;\n            height: 12px;\n        }\n\n        ::-webkit-scrollbar-track {\n            background: rgba(15, 14, 17, 0.5);\n            border-radius: 10px;\n            border: 1px solid rgba(230, 30, 133, 0.1);\n        }\n\n        ::-webkit-scrollbar-thumb {\n            background: linear-gradient(180deg, #E61E85 0%, #B01567 100%);\n            border-radius: 10px;\n            border: 2px solid rgba(15, 14, 17, 0.5);\n            box-shadow: 0 0 10px rgba(230, 30, 133, 0.3);\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n            background: linear-gradient(180deg, #FF2E95 0%, #C01577 100%);\n            box-shadow: 0 0 15px rgba(230, 30, 133, 0.5);\n        }\n\n        ::-webkit-scrollbar-thumb:active {\n            background: linear-gradient(180deg, #D01E75 0%, #A01557 100%);\n        }\n\n        /* Firefox Scrollbar */\n        * {\n            scrollbar-width: thin;\n            scrollbar-color: #E61E85 rgba(15, 14, 17, 0.5);\n        }\n\n        /* Animated background lights */\n        .particles {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            z-index: 1;\n            overflow: hidden;\n        }\n\n        .diffused-light {\n            position: absolute;\n            border-radius: 50%;\n            filter: blur(60px);\n            opacity: 0.15;\n            animation: floatLight 20s infinite ease-in-out;\n        }\n\n        .diffused-light.small {\n            width: 150px;\n            height: 150px;\n        }\n\n        .diffused-light.medium {\n            width: 250px;\n            height: 250px;\n        }\n\n        .diffused-light.large {\n            width: 350px;\n            height: 350px;\n        }\n\n        @keyframes floatLight {\n            0%, 100% {\n                transform: translate(0, 0) scale(1);\n                opacity: 0.1;\n            }\n            25% {\n                transform: translate(150px, -80px) scale(1.2);\n                opacity: 0.2;\n            }\n            50% {\n                transform: translate(-100px, 120px) scale(0.8);\n                opacity: 0.15;\n            }\n            75% {\n                transform: translate(80px, 60px) scale(1.1);\n                opacity: 0.25;\n            }\n        }\n\n        /* Loading screen */\n        .loading-screen {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: var(--bg-primary);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            transition: opacity 0.8s ease, visibility 0.8s ease;\n        }\n\n        .loading-screen.hidden {\n            opacity: 0;\n            visibility: hidden;\n        }\n\n        .logo-loader {\n            width: 120px;\n            height: 120px;\n            position: relative;\n            animation: logoFloat 4s ease-in-out infinite;\n        }\n\n        .logo-loader img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            border-radius: 50%;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.6));\n            animation: logoGlow 3s ease-in-out infinite alternate;\n        }\n\n        @keyframes logoFloat {\n            0%, 100% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            25% {\n                transform: translateY(-10px) rotate(5deg);\n            }\n            50% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            75% {\n                transform: translateY(-5px) rotate(-5deg);\n            }\n        }\n\n        @keyframes logoGlow {\n            0% {\n                filter: drop-shadow(0 0 20px rgba(230, 30, 133, 0.4));\n            }\n            100% {\n                filter: drop-shadow(0 0 40px rgba(230, 30, 133, 0.8));\n            }\n        }\n\n        .loading-text {\n            margin-top: 30px;\n            font-size: 18px;\n            color: var(--text-muted);\n            animation: pulse 1.5s ease-in-out infinite;\n        }\n\n        @keyframes pulse {\n            0%, 100% {\n                opacity: 0.5;\n            }\n            50% {\n                opacity: 1;\n            }\n        }\n\n        /* Header */\n        .header {\n            background: rgba(26, 25, 28, 0.95);\n            backdrop-filter: blur(15px);\n            border-bottom: 2px solid rgba(230, 30, 133, 0.3);\n            padding: 25px 0;\n            position: sticky;\n            top: 0;\n            z-index: 100;\n            animation: slideDown 0.8s ease;\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n        }\n\n        @keyframes slideDown {\n            from {\n                opacity: 0;\n                transform: translateY(-20px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        .header-content {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 0 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .logo {\n            width: 70px;\n            height: 70px;\n            position: relative;\n            animation: mainLogoFloat 6s ease-in-out infinite;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.7));\n        }\n\n        .logo img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            border-radius: 50%;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.5));\n            animation: mainLogoGlow 4s ease-in-out infinite alternate;\n        }\n\n        @keyframes mainLogoFloat {\n            0%, 100% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            25% {\n                transform: translateY(-8px) rotate(3deg);\n            }\n            50% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            75% {\n                transform: translateY(-4px) rotate(-3deg);\n            }\n        }\n\n        @keyframes mainLogoGlow {\n            0% {\n                filter: drop-shadow(0 0 15px rgba(230, 30, 133, 0.3));\n            }\n            100% {\n                filter: drop-shadow(0 0 35px rgba(230, 30, 133, 0.7));\n            }\n        }\n\n        .user-info {\n            display: flex;\n            align-items: center;\n            gap: 18px;\n        }\n\n        .user-avatar {\n            width: 45px;\n            height: 45px;\n            border-radius: 50%;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            color: white;\n            font-size: 18px;\n            box-shadow: 0 0 20px rgba(230, 30, 133, 0.4);\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .user-avatar:hover {\n            transform: scale(1.1);\n            box-shadow: 0 0 25px rgba(230, 30, 133, 0.6);\n        }\n\n        .user-details h3 {\n            font-size: 16px;\n            font-weight: 600;\n            margin-bottom: 2px;\n        }\n\n        .user-credits {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            font-size: 14px;\n            color: var(--color-primary);\n            font-weight: 600;\n        }\n\n        .credits-star {\n            width: 20px;\n            height: 20px;\n            background-image: url('https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000');\n            background-size: contain;\n            background-repeat: no-repeat;\n            background-position: center;\n            filter: drop-shadow(0 0 4px rgba(255, 215, 0, 0.6));\n        }\n\n        .user-details p {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        /* Main container */\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 40px 20px;\n            position: relative;\n            z-index: 10;\n        }\n\n        /* Stats grid */\n        .stats-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.2s both;\n        }\n\n        @keyframes fadeInUp {\n            from {\n                opacity: 0;\n                transform: translateY(30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        .stat-card {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 25px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .stat-card::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 3px;\n            background: linear-gradient(90deg, var(--color-primary), #ff4081);\n        }\n\n        .stat-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 15px 40px rgba(230, 30, 133, 0.2);\n        }\n\n        .stat-icon {\n            width: 50px;\n            height: 50px;\n            border-radius: 12px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 24px;\n            margin-bottom: 15px;\n        }\n\n        .stat-icon.credits {\n            background: linear-gradient(135deg, #4CAF50, #45a049);\n        }\n\n        .stat-icon.videos {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n        }\n\n        .stat-icon.storage {\n            background: linear-gradient(135deg, #2196F3, #1976D2);\n        }\n\n        .stat-icon.api {\n            background: linear-gradient(135deg, #FF9800, #F57C00);\n        }\n\n        .stat-value {\n            font-size: 28px;\n            font-weight: bold;\n            margin-bottom: 5px;\n            background: linear-gradient(135deg, var(--text-primary), var(--color-primary));\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-clip: text;\n        }\n\n        .stat-label {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        /* Creator Tabs */\n        .creator-tabs {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 30px;\n            animation: fadeInUp 1s ease 0.3s both;\n        }\n\n        .tab-btn {\n            background: rgba(26, 25, 28, 0.8);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            border-radius: 50px;\n            padding: 12px 24px;\n            color: var(--text-muted);\n            font-size: 14px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            backdrop-filter: blur(10px);\n        }\n\n        .tab-btn:hover {\n            border-color: var(--color-primary);\n            color: var(--color-primary);\n            transform: translateY(-2px);\n        }\n\n        .tab-btn.active {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            border-color: var(--color-primary);\n            color: white;\n            box-shadow: 0 5px 20px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Creator Sections */\n        .creator-section {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.4s both;\n            display: none;\n        }\n\n        .creator-section.active {\n            display: block;\n        }\n\n        .image-creator .section-title::before {\n            content: '🖼️';\n        }\n\n        .image-editor .section-title::before {\n            content: '✏️';\n        }\n\n        /* Daily Reward Button */\n        .daily-reward-btn {\n            background: linear-gradient(135deg, #FFD700, #FFA500);\n            color: #000;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 24px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);\n            position: relative;\n            overflow: hidden;\n        }\n\n        .daily-reward-btn::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n            transition: left 0.5s ease;\n        }\n\n        .daily-reward-btn:hover::before {\n            left: 100%;\n        }\n\n        .daily-reward-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);\n        }\n\n        .daily-reward-btn.claimed {\n            background: linear-gradient(135deg, #666, #444);\n            color: #fff;\n            cursor: not-allowed;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n        }\n\n        .reward-icon {\n            font-size: 18px;\n        }\n\n        .reward-text {\n            font-size: 13px;\n        }\n\n        /* unimgai Stars Plans Modal */\n        .credits-modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.8);\n            backdrop-filter: blur(10px);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1001;\n            opacity: 0;\n            visibility: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .credits-modal.show {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .credits-modal-content {\n            background: var(--surface);\n            border-radius: 20px;\n            padding: 40px;\n            border: 2px solid #FFD700;\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n            max-width: 800px;\n            width: 90%;\n            max-height: 90vh;\n            overflow-y: auto;\n            transform: scale(0.9);\n            transition: transform 0.3s ease;\n        }\n\n        .credits-modal.show .credits-modal-content {\n            transform: scale(1);\n        }\n\n        .credits-modal-header {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        .credits-modal-title {\n            font-size: 28px;\n            font-weight: 600;\n            color: #FFD700;\n            margin-bottom: 10px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 10px;\n        }\n\n        .credits-modal-subtitle {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .daily-reward-section {\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 20px;\n            margin-bottom: 30px;\n            text-align: center;\n        }\n\n        .daily-reward-title {\n            font-size: 20px;\n            font-weight: 600;\n            color: #FFD700;\n            margin-bottom: 15px;\n        }\n\n        .claim-reward-btn {\n            background: linear-gradient(135deg, #FFD700, #FFA500);\n            color: #000;\n            border: none;\n            border-radius: 50px;\n            padding: 15px 30px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n            max-width: 300px;\n        }\n\n        .claim-reward-btn:hover:not(:disabled) {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);\n        }\n\n        .claim-reward-btn:disabled {\n            background: linear-gradient(135deg, #666, #444);\n            color: #fff;\n            cursor: not-allowed;\n        }\n\n        .reward-status {\n            margin-top: 10px;\n            font-size: 14px;\n            color: var(--text-muted);\n        }\n\n        .credits-plans {\n            margin-top: 30px;\n        }\n\n        .plans-title {\n            font-size: 22px;\n            font-weight: 600;\n            color: var(--text-primary);\n            margin-bottom: 20px;\n            text-align: center;\n        }\n\n        .plans-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n\n        .plan-card {\n            background: rgba(0, 0, 0, 0.3);\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 25px;\n            text-align: center;\n            transition: all 0.3s ease;\n            position: relative;\n        }\n\n        .plan-card:hover {\n            border-color: #FFD700;\n            transform: translateY(-5px);\n            box-shadow: 0 10px 30px rgba(255, 215, 0, 0.2);\n        }\n\n        .plan-card.popular {\n            border-color: #FFD700;\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n        }\n\n        .popular-badge {\n            position: absolute;\n            top: -10px;\n            right: 20px;\n            background: #FFD700;\n            color: #000;\n            padding: 5px 15px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n        }\n\n        .plan-credits {\n            font-size: 36px;\n            font-weight: bold;\n            color: #FFD700;\n            margin-bottom: 5px;\n        }\n\n        .plan-price {\n            font-size: 24px;\n            font-weight: 600;\n            color: var(--text-primary);\n            margin-bottom: 15px;\n        }\n\n        .plan-description {\n            font-size: 14px;\n            color: var(--text-muted);\n            margin-bottom: 20px;\n        }\n\n        .plan-details {\n            background: rgba(255, 255, 255, 0.05);\n            border-radius: 10px;\n            padding: 15px;\n            margin-bottom: 20px;\n            text-align: left;\n        }\n\n        .plan-detail-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 8px;\n            font-size: 12px;\n        }\n\n        .plan-detail-row:last-child {\n            margin-bottom: 0;\n        }\n\n        .plan-detail-label {\n            color: var(--text-muted);\n        }\n\n        .plan-detail-value {\n            color: var(--text-primary);\n            font-weight: 600;\n        }\n\n        .buy-plan-btn {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 25px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n        }\n\n        .buy-plan-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(230, 30, 133, 0.3);\n        }\n\n        .telegram-info {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 15px;\n            margin-top: 20px;\n            text-align: center;\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        .close-credits-btn {\n            background: rgba(255, 255, 255, 0.1);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            color: var(--text-primary);\n            border-radius: 50px;\n            padding: 12px 30px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n            margin-top: 20px;\n        }\n\n        .close-credits-btn:hover {\n            background: rgba(255, 255, 255, 0.2);\n        }\n\n        /* Loading spinner for plans */\n        .plans-loading {\n            text-align: center;\n            padding: 40px;\n        }\n\n        .spinner {\n            display: inline-block;\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(255, 215, 0, 0.1);\n            border-top: 4px solid #FFD700;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n            margin-bottom: 20px;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        .loading-text {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        /* Error message */\n        .error-message {\n            background: rgba(244, 67, 54, 0.1);\n            border: 2px solid rgba(244, 67, 54, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            text-align: center;\n            color: var(--error);\n            margin: 20px 0;\n        }\n\n        /* Major price info */\n        .major-price-info {\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 20px;\n            margin-bottom: 30px;\n            text-align: center;\n        }\n\n        /* User Data Modal */\n        .user-modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.8);\n            backdrop-filter: blur(10px);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            opacity: 0;\n            visibility: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .user-modal.show {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .modal-content {\n            background: var(--surface);\n            border-radius: 20px;\n            padding: 40px;\n            border: 2px solid var(--color-primary);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n            max-width: 500px;\n            width: 90%;\n            transform: scale(0.9);\n            transition: transform 0.3s ease;\n        }\n\n        .user-modal.show .modal-content {\n            transform: scale(1);\n        }\n\n        .modal-header {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        .modal-avatar {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 32px;\n            font-weight: bold;\n            color: white;\n            margin: 0 auto 20px;\n        }\n\n        .modal-title {\n            font-size: 24px;\n            font-weight: 600;\n            color: var(--color-primary);\n            margin-bottom: 5px;\n        }\n\n        .modal-subtitle {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .modal-stats {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n\n        .modal-stat {\n            text-align: center;\n            padding: 15px;\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n        }\n\n        .modal-stat-value {\n            font-size: 20px;\n            font-weight: bold;\n            color: var(--color-primary);\n            margin-bottom: 5px;\n        }\n\n        .modal-stat-label {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        .modal-info {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n\n        .info-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 10px;\n        }\n\n        .info-row:last-child {\n            margin-bottom: 0;\n        }\n\n        .info-label {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .info-value {\n            color: var(--text-primary);\n            font-weight: 500;\n            font-size: 14px;\n        }\n\n        .close-modal-btn {\n            background: var(--color-primary);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 30px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n        }\n\n        .close-modal-btn:hover {\n            transform: scale(1.05);\n            box-shadow: 0 10px 30px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Video creator section */\n        .video-creator {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.4s both;\n        }\n\n        .section-title {\n            font-size: 24px;\n            font-weight: 600;\n            margin-bottom: 20px;\n            color: var(--color-primary);\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n\n        .section-title::before {\n            content: '🎬';\n            font-size: 28px;\n        }\n\n        .video-form {\n            display: grid;\n            gap: 20px;\n        }\n\n        .form-group {\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n        }\n\n        .form-group label {\n            font-weight: 500;\n            color: var(--text-primary);\n        }\n\n        .form-group input,\n        .form-group textarea {\n            background: rgba(0, 0, 0, 0.3);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            border-radius: 10px;\n            padding: 12px 15px;\n            color: var(--text-primary);\n            font-size: 14px;\n            transition: all 0.3s ease;\n        }\n\n        .form-group input:focus,\n        .form-group textarea:focus {\n            outline: none;\n            border-color: var(--color-primary);\n            box-shadow: 0 0 0 3px rgba(230, 30, 133, 0.1);\n        }\n\n        /* Improved select styling */\n        .form-group select {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.1), rgba(255, 64, 129, 0.05));\n            border: 2px solid rgba(230, 30, 133, 0.4);\n            border-radius: 12px;\n            padding: 12px 15px;\n            color: var(--text-primary);\n            font-size: 14px;\n            font-weight: 500;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            appearance: none;\n            background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23E61E85' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\");\n            background-repeat: no-repeat;\n            background-position: right 12px center;\n            background-size: 20px;\n            padding-right: 45px;\n            position: relative;\n        }\n\n        .form-group select:hover {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.15), rgba(255, 64, 129, 0.08));\n            border-color: rgba(230, 30, 133, 0.6);\n            transform: translateY(-1px);\n            box-shadow: 0 4px 12px rgba(230, 30, 133, 0.2);\n        }\n\n        .form-group select:focus {\n            outline: none;\n            border-color: var(--color-primary);\n            box-shadow: 0 0 0 3px rgba(230, 30, 133, 0.2), 0 4px 12px rgba(230, 30, 133, 0.3);\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.2), rgba(255, 64, 129, 0.1));\n        }\n\n        .form-group select option {\n            background: var(--surface);\n            color: var(--text-primary);\n            padding: 10px;\n            border: none;\n            font-weight: 500;\n        }\n\n        .form-group select option:hover {\n            background: rgba(230, 30, 133, 0.2);\n        }\n\n        .form-group textarea {\n            resize: vertical;\n            min-height: 100px;\n        }\n\n        .form-row {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n        }\n\n        .create-btn {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 15px 40px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n            position: relative;\n            overflow: hidden;\n            margin-top: 10px;\n        }\n\n        .create-btn::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 0;\n            height: 0;\n            border-radius: 50%;\n            background: rgba(255, 255, 255, 0.1);\n            transform: translate(-50%, -50%);\n            transition: width 0.6s ease, height 0.6s ease;\n        }\n\n        .create-btn:hover::before {\n            width: 300px;\n            height: 300px;\n        }\n\n        .create-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 30px rgba(230, 30, 133, 0.3);\n        }\n\n        .create-btn:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n            transform: none;\n        }\n\n        .image-upload-area {\n            border: 2px dashed rgba(230, 30, 133, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            text-align: center;\n            cursor: pointer;\n            position: relative;\n            transition: all 0.3s ease;\n        }\n\n        .image-upload-area:hover {\n            border-color: var(--color-primary);\n        }\n\n        .image-upload-input {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            opacity: 0;\n            cursor: pointer;\n        }\n\n        .image-upload-hint {\n            color: var(--text-muted);\n        }\n\n        .image-preview {\n            margin-top: 15px;\n            position: relative;\n            display: inline-block;\n        }\n\n        .preview-img {\n            max-width: 100%;\n            max-height: 150px;\n            border-radius: 10px;\n        }\n\n        .delete-btn {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background: rgba(0, 0, 0, 0.7);\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 25px;\n            height: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        /* Multiple images preview styles */\n        .image-previews-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n            gap: 10px;\n            margin-top: 15px;\n        }\n\n        .image-preview-item {\n            position: relative;\n            border-radius: 10px;\n            overflow: hidden;\n            background: rgba(0, 0, 0, 0.2);\n        }\n\n        .image-preview-item img {\n            width: 100%;\n            height: 120px;\n            object-fit: cover;\n            border-radius: 10px;\n        }\n\n        .image-preview-item .delete-btn {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background: rgba(244, 67, 54, 0.9);\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 25px;\n            height: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n        }\n\n        .image-counter {\n            font-size: 12px;\n            color: var(--text-muted);\n            margin-top: 10px;\n        }\n\n        .image-counter.warning {\n            color: var(--warning);\n        }\n\n        .image-counter.error {\n            color: var(--error);\n        }\n\n        .seed-input-group {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n\n        .seed-input-group input {\n            flex: 1;\n        }\n\n        .refresh-btn {\n            background: rgba(0, 0, 0, 0.3);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            color: var(--text-primary);\n            border-radius: 10px;\n            padding: 10px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .refresh-btn:hover {\n            border-color: var(--color-primary);\n        }\n\n        .form-actions {\n            display: flex;\n            justify-content: flex-end;\n            gap: 15px;\n            margin-top: 20px;\n        }\n\n        .reset-btn {\n            background: rgba(255, 255, 255, 0.1);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            color: var(--text-primary);\n            border-radius: 50px;\n            padding: 15px 40px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .reset-btn:hover {\n            background: rgba(255, 255, 255, 0.2);\n        }\n\n        /* Recent videos */\n        .recent-videos {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            animation: fadeInUp 1s ease 0.6s both;\n        }\n\n        .videos-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n            gap: 20px;\n            margin-top: 20px;\n        }\n\n        .video-card {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 15px;\n            overflow: hidden;\n            transition: transform 0.3s ease;\n            cursor: pointer;\n        }\n\n        .video-card:hover {\n            transform: scale(1.05);\n        }\n\n        .video-thumbnail {\n            width: 100%;\n            height: 120px;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 48px;\n        }\n\n        .video-info {\n            padding: 15px;\n        }\n\n        .video-title {\n            font-weight: 600;\n            margin-bottom: 5px;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n\n        .video-date {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        /* Loading spinner */\n        .spinner {\n            display: none;\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(230, 30, 133, 0.1);\n            border-top: 4px solid var(--color-primary);\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n            margin: 20px auto;\n        }\n\n        .spinner.show {\n            display: block;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        /* Dimensions Preview */\n        .dimensions-preview {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.1), rgba(255, 64, 129, 0.05));\n            border: 2px solid rgba(230, 30, 133, 0.3);\n            border-radius: 12px;\n            padding: 15px 20px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            transition: all 0.3s ease;\n        }\n\n        .dimensions-preview:hover {\n            border-color: rgba(230, 30, 133, 0.5);\n            transform: translateY(-1px);\n            box-shadow: 0 4px 12px rgba(230, 30, 133, 0.15);\n        }\n\n        .dimension-info {\n            font-weight: 600;\n            color: var(--text-primary);\n            font-size: 14px;\n        }\n\n        .dimension-price {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            padding: 6px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            box-shadow: 0 2px 8px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Toast notification */\n        .toast {\n            position: fixed;\n            bottom: 30px;\n            right: 30px;\n            background: var(--surface);\n            padding: 15px 20px;\n            border-radius: 10px;\n            border-left: 4px solid var(--color-primary);\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n            transform: translateX(400px);\n            transition: transform 0.3s ease;\n            z-index: 1000;\n            max-width: 300px;\n        }\n\n        .toast.show {\n            transform: translateX(0);\n        }\n\n        .toast.success {\n            border-left-color: var(--success);\n        }\n\n        .toast.error {\n            border-left-color: var(--error);\n        }\n\n        .toast-title {\n            font-weight: 600;\n            margin-bottom: 5px;\n        }\n\n        .toast-message {\n            font-size: 14px;\n            color: var(--text-muted);\n        }\n\n        /* Responsive */\n        @media (max-width: 768px) {\n            .header {\n                padding: 15px 0;\n            }\n\n            .header-content {\n                flex-direction: row;\n                justify-content: space-between;\n                align-items: center;\n                padding: 0 20px;\n            }\n\n            .logo {\n                width: 60px;\n                height: 60px;\n            }\n\n            .user-info {\n                gap: 10px;\n            }\n\n            .user-details {\n                text-align: left;\n            }\n\n            .user-details h3 {\n                font-size: 18px;\n                margin-bottom: 5px;\n            }\n\n            .user-credits {\n                justify-content: center;\n                font-size: 16px;\n                margin-bottom: 5px;\n            }\n\n            .user-details p {\n                display: none;\n            }\n\n            .form-row {\n                grid-template-columns: 1fr;\n            }\n\n            .stats-grid {\n                grid-template-columns: 1fr;\n            }\n\n            .videos-grid {\n                grid-template-columns: 1fr;\n            }\n\n            .container {\n                padding: 30px 15px;\n            }\n\n            .creator-tabs {\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: center;\n                gap: 8px;\n            }\n\n            .tab-btn {\n                padding: 8px 16px;\n                font-size: 13px;\n            }\n\n            .creator-section {\n                padding: 25px 20px;\n                margin-bottom: 30px;\n            }\n\n            .section-title {\n                font-size: 20px;\n            }\n\n            .create-btn {\n                padding: 12px 24px;\n                font-size: 15px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .header {\n                padding: 15px 0;\n            }\n\n            .header-content {\n                padding: 0 15px;\n            }\n\n            .logo {\n                width: 50px;\n                height: 50px;\n            }\n\n            .user-avatar {\n                width: 40px;\n                height: 40px;\n                font-size: 16px;\n            }\n\n            .user-details h3 {\n                font-size: 14px;\n            }\n\n            .user-credits {\n                font-size: 12px;\n            }\n\n            .user-details p {\n                display: none;\n            }\n\n            .container {\n                padding: 20px 10px;\n            }\n\n            .creator-section {\n                padding: 20px 15px;\n            }\n\n            .section-title {\n                font-size: 18px;\n            }\n\n            .create-btn {\n                padding: 12px 20px;\n                font-size: 14px;\n            }\n\n            .tab-btn {\n                padding: 8px 12px;\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <!-- Loading Screen -->\n    <div class=\"loading-screen\" id=\"loadingScreen\">\n        <div class=\"logo-loader\">\n            <img src=\"https://lh3.googleusercontent.com/d/1wz9VTIXLaeBmCDupXTU_u8hA7N73HBNl=w1000\" alt=\"unimgai\">\n        </div>\n        <div class=\"loading-text\">Loading Dashboard...</div>\n    </div>\n\n    <!-- Particles Background -->\n    <div class=\"particles\" id=\"particles\"></div>\n\n    <!-- Header -->\n    <header class=\"header\">\n        <div class=\"header-content\">\n            <div class=\"logo\">\n                <img src=\"https://lh3.googleusercontent.com/d/1wz9VTIXLaeBmCDupXTU_u8hA7N73HBNl=w1000\" alt=\"unimgai\">\n            </div>\n            <div class=\"user-info\">\n                <button class=\"daily-reward-btn\" id=\"dailyRewardBtn\" onclick=\"openCreditsModal()\">\n                    <span class=\"reward-icon\">🎁</span>\n                    <span class=\"reward-text\">Daily Gift</span>\n                </button>\n                <div class=\"user-avatar\" id=\"userAvatar\">U</div>\n                <div class=\"user-details\">\n                    <h3 id=\"userName\">User</h3>\n                    <div class=\"user-credits\" id=\"headerCredits\">150 ⭐</div>\n                    <p id=\"userStatus\">Active</p>\n                </div>\n            </div>\n        </div>\n    </header>\n\n    <!-- Main Container -->\n    <main class=\"container\">\n        <!-- Creator Tabs -->\n\n        <!-- Creator Tabs -->\n        <div class=\"creator-tabs\">\n            <button class=\"tab-btn active\" data-tab=\"video\">🎬 Create Video</button>\n            <button class=\"tab-btn\" data-tab=\"image\">🖼️ Create Image</button>\n            <button class=\"tab-btn\" data-tab=\"edit\">✏️ Edit Image</button>\n        </div>\n\n        <!-- Video Creator Section -->\n        <div class=\"creator-section video-creator active\" id=\"video-section\">\n            <h2 class=\"section-title\">Create New Video</h2>\n            <form class=\"video-form\" id=\"videoForm\">\n                <div class=\"form-group\">\n                    <label for=\"videoPrompt\">Prompt</label>\n                    <textarea id=\"videoPrompt\" name=\"videoPrompt\" placeholder=\"Use the reference image as the main subject...\"></textarea>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"videoImage\">Image</label>\n                    <div class=\"image-upload-area\" id=\"imageUploadArea\">\n                        <input type=\"file\" id=\"videoImage\" name=\"videoImage\" accept=\"image/*\" class=\"image-upload-input\">\n                        <div class=\"image-upload-content\">\n                            <span class=\"image-upload-hint\">You can drag and drop a file or click to upload</span>\n                            <div class=\"image-preview\" id=\"imagePreview\" style=\"display: none;\">\n                                <img src=\"\" alt=\"Image Preview\" class=\"preview-img\">\n                                <button type=\"button\" class=\"delete-btn\" id=\"deleteBtn\">&times;</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"createVideoBtn\">\n                        Run $0.3\n                    </button>\n                </div>\n            </form>\n            <div class=\"spinner\" id=\"videoSpinner\"></div>\n        </div>\n\n        <!-- Image Creator Section -->\n        <div class=\"creator-section image-creator\" id=\"image-section\">\n            <h2 class=\"section-title\">Create New Image</h2>\n            <form class=\"image-form\" id=\"imageForm\">\n                <div class=\"form-group\">\n                    <label for=\"imagePrompt\">Image Prompt</label>\n                    <textarea id=\"imagePrompt\" name=\"imagePrompt\" placeholder=\"Describe the image you want to create...\" required></textarea>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"imageAspectRatio\">Aspect Ratio</label>\n                        <select id=\"imageAspectRatio\" name=\"imageAspectRatio\" onchange=\"updateResolutionOptions()\">\n                            <option value=\"1:1\">📱 1:1 Instagram</option>\n                            <option value=\"9:16\">📱 9:16 YouTube Shorts</option>\n                            <option value=\"16:9\">🖥️ 16:9 YouTube</option>\n                            <option value=\"4:3\">📺 4:3 Classic</option>\n                            <option value=\"3:2\">📷 3:2 Photography</option>\n                            <option value=\"21:9\">🎬 21:9 Cinema</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"imageResolution\">Resolution</label>\n                        <select id=\"imageResolution\" name=\"imageResolution\">\n                            <option value=\"1024\">📱 Standard (1MP)</option>\n                            <option value=\"1448\" selected>🖥️ High (2MP)</option>\n                            <option value=\"1920\">💎 HD (2K)</option>\n                            <option value=\"4096\">✨ Ultra HD (4K)</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"imageQuality\">Quality</label>\n                        <select id=\"imageQuality\" name=\"imageQuality\">\n                            <option value=\"standard\">Standard</option>\n                            <option value=\"high\" selected>High Quality</option>\n                            <option value=\"ultra\">Ultra HD</option>\n                            <option value=\"premium\">Premium 4K</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"imageStyle\">Style</label>\n                        <select id=\"imageStyle\" name=\"imageStyle\">\n                            <option value=\"general\">General</option>\n                            <option value=\"photorealistic\">Photorealistic</option>\n                            <option value=\"artistic\">Artistic</option>\n                            <option value=\"anime\">Anime</option>\n                            <option value=\"3d\">3D Render</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"imageDimensions\">Dimensions Preview</label>\n                    <div class=\"dimensions-preview\" id=\"dimensionsPreview\">\n                        <span class=\"dimension-info\">1448 × 1448 pixels (2.1MP)</span>\n                        <span class=\"dimension-price\">Cost: $0.027</span>\n                    </div>\n                </div>\n                \n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"createImageBtn\">\n                        Run $0.1\n                    </button>\n                </div>\n            </form>\n            \n            <div class=\"spinner\" id=\"imageSpinner\"></div>\n        </div>\n\n        <!-- Image Editor Section -->\n        <div class=\"creator-section image-editor\" id=\"edit-section\">\n            <h2 class=\"section-title\">Edit Image</h2>\n            <form class=\"edit-form\" id=\"editForm\">\n                <div class=\"form-group\">\n                    <label for=\"editPrompt\">Edit Instructions</label>\n                    <textarea id=\"editPrompt\" name=\"editPrompt\" placeholder=\"Describe how you want to edit the images...\" required></textarea>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"editImages\">Upload Images (Up to 10)</label>\n                    <div class=\"image-upload-area\" id=\"editImageUploadArea\">\n                        <input type=\"file\" id=\"editImages\" name=\"editImages\" accept=\"image/*\" multiple class=\"image-upload-input\">\n                        <div class=\"image-upload-content\">\n                            <span class=\"image-upload-hint\">You can drag and drop files or click to upload (Maximum 10 images)</span>\n                            <div class=\"image-previews-container\" id=\"editImagePreviews\" style=\"display: none;\">\n                                <div class=\"image-preview\" id=\"editImagePreview\" style=\"display: none;\">\n                                    <img src=\"\" alt=\"Image Preview\" class=\"preview-img\">\n                                    <button type=\"button\" class=\"delete-btn\" id=\"editDeleteBtn\">&times;</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"image-counter\" id=\"imageCounter\" style=\"margin-top: 10px; color: var(--text-muted); font-size: 12px;\">\n                        0 / 10 images uploaded\n                    </div>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"editAspectRatio\">Aspect Ratio</label>\n                        <select id=\"editAspectRatio\" name=\"editAspectRatio\" onchange=\"updateEditResolutionOptions()\">\n                            <option value=\"1:1\">📱 1:1 Instagram</option>\n                            <option value=\"9:16\">📱 9:16 YouTube Shorts</option>\n                            <option value=\"16:9\">🖥️ 16:9 YouTube</option>\n                            <option value=\"4:3\">📺 4:3 Classic</option>\n                            <option value=\"3:2\">📷 3:2 Photography</option>\n                            <option value=\"21:9\">🎬 21:9 Cinema</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"editResolution\">Resolution</label>\n                        <select id=\"editResolution\" name=\"editResolution\">\n                            <option value=\"1024\">📱 Standard (1MP)</option>\n                            <option value=\"1448\" selected>🖥️ High (2MP)</option>\n                            <option value=\"1920\">💎 HD (2K)</option>\n                            <option value=\"4096\">✨ Ultra HD (4K)</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"editQuality\">Quality</label>\n                        <select id=\"editQuality\" name=\"editQuality\">\n                            <option value=\"standard\">Standard</option>\n                            <option value=\"high\" selected>High Quality</option>\n                            <option value=\"ultra\">Ultra HD</option>\n                            <option value=\"premium\">Premium 4K</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"editStyle\">Style</label>\n                        <select id=\"editStyle\" name=\"editStyle\">\n                            <option value=\"general\">General</option>\n                            <option value=\"photorealistic\">Photorealistic</option>\n                            <option value=\"artistic\">Artistic</option>\n                            <option value=\"anime\">Anime</option>\n                            <option value=\"3d\">3D Render</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"editDimensions\">Dimensions Preview</label>\n                    <div class=\"dimensions-preview\" id=\"editDimensionsPreview\">\n                        <span class=\"dimension-info\">1448 × 1448 pixels (2.1MP)</span>\n                        <span class=\"dimension-price\">Cost: $0.027</span>\n                    </div>\n                </div>\n                \n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"editImageBtn\">\n                        Run $0.1\n                    </button>\n                </div>\n            </form>\n            \n            <div class=\"spinner\" id=\"editSpinner\"></div>\n        </div>\n\n    </main>\n\n    <!-- Credits Plans Modal -->\n    <div class=\"credits-modal\" id=\"creditsModal\">\n        <div class=\"credits-modal-content\">\n            <div class=\"credits-modal-header\">\n                <h2 class=\"credits-modal-title\">\n                    <img src=\"https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000\" style=\"width: 32px; height: 32px; vertical-align: middle;\" alt=\"unimgai Stars\">\n                    <span>unimgai Stars Plans</span>\n                </h2>\n                <p class=\"credits-modal-subtitle\">Get more unimgai stars to create amazing content</p>\n            </div>\n            \n            <!-- Daily Reward Section -->\n            <div class=\"daily-reward-section\">\n                <h3 class=\"daily-reward-title\">🎁 Daily Reward</h3>\n                <button class=\"claim-reward-btn\" id=\"claimRewardBtn\" onclick=\"claimDailyReward()\">\n                    Claim 5 Free unimgai Stars\n                </button>\n                <div class=\"reward-status\" id=\"rewardStatus\">\n                    Claim your daily bonus of 5 unimgai stars!\n                </div>\n            </div>\n            \n            <!-- Credits Plans -->\n            <div class=\"credits-plans\">\n                <h3 class=\"plans-title\">Choose Your Plan</h3>\n                \n                <!-- Loading State -->\n                <div class=\"plans-loading\" id=\"plansLoading\">\n                    <div class=\"spinner\"></div>\n                    <div class=\"loading-text\">Loading available plans...</div>\n                </div>\n                \n                <!-- Plans Container -->\n                <div class=\"plans-grid\" id=\"plansGrid\" style=\"display: none;\">\n                    <!-- Plans will be dynamically inserted here -->\n                </div>\n                \n                <!-- Error Message -->\n                <div class=\"error-message\" id=\"errorMessage\" style=\"display: none;\">\n                    <p>❌ Unable to load plans</p>\n                    <p>Please try again later</p>\n                    <button onclick=\"loadMajorPlans()\" style=\"background: var(--color-primary); color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-top: 10px;\">\n                        Retry\n                    </button>\n                </div>\n            </div>\n            \n            <button class=\"close-credits-btn\" onclick=\"closeCreditsModal()\">Close</button>\n        </div>\n    </div>\n\n    <!-- User Data Modal -->\n    <div class=\"user-modal\" id=\"userModal\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <div class=\"modal-avatar\" id=\"modalAvatar\">U</div>\n                <h2 class=\"modal-title\" id=\"modalTitle\">User Name</h2>\n                <p class=\"modal-subtitle\">Premium Member</p>\n            </div>\n            \n            <div class=\"modal-stats\">\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalCredits\">150</div>\n                    <div class=\"modal-stat-label\">Total Credits</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalVideos\">12</div>\n                    <div class=\"modal-stat-label\">Videos Created</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalImages\">8</div>\n                    <div class=\"modal-stat-label\">Images Created</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalEdits\">5</div>\n                    <div class=\"modal-stat-label\">Images Edited</div>\n                </div>\n            </div>\n            \n            <div class=\"modal-info\">\n                <div class=\"info-row\">\n                    <span class=\"info-label\">User ID:</span>\n                    <span class=\"info-value\" id=\"modalUserId\">852169805</span>\n                </div>\n                <div class=\"info-row\">\n                    <span class=\"info-label\">Language:</span>\n                    <span class=\"info-value\" id=\"modalLang\">Spanish</span>\n                </div>\n                <div class=\"info-row\">\n                    <span class=\"info-label\">Member Since:</span>\n                    <span class=\"info-value\" id=\"modalMemberSince\">Oct 15, 2025</span>\n                </div>\n                <div class=\"info-row\">\n                    <span class=\"info-label\">Last Active:</span>\n                    <span class=\"info-value\" id=\"modalLastActive\">2 hours ago</span>\n                </div>\n                <div class=\"info-row\">\n                    <span class=\"info-label\">Plan:</span>\n                    <span class=\"info-value\" id=\"modalPlan\">Premium</span>\n                </div>\n            </div>\n            \n            <button class=\"close-modal-btn\" onclick=\"closeUserModal()\">Close</button>\n        </div>\n    </div>\n\n    <!-- Toast Notification -->\n    <div class=\"toast\" id=\"toast\">\n        <div class=\"toast-title\" id=\"toastTitle\">Notification</div>\n        <div class=\"toast-message\" id=\"toastMessage\">Message</div>\n    </div>\n\n    <script>\n        // Get URL parameters\n        function getUrlParams() {\n            const params = new URLSearchParams(window.location.search);\n            return {\n                lang: params.get('lang') || 'en',\n                username: params.get('username') || 'User',\n                user_id: params.get('user_id') || 'User'\n            };\n        }\n\n        // Initialize page\n        let currentLang = 'en';\n        let currentUsername = 'User';\n        let currentUserId = 'User';\n\n        function initializePage() {\n            const params = getUrlParams();\n            currentLang = params.lang || 'en';\n            currentUsername = params.username || 'User';\n            currentUserId = params.user_id || 'User';\n            \n            // Create particles\n            createParticles();\n            \n            // Load user data\n            loadUserData();\n            \n            \n            // Setup tabs\n            setupTabs();\n            \n            // Setup forms\n            setupForms();\n            \n            // Setup user avatar click\n            setupUserAvatar();\n            \n            // Hide loading screen\n            setTimeout(() => {\n                document.getElementById('loadingScreen').classList.add('hidden');\n            }, 2000);\n        }\n\n        // Create background diffused lights\n        function createParticles() {\n            const particlesContainer = document.getElementById('particles');\n            const lightColors = [\n                'rgba(230, 30, 133, 0.3)',\n                'rgba(255, 64, 129, 0.25)',\n                'rgba(156, 39, 176, 0.2)',\n                'rgba(103, 58, 183, 0.15)',\n                'rgba(63, 81, 181, 0.2)'\n            ];\n            \n            const sizeClasses = ['small', 'medium', 'large'];\n            \n            for (let i = 0; i < 8; i++) {\n                const light = document.createElement('div');\n                const sizeClass = sizeClasses[Math.floor(Math.random() * sizeClasses.length)];\n                light.className = `diffused-light ${sizeClass}`;\n                light.style.background = `radial-gradient(circle, ${lightColors[i % lightColors.length]}, transparent)`;\n                light.style.left = Math.random() * 100 + '%';\n                light.style.top = Math.random() * 100 + '%';\n                light.style.animationDelay = Math.random() * 20 + 's';\n                light.style.animationDuration = (20 + Math.random() * 10) + 's';\n                particlesContainer.appendChild(light);\n            }\n        }\n\n        // Load user data\n        function loadUserData() {\n            // Update user info\n            document.getElementById('userName').textContent = currentUsername;\n            document.getElementById('userAvatar').textContent = currentUsername.charAt(0).toUpperCase();\n            \n            // Initialize credits\n            const initialCredits = 150;\n            updateCreditsDisplay(initialCredits);\n        }\n\n        // Update credits display in both header and modal\n        function updateCreditsDisplay(credits) {\n            // Update header\n            const headerCreditsElement = document.getElementById('headerCredits');\n            headerCreditsElement.innerHTML = `<span class=\"credits-star\"></span> ${credits}`;\n            \n            // Update modal\n            document.getElementById('modalCredits').textContent = credits;\n        }\n\n        // CREDITS PLANS INTEGRATION\n        const CREDITS_WEBHOOK_URL = 'https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/dad5726f-ef25-4976-8780-c2e892a37b9e';\n        \n        // Datos de respaldo en caso de que el webhook no esté disponible\n        // Estos datos están sincronizados con el webhook actual\n        const FALLBACK_PLANS_DATA = [\n            {\n                plan_name: \"Plan Básico\",\n                plan_price_usd: 5,\n                credits_received: 500,\n                generation_costs: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                max_images_possible: 10000,\n                max_videos_possible: 1000,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"500 créditos ÷ 0.05 = 10000 imágenes\",\n                    videos_calculation: \"500 créditos ÷ 0.5 = 1000 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Estándar\",\n                plan_price_usd: 15,\n                credits_received: 1500,\n                generation_costs: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                max_images_possible: 30000,\n                max_videos_possible: 3000,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"1500 créditos ÷ 0.05 = 30000 imágenes\",\n                    videos_calculation: \"1500 créditos ÷ 0.5 = 3000 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Premium\",\n                plan_price_usd: 25,\n                credits_received: 2500,\n                generation_costs: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                max_images_possible: 50000,\n                max_videos_possible: 5000,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"2500 créditos ÷ 0.05 = 50000 imágenes\",\n                    videos_calculation: \"2500 créditos ÷ 0.5 = 5000 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Pro\",\n                plan_price_usd: 30,\n                credits_received: 3000,\n                generation_costs: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                max_images_possible: 60000,\n                max_videos_possible: 6000,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"3000 créditos ÷ 0.05 = 60000 imágenes\",\n                    videos_calculation: \"3000 créditos ÷ 0.5 = 6000 videos\"\n                }\n            }\n        ];\n        \n        // Load Credits plans from webhook\n        async function loadCreditsPlans() {\n            const plansLoading = document.getElementById('plansLoading');\n            const plansGrid = document.getElementById('plansGrid');\n            const errorMessage = document.getElementById('errorMessage');\n            \n            // Show loading state\n            if (plansLoading) plansLoading.style.display = 'block';\n            if (plansGrid) plansGrid.style.display = 'none';\n            if (errorMessage) errorMessage.style.display = 'none';\n            \n            console.log('🔗 Intentando cargar planes desde webhook:', CREDITS_WEBHOOK_URL);\n            \n            try {\n                // Intentar llamada GET al webhook con timeout\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 segundos timeout\n                \n                const response = await fetch(CREDITS_WEBHOOK_URL, {\n                    method: 'GET',\n                    signal: controller.signal,\n                    headers: {\n                        'Accept': 'application/json'\n                    }\n                });\n                \n                clearTimeout(timeoutId);\n                \n                console.log('📡 Respuesta del webhook - Status:', response.status);\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                console.log('✅ Datos recibidos del webhook:', data);\n                \n                // El webhook puede devolver: array directo, objeto con 'plans', o array con objeto que tiene 'plans'\n                let plansArray = null;\n                \n                if (Array.isArray(data)) {\n                    // Si data es un array\n                    if (data.length > 0 && data[0].plans && Array.isArray(data[0].plans)) {\n                        // Array que contiene objeto con propiedad 'plans': [{ plans: [...] }]\n                        plansArray = data[0].plans;\n                    } else {\n                        // Array directo de planes: [plan1, plan2, ...]\n                        plansArray = data;\n                    }\n                } else if (data && data.plans && Array.isArray(data.plans)) {\n                    // Objeto con propiedad 'plans': { plans: [...] }\n                    plansArray = data.plans;\n                }\n                \n                if (plansArray && plansArray.length > 0) {\n                    console.log('✅ Planes cargados exitosamente:', plansArray.length, 'planes');\n                    displayCreditsPlans(plansArray);\n                    return;\n                } else {\n                    throw new Error('Estructura de datos inválida');\n                }\n                \n            } catch (error) {\n                console.warn('⚠️ No se pudo cargar desde el webhook:', error.message);\n                console.log('📦 Usando datos de respaldo locales');\n                \n                // Usar datos de respaldo\n                setTimeout(() => {\n                    displayCreditsPlans(FALLBACK_PLANS_DATA);\n                }, 500);\n            }\n        }\n        \n        // Display Credits plans in the modal\n        function displayCreditsPlans(plans) {\n            console.log('🎯 displayCreditsPlans llamada con', plans.length, 'planes');\n            \n            const plansLoading = document.getElementById('plansLoading');\n            const plansGrid = document.getElementById('plansGrid');\n            const errorMessage = document.getElementById('errorMessage');\n            \n            console.log('📍 Elementos encontrados:', {\n                plansLoading: !!plansLoading,\n                plansGrid: !!plansGrid,\n                errorMessage: !!errorMessage\n            });\n            \n            // Hide loading, show container\n            if (plansLoading) plansLoading.style.display = 'none';\n            if (plansGrid) {\n                plansGrid.style.display = 'grid';\n                console.log('✅ plansGrid mostrado');\n            }\n            if (errorMessage) errorMessage.style.display = 'none';\n            \n            // Clear existing plans\n            if (plansGrid) {\n                plansGrid.innerHTML = '';\n            }\n            \n            // Create plan cards\n            plans.forEach((plan, index) => {\n                const planCard = createCreditsPlanCard(plan, index);\n                if (plansGrid) {\n                    plansGrid.appendChild(planCard);\n                    console.log(`✅ Plan ${index + 1} agregado:`, plan.plan_name);\n                }\n            });\n            \n            console.log('✅ displayCreditsPlans completado');\n        }\n        \n        // Create Credits plan card element\n        function createCreditsPlanCard(plan, index) {\n            const planCard = document.createElement('div');\n            planCard.className = 'plan-card';\n            \n            // Add popular badge to second plan (index 1)\n            if (index === 1) {\n                planCard.classList.add('popular');\n            }\n            \n            const starIcon = '<img src=\"https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000\" style=\"width: 20px; height: 20px; vertical-align: middle;\" alt=\"Credits\">';\n            \n            planCard.innerHTML = `\n                ${index === 1 ? '<div class=\"popular-badge\">POPULAR</div>' : ''}\n                <div style=\"font-size: 18px; font-weight: 600; color: var(--color-primary); margin-bottom: 10px; text-align: center;\">\n                    ${plan.plan_name}\n                </div>\n                <div class=\"plan-credits\">${plan.credits_received} ${starIcon}</div>\n                <div class=\"plan-price\">$${plan.plan_price_usd.toFixed(2)}</div>\n                <div class=\"plan-description\">\n                    ${plan.max_images_possible.toLocaleString()} images or ${plan.max_videos_possible.toLocaleString()} videos\n                </div>\n                <div class=\"plan-details\">\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Credits:</span>\n                        <span class=\"plan-detail-value\">${plan.credits_received} ${starIcon}</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Price:</span>\n                        <span class=\"plan-detail-value\">$${plan.plan_price_usd.toFixed(2)} USD</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Cost per Image:</span>\n                        <span class=\"plan-detail-value\">${plan.generation_costs.image} credits</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Cost per Video:</span>\n                        <span class=\"plan-detail-value\">${plan.generation_costs.video} credits</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Max Images:</span>\n                        <span class=\"plan-detail-value\">${plan.max_images_possible.toLocaleString()}</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Max Videos:</span>\n                        <span class=\"plan-detail-value\">${plan.max_videos_possible.toLocaleString()}</span>\n                    </div>\n                </div>\n                <div class=\"calculations-details\">\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 5px;\">\n                        <strong>Calculations:</strong>\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 3px;\">\n                        1 USD = ${plan.calculations.credits_per_dollar} créditos\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 3px;\">\n                        ${plan.calculations.images_calculation}\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted);\">\n                        ${plan.calculations.videos_calculation}\n                    </div>\n                </div>\n                <button class=\"buy-plan-btn\" onclick=\"buyPlan('${plan.plan_name}', ${plan.plan_price_usd})\">\n                    Buy Plan\n                </button>\n            `;\n            \n            return planCard;\n        }\n        \n        // NOWPayments configuration\n        const NOWPAYMENTS_CONFIG = {\n            // Tu API key de NOWPayments (obtener en: https://account.nowpayments.io/settings/api-keys)\n            apiKey: 'BWBTGMS-G57MP1C-HWT45E9-VK6CDWS',\n            // Sandbox mode para testing (cambiar a false en producción)\n            sandbox: false,\n            // URL base de la API\n            apiUrl: 'https://api.nowpayments.io/v1',\n            sandboxApiUrl: 'https://api-sandbox.nowpayments.io/v1'\n        };\n        \n        // Get API URL based on mode\n        function getNOWPaymentsApiUrl() {\n            return NOWPAYMENTS_CONFIG.sandbox ? NOWPAYMENTS_CONFIG.sandboxApiUrl : NOWPAYMENTS_CONFIG.apiUrl;\n        }\n        \n        // Buy plan function with NOWPayments integration\n        function buyPlan(planName, priceUSD) {\n            console.log(`Comprando plan: ${planName} por $${priceUSD} USD`);\n            \n            // Mostrar modal de selección de criptomoneda\n            showCryptoSelectionModal(planName, priceUSD);\n        }\n        \n        // Show cryptocurrency selection modal\n        function showCryptoSelectionModal(planName, priceUSD) {\n            const modal = document.createElement('div');\n            modal.className = 'crypto-selection-modal';\n            modal.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.9);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 10000;\n                animation: fadeIn 0.3s ease;\n            `;\n            \n            const popularCryptos = [\n                { code: 'btc', name: 'Bitcoin', icon: '₿' },\n                { code: 'eth', name: 'Ethereum', icon: 'Ξ' },\n                { code: 'usdttrc20', name: 'USDT (TRC20)', icon: '₮' },\n                { code: 'usdterc20', name: 'USDT (ERC20)', icon: '₮' },\n                { code: 'ltc', name: 'Litecoin', icon: 'Ł' },\n                { code: 'trx', name: 'Tron', icon: 'T' },\n                { code: 'bnbbsc', name: 'BNB (BSC)', icon: 'B' },\n                { code: 'sol', name: 'Solana', icon: 'S' }\n            ];\n            \n            modal.innerHTML = `\n                <div style=\"\n                    background: var(--surface);\n                    border-radius: 20px;\n                    padding: 40px;\n                    max-width: 600px;\n                    width: 90%;\n                    max-height: 80vh;\n                    overflow-y: auto;\n                    border: 2px solid var(--color-primary);\n                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n                \">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\n                        <h2 style=\"color: var(--color-primary); margin: 0;\">\n                            Select Payment Method\n                        </h2>\n                        <button onclick=\"this.closest('.crypto-selection-modal').remove()\" style=\"\n                            background: none;\n                            border: none;\n                            color: var(--text-primary);\n                            font-size: 28px;\n                            cursor: pointer;\n                            padding: 0;\n                            width: 30px;\n                            height: 30px;\n                            line-height: 1;\n                        \">&times;</button>\n                    </div>\n                    \n                    <div style=\"background: rgba(230, 30, 133, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 30px;\">\n                        <p style=\"margin: 0; text-align: center;\">\n                            <strong style=\"color: var(--color-primary);\">${planName}</strong>\n                            <br>\n                            <span style=\"font-size: 24px; color: var(--text-primary); font-weight: bold;\">$${priceUSD.toFixed(2)} USD</span>\n                        </p>\n                    </div>\n                    \n                    <h3 style=\"color: var(--text-primary); margin-bottom: 15px; font-size: 16px;\">\n                        Popular Cryptocurrencies\n                    </h3>\n                    \n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); gap: 10px; margin-bottom: 20px;\">\n                        ${popularCryptos.map(crypto => `\n                            <button onclick=\"createNOWPayment('${planName}', ${priceUSD}, '${crypto.code}')\" style=\"\n                                background: rgba(230, 30, 133, 0.1);\n                                border: 2px solid rgba(230, 30, 133, 0.3);\n                                border-radius: 10px;\n                                padding: 15px 10px;\n                                cursor: pointer;\n                                transition: all 0.3s ease;\n                                color: var(--text-primary);\n                            \" onmouseover=\"this.style.background='rgba(230, 30, 133, 0.2)'; this.style.borderColor='var(--color-primary)'\" \n                               onmouseout=\"this.style.background='rgba(230, 30, 133, 0.1)'; this.style.borderColor='rgba(230, 30, 133, 0.3)'\">\n                                <div style=\"font-size: 24px; margin-bottom: 5px;\">${crypto.icon}</div>\n                                <div style=\"font-size: 12px; font-weight: 600;\">${crypto.name}</div>\n                            </button>\n                        `).join('')}\n                    </div>\n                    \n                    <p style=\"text-align: center; color: var(--text-muted); font-size: 12px; margin-top: 20px;\">\n                        Powered by <strong style=\"color: var(--color-primary);\">NOWPayments</strong> - 300+ cryptocurrencies supported\n                    </p>\n                </div>\n            `;\n            \n            document.body.appendChild(modal);\n        }\n        \n        // Create NOWPayments invoice\n        async function createNOWPayment(planName, priceUSD, payCurrency) {\n            try {\n                // Cerrar modal de selección\n                const selectionModal = document.querySelector('.crypto-selection-modal');\n                if (selectionModal) selectionModal.remove();\n                \n                // Mostrar loading\n                showToast('info', 'Processing', 'Creating payment...');\n                \n                const apiUrl = getNOWPaymentsApiUrl();\n                \n                // Crear invoice usando la API de NOWPayments\n                // Si no especificamos pay_currency, el usuario puede elegir en la invoice_url\n                const invoiceData = {\n                    price_amount: priceUSD,\n                    price_currency: 'usd',\n                    order_id: `${planName.replace(/\\s+/g, '-')}-${Date.now()}`,\n                    order_description: `Purchase of ${planName} - ${priceUSD} USD`,\n                    ipn_callback_url: window.location.origin + '/api/nowpayments-callback',\n                    success_url: window.location.href + '?payment=success',\n                    cancel_url: window.location.href + '?payment=cancelled'\n                };\n                \n                // Si el usuario seleccionó una crypto específica, la incluimos\n                if (payCurrency) {\n                    invoiceData.pay_currency = payCurrency;\n                }\n                \n                console.log('Creating invoice with data:', invoiceData);\n                \n                const response = await fetch(`${apiUrl}/invoice`, {\n                    method: 'POST',\n                    headers: {\n                        'x-api-key': NOWPAYMENTS_CONFIG.apiKey,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(invoiceData)\n                });\n                \n                if (!response.ok) {\n                    const errorData = await response.json();\n                    console.error('Invoice creation failed:', errorData);\n                    throw new Error(errorData.message || 'Failed to create invoice');\n                }\n                \n                const invoice = await response.json();\n                console.log('Invoice created successfully:', invoice);\n                \n                // Abrir el modal de pago de NOWPayments\n                openNOWPaymentsModal(invoice, planName, priceUSD);\n                \n            } catch (error) {\n                console.error('Error creating invoice:', error);\n                showToast('error', 'Error', error.message || 'Failed to create payment. Please try again.');\n            }\n        }\n        \n        // Open NOWPayments invoice modal\n        function openNOWPaymentsModal(invoice, planName, priceUSD) {\n            const modal = document.createElement('div');\n            modal.className = 'nowpayments-modal';\n            modal.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.95);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 10001;\n                animation: fadeIn 0.3s ease;\n                padding: 20px;\n                overflow-y: auto;\n            `;\n            \n            // Para invoices, usamos invoice_url directamente\n            const invoiceUrl = invoice.invoice_url;\n            const invoiceId = invoice.id;\n            \n            modal.innerHTML = `\n                <div style=\"\n                    background: var(--surface);\n                    border-radius: 20px;\n                    padding: 30px;\n                    max-width: 600px;\n                    width: 100%;\n                    border: 2px solid var(--color-primary);\n                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n                \">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\n                        <div>\n                            <h2 style=\"color: var(--color-primary); margin: 0 0 5px 0;\">\n                                💳 Complete Your Payment\n                            </h2>\n                            <p style=\"margin: 0; color: var(--text-muted); font-size: 14px;\">\n                                ${planName}\n                            </p>\n                        </div>\n                        <button onclick=\"this.closest('.nowpayments-modal').remove()\" style=\"\n                            background: none;\n                            border: none;\n                            color: var(--text-primary);\n                            font-size: 28px;\n                            cursor: pointer;\n                            padding: 0;\n                            width: 30px;\n                            height: 30px;\n                            line-height: 1;\n                        \">&times;</button>\n                    </div>\n                    \n                    <!-- NOWPayments Trust Badge -->\n                    <div style=\"background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.05)); padding: 12px 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(76, 175, 80, 0.3); display: flex; align-items: center; gap: 10px;\">\n                        <div style=\"font-size: 24px;\">🔒</div>\n                        <div style=\"flex: 1;\">\n                            <p style=\"margin: 0; color: var(--text-primary); font-size: 13px; font-weight: 600;\">\n                                Secure Payment via NOWPayments\n                            </p>\n                            <p style=\"margin: 0; color: var(--text-muted); font-size: 11px; line-height: 1.4;\">\n                                Your payment is processed by NOWPayments, a trusted third-party payment processor. We never handle your funds directly.\n                            </p>\n                        </div>\n                    </div>\n                    \n                    <!-- Payment Info -->\n                    <div style=\"background: rgba(230, 30, 133, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(230, 30, 133, 0.3); text-align: center;\">\n                        <p style=\"margin: 0 0 10px 0; color: var(--text-muted); font-size: 14px;\">Amount to Pay</p>\n                        <p style=\"margin: 0; font-size: 28px; font-weight: bold; color: var(--color-primary);\">$${priceUSD.toFixed(2)} USD</p>\n                        <p style=\"margin: 10px 0 0 0; color: var(--text-muted); font-size: 12px;\">\n                            You'll be able to select your preferred cryptocurrency on the next page\n                        </p>\n                    </div>\n                    \n                    <!-- Invoice iframe -->\n                    <div style=\"margin-bottom: 20px;\">\n                        <iframe \n                            src=\"${invoiceUrl}\" \n                            style=\"\n                                width: 100%;\n                                height: 600px;\n                                border: none;\n                                border-radius: 10px;\n                                background: white;\n                            \"\n                            allow=\"payment\"\n                        ></iframe>\n                    </div>\n                    \n                    <p style=\"text-align: center; color: var(--text-muted); font-size: 11px; margin-top: 20px; line-height: 1.5;\">\n                        Invoice ID: <code style=\"background: rgba(230, 30, 133, 0.1); padding: 2px 6px; border-radius: 4px;\">${invoiceId}</code>\n                        <br>\n                        Powered by <strong style=\"color: var(--color-primary);\">NOWPayments</strong>\n                    </p>\n                </div>\n            `;\n            \n            document.body.appendChild(modal);\n            showToast('success', 'Payment Created', 'Please complete the payment using the information provided');\n        }\n        \n        // Toggle payment iframe visibility\n        function togglePaymentIframe(paymentId) {\n            const container = document.getElementById(`payment-iframe-container-${paymentId}`);\n            const button = document.getElementById(`toggle-iframe-btn-${paymentId}`);\n            \n            if (container.style.display === 'none') {\n                container.style.display = 'block';\n                button.innerHTML = '🔼 Hide NOWPayments Interface';\n                // Scroll to iframe\n                container.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n            } else {\n                container.style.display = 'none';\n                button.innerHTML = '🔗 Show NOWPayments Interface';\n            }\n        }\n        \n        // Copy to clipboard helper\n        function copyToClipboard(text, button) {\n            navigator.clipboard.writeText(text).then(() => {\n                const originalText = button.innerHTML;\n                button.innerHTML = '✅ Copied!';\n                button.style.background = '#4CAF50';\n                setTimeout(() => {\n                    button.innerHTML = originalText;\n                    button.style.background = 'var(--color-primary)';\n                }, 2000);\n                showToast('success', 'Copied', 'Address copied to clipboard');\n            }).catch(err => {\n                console.error('Failed to copy:', err);\n                showToast('error', 'Error', 'Failed to copy address');\n            });\n        }\n        \n        // Check payment status\n        async function checkPaymentStatus(paymentId) {\n            try {\n                showToast('info', 'Checking', 'Checking payment status...');\n                \n                const apiUrl = getNOWPaymentsApiUrl();\n                const response = await fetch(`${apiUrl}/payment/${paymentId}`, {\n                    method: 'GET',\n                    headers: {\n                        'x-api-key': NOWPAYMENTS_CONFIG.apiKey\n                    }\n                });\n                \n                if (!response.ok) {\n                    throw new Error('Failed to check payment status');\n                }\n                \n                const status = await response.json();\n                console.log('Payment status:', status);\n                \n                const statusMessages = {\n                    'waiting': 'Waiting for payment',\n                    'confirming': 'Payment received, confirming...',\n                    'confirmed': 'Payment confirmed',\n                    'sending': 'Sending to your wallet...',\n                    'finished': 'Payment completed successfully!',\n                    'failed': 'Payment failed',\n                    'refunded': 'Payment refunded',\n                    'expired': 'Payment expired'\n                };\n                \n                const message = statusMessages[status.payment_status] || status.payment_status;\n                const type = ['finished', 'confirmed'].includes(status.payment_status) ? 'success' : \n                            ['failed', 'refunded', 'expired'].includes(status.payment_status) ? 'error' : 'info';\n                \n                showToast(type, 'Payment Status', message);\n                \n                if (status.payment_status === 'finished') {\n                    // Cerrar modal y actualizar créditos\n                    const modal = document.querySelector('.nowpayments-modal');\n                    if (modal) modal.remove();\n                    // Aquí puedes agregar lógica para actualizar los créditos del usuario\n                }\n                \n            } catch (error) {\n                console.error('Error checking payment status:', error);\n                showToast('error', 'Error', 'Failed to check payment status');\n            }\n        }\n        \n        // Check for payment success/cancel in URL\n        window.addEventListener('DOMContentLoaded', () => {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get('payment') === 'success') {\n                showToast('success', 'Payment Successful', 'Your payment has been completed successfully!');\n                // Limpiar URL\n                window.history.replaceState({}, document.title, window.location.pathname);\n            } else if (urlParams.get('payment') === 'cancelled') {\n                showToast('warning', 'Payment Cancelled', 'Your payment was cancelled');\n                // Limpiar URL\n                window.history.replaceState({}, document.title, window.location.pathname);\n            }\n        });\n\n        // Setup tabs functionality\n        function setupTabs() {\n            const tabButtons = document.querySelectorAll('.tab-btn');\n            const sections = document.querySelectorAll('.creator-section');\n            \n            tabButtons.forEach(button => {\n                button.addEventListener('click', () => {\n                    const targetTab = button.getAttribute('data-tab');\n                    \n                    // Remove active class from all buttons and sections\n                    tabButtons.forEach(btn => btn.classList.remove('active'));\n                    sections.forEach(section => section.classList.remove('active'));\n                    \n                    // Add active class to clicked button and corresponding section\n                    button.classList.add('active');\n                    document.getElementById(`${targetTab}-section`).classList.add('active');\n                });\n            });\n        }\n\n        // Setup forms functionality\n        function setupForms() {\n            // Video form\n            const videoForm = document.getElementById('videoForm');\n            videoForm.addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                const formData = new FormData(this);\n                const videoData = {\n                    type: 'video',\n                    prompt: formData.get('videoPrompt'),\n                    image: videoImageInput.dataset.base64 || null,\n                    user_id: currentUserId,\n                    username: currentUsername,\n                    lang: currentLang,\n                    timestamp: new Date().toISOString()\n                };\n                \n                await handleFormSubmit(videoData, 'video');\n            });\n\n            // Image upload logic\n            const imageUploadArea = document.getElementById('imageUploadArea');\n            const videoImageInput = document.getElementById('videoImage');\n            const imagePreview = document.getElementById('imagePreview');\n            const previewImg = imagePreview.querySelector('.preview-img');\n            const deleteBtn = document.getElementById('deleteBtn');\n            const uploadHint = document.querySelector('.image-upload-hint');\n\n            const handleFiles = (files) => {\n                const file = files[0];\n                if (file && file.type.startsWith('image/')) {\n                    const reader = new FileReader();\n                    reader.onload = (e) => {\n                        previewImg.src = e.target.result;\n                        imagePreview.style.display = 'block';\n                        uploadHint.style.display = 'none';\n                        // Store base64 data for upload\n                        videoImageInput.dataset.base64 = e.target.result.split(',')[1];\n                    };\n                    reader.readAsDataURL(file);\n                }\n            };\n\n            imageUploadArea.addEventListener('click', () => videoImageInput.click());\n            videoImageInput.addEventListener('change', (e) => handleFiles(e.target.files));\n            \n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }, false);\n            });\n\n            ['dragenter', 'dragover'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, () => {\n                    imageUploadArea.style.borderColor = 'var(--color-primary)';\n                });\n            });\n\n            ['dragleave', 'drop'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, () => {\n                    imageUploadArea.style.borderColor = 'rgba(230, 30, 133, 0.3)';\n                });\n            });\n\n            imageUploadArea.addEventListener('drop', (e) => {\n                const dt = e.dataTransfer;\n                const files = dt.files;\n                videoImageInput.files = files;\n                handleFiles(files);\n            });\n\n            deleteBtn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                videoImageInput.value = '';\n                delete videoImageInput.dataset.base64;\n                previewImg.src = '';\n                imagePreview.style.display = 'none';\n                uploadHint.style.display = 'block';\n            });\n\n            // Form reset\n            videoForm.addEventListener('reset', () => {\n                deleteBtn.click();\n            });\n            \n            // Image form\n            document.getElementById('imageForm').addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                const formData = new FormData(this);\n                const aspectRatio = document.getElementById('imageAspectRatio').value;\n                const resolution = document.getElementById('imageResolution').value;\n                const quality = document.getElementById('imageQuality').value;\n                const style = document.getElementById('imageStyle').value;\n                \n                // Get dimensions from resolution map\n                const dims = resolutionMap[aspectRatio][resolution];\n                \n                // Calculate final price with quality multiplier\n                const qualityMultipliers = {\n                    'standard': 1.0,\n                    'high': 1.2,\n                    'ultra': 1.5,\n                    'premium': 2.0\n                };\n                const finalPrice = dims.price * qualityMultipliers[quality];\n                \n                const imageData = {\n                    type: 'image',\n                    prompt: formData.get('imagePrompt'),\n                    aspect_ratio: aspectRatio,\n                    resolution: resolution,\n                    quality: quality,\n                    style: style,\n                    width: dims.width,\n                    height: dims.height,\n                    pixels: dims.pixels,\n                    price: finalPrice.toFixed(3),\n                    user_id: currentUserId,\n                    username: currentUsername,\n                    lang: currentLang,\n                    timestamp: new Date().toISOString()\n                };\n                \n                await handleFormSubmit(imageData, 'image');\n            });\n            \n            // Edit form setup with multiple image handling\n            const editImageUploadArea = document.getElementById('editImageUploadArea');\n            const editImagesInput = document.getElementById('editImages');\n            const editImagePreviews = document.getElementById('editImagePreviews');\n            const editImageCounter = document.getElementById('imageCounter');\n            const editUploadHint = editImageUploadArea.querySelector('.image-upload-hint');\n            \n            let uploadedEditImages = [];\n            const MAX_EDIT_IMAGES = 10;\n\n            const handleEditFiles = (files) => {\n                const filesArray = Array.from(files);\n                const remainingSlots = MAX_EDIT_IMAGES - uploadedEditImages.length;\n                const filesToProcess = filesArray.slice(0, remainingSlots);\n                \n                if (filesArray.length > remainingSlots) {\n                    showToast('warning', 'Limit Exceeded', `Only ${remainingSlots} more images can be uploaded (maximum ${MAX_EDIT_IMAGES})`);\n                }\n                \n                if (filesToProcess.length === 0) {\n                    return;\n                }\n                \n                filesToProcess.forEach(file => {\n                    if (file.type.startsWith('image/')) {\n                        const reader = new FileReader();\n                        reader.onload = (e) => {\n                            const imageData = {\n                                name: file.name,\n                                base64: e.target.result.split(',')[1],\n                                preview: e.target.result\n                            };\n                            uploadedEditImages.push(imageData);\n                            addEditImagePreview(imageData);\n                            updateEditImageCounter();\n                            updateEditDimensionsPreview(); // Update price after adding images\n                        };\n                        reader.readAsDataURL(file);\n                    }\n                });\n            };\n\n            const addEditImagePreview = (imageData) => {\n                editImagePreviews.style.display = 'grid';\n                editUploadHint.style.display = 'none';\n                \n                const previewItem = document.createElement('div');\n                previewItem.className = 'image-preview-item';\n                previewItem.innerHTML = `\n                    <img src=\"${imageData.preview}\" alt=\"${imageData.name}\">\n                    <button type=\"button\" class=\"delete-btn\" data-index=\"${uploadedEditImages.length - 1}\">&times;</button>\n                `;\n                \n                editImagePreviews.appendChild(previewItem);\n                \n                // Add delete functionality\n                const deleteBtn = previewItem.querySelector('.delete-btn');\n                deleteBtn.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    const index = parseInt(deleteBtn.dataset.index);\n                    removeEditImage(index);\n                });\n            };\n\n            const removeEditImage = (index) => {\n                uploadedEditImages.splice(index, 1);\n                refreshEditImagePreviews();\n                updateEditImageCounter();\n            };\n\n            const refreshEditImagePreviews = () => {\n                editImagePreviews.innerHTML = '';\n                \n                if (uploadedEditImages.length === 0) {\n                    editImagePreviews.style.display = 'none';\n                    editUploadHint.style.display = 'block';\n                } else {\n                    editImagePreviews.style.display = 'grid';\n                    editUploadHint.style.display = 'none';\n                    \n                    uploadedEditImages.forEach((imageData, index) => {\n                        const previewItem = document.createElement('div');\n                        previewItem.className = 'image-preview-item';\n                        previewItem.innerHTML = `\n                            <img src=\"${imageData.preview}\" alt=\"${imageData.name}\">\n                            <button type=\"button\" class=\"delete-btn\" data-index=\"${index}\">&times;</button>\n                        `;\n                        \n                        editImagePreviews.appendChild(previewItem);\n                        \n                        const deleteBtn = previewItem.querySelector('.delete-btn');\n                        deleteBtn.addEventListener('click', (e) => {\n                            e.stopPropagation();\n                            removeEditImage(index);\n                        });\n                    });\n                }\n            };\n\n            const updateEditImageCounter = () => {\n                const count = uploadedEditImages.length;\n                editImageCounter.textContent = `${count} / ${MAX_EDIT_IMAGES} images uploaded`;\n                \n                // Update counter color based on count\n                editImageCounter.classList.remove('warning', 'error');\n                if (count >= MAX_EDIT_IMAGES) {\n                    editImageCounter.classList.add('error');\n                } else if (count >= MAX_EDIT_IMAGES - 2) {\n                    editImageCounter.classList.add('warning');\n                }\n            };\n\n            // Edit image upload event listeners\n            editImageUploadArea.addEventListener('click', () => {\n                if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                    editImagesInput.click();\n                } else {\n                    showToast('error', 'Maximum Reached', `You can only upload up to ${MAX_EDIT_IMAGES} images`);\n                }\n            });\n\n            editImagesInput.addEventListener('change', (e) => {\n                handleEditFiles(e.target.files);\n                // Clear the input to allow selecting the same files again if needed\n                editImagesInput.value = '';\n            });\n\n            // Drag and drop for edit images\n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }, false);\n            });\n\n            ['dragenter', 'dragover'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, () => {\n                    if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                        editImageUploadArea.style.borderColor = 'var(--color-primary)';\n                    }\n                });\n            });\n\n            ['dragleave', 'drop'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, () => {\n                    editImageUploadArea.style.borderColor = 'rgba(230, 30, 133, 0.3)';\n                });\n            });\n\n            editImageUploadArea.addEventListener('drop', (e) => {\n                if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                    const dt = e.dataTransfer;\n                    const files = dt.files;\n                    editImagesInput.files = files;\n                    handleEditFiles(files);\n                }\n            });\n\n            // Edit form submission\n            document.getElementById('editForm').addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                if (uploadedEditImages.length === 0) {\n                    showToast('error', 'No Images', 'Please upload at least one image to edit');\n                    return;\n                }\n                \n                const formData = new FormData(this);\n                const aspectRatio = document.getElementById('editAspectRatio').value;\n                const resolution = document.getElementById('editResolution').value;\n                const quality = document.getElementById('editQuality').value;\n                const style = document.getElementById('editStyle').value;\n                \n                // Get dimensions from resolution map\n                const dims = resolutionMap[aspectRatio][resolution];\n                \n                // Calculate final price with quality multiplier (per image)\n                const qualityMultipliers = {\n                    'standard': 1.0,\n                    'high': 1.2,\n                    'ultra': 1.5,\n                    'premium': 2.0\n                };\n                const basePrice = dims.price;\n                const finalPricePerImage = basePrice * qualityMultipliers[quality];\n                const totalPrice = finalPricePerImage * uploadedEditImages.length;\n                \n                const editData = {\n                    type: 'edit',\n                    prompt: formData.get('editPrompt'),\n                    aspect_ratio: aspectRatio,\n                    resolution: resolution,\n                    quality: quality,\n                    style: style,\n                    width: dims.width,\n                    height: dims.height,\n                    pixels: dims.pixels,\n                    images: uploadedEditImages.map(img => ({\n                        name: img.name,\n                        base64: img.base64\n                    })),\n                    price_per_image: finalPricePerImage.toFixed(3),\n                    total_price: totalPrice.toFixed(3),\n                    image_count: uploadedEditImages.length,\n                    user_id: currentUserId,\n                    username: currentUsername,\n                    lang: currentLang,\n                    timestamp: new Date().toISOString()\n                };\n                \n                await handleFormSubmit(editData, 'edit');\n            });\n\n            // Edit form reset\n            document.getElementById('editForm').addEventListener('reset', () => {\n                uploadedEditImages = [];\n                refreshEditImagePreviews();\n                updateEditImageCounter();\n            });\n        }\n\n        // Handle form submission\n        async function handleFormSubmit(data, type) {\n            const spinnerElement = document.getElementById(`${type}Spinner`);\n            const buttonElement = document.getElementById(`create${type.charAt(0).toUpperCase() + type.slice(1)}Btn`);\n            \n            // Show spinner and disable button\n            spinnerElement.classList.add('show');\n            buttonElement.disabled = true;\n            \n            try {\n                // Send to webhook\n                const response = await sendToWebhook(data);\n                \n                // Hide spinner and enable button\n                spinnerElement.classList.remove('show');\n                buttonElement.disabled = false;\n                \n                // Show success message\n                showToast('success', `${type.charAt(0).toUpperCase() + type.slice(1)} Created!`, `\"${data.title || data.prompt}\" is being processed.`);\n                \n                // Reset form\n                document.getElementById(`${type}Form`).reset();\n                \n                // Update stats with price for images\n                if (type === 'image' && data.price) {\n                    updateStats(type, parseFloat(data.price));\n                } else {\n                    updateStats(type);\n                }\n                \n                \n            } catch (error) {\n                console.error('Error:', error);\n                \n                // Hide spinner and enable button\n                spinnerElement.classList.remove('show');\n                buttonElement.disabled = false;\n                \n                // Show error message\n                showToast('error', 'Error', `Failed to create ${type}. Please try again.`);\n            }\n        }\n\n        // Send data to webhook with CORS workarounds\n        async function sendToWebhook(data) {\n            const webhookUrl = `https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/dad5726f-ef25-4976-8780-c2e892a37b9e?user_id=${encodeURIComponent(currentUserId)}`;\n            \n            try {\n                // Method 1: Try direct POST with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'unimgai-dashboard',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(data)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                return await response.json();\n                \n            } catch (error) {\n                console.error('Direct webhook call failed, trying CORS proxy:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'User-Agent': 'unimgai-dashboard'\n                        },\n                        body: JSON.stringify(data)\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        return await proxyResponse.json();\n                    }\n                } catch (proxyError) {\n                    console.error('CORS proxy also failed:', proxyError);\n                }\n                \n                // Method 3: Simulate success for development\n                console.log('Simulating webhook success for development');\n                return { success: true, message: 'Data processed successfully' };\n            }\n        }\n\n        // Update stats and deduct credits\n        function updateStats(type, price = null) {\n            // Get current credits from header\n            const headerCreditsElement = document.getElementById('headerCredits');\n            const currentCreditsText = headerCreditsElement.textContent;\n            const currentCredits = parseInt(currentCreditsText);\n            \n            // Calculate credits to deduct (1 credit = $0.01)\n            let creditsToDeduct = 1; // Default for video and edit\n            \n            if (type === 'image' && price) {\n                // Convert price to credits (round up to nearest credit)\n                creditsToDeduct = Math.ceil(price * 100);\n            }\n            \n            // Deduct credits\n            const newCredits = Math.max(0, currentCredits - creditsToDeduct);\n            updateCreditsDisplay(newCredits);\n            \n            // Update modal stats\n            if (type === 'video') {\n                const modalVideos = document.getElementById('modalVideos');\n                modalVideos.textContent = parseInt(modalVideos.textContent) + 1;\n            } else if (type === 'image') {\n                const modalImages = document.getElementById('modalImages');\n                modalImages.textContent = parseInt(modalImages.textContent) + 1;\n            } else if (type === 'edit') {\n                const modalEdits = document.getElementById('modalEdits');\n                modalEdits.textContent = parseInt(modalEdits.textContent) + 1;\n            }\n        }\n\n        // Setup user avatar click\n        function setupUserAvatar() {\n            const userAvatar = document.getElementById('userAvatar');\n            userAvatar.style.cursor = 'pointer';\n            userAvatar.addEventListener('click', showUserModal);\n        }\n\n        // Show user modal\n        function showUserModal() {\n            const modal = document.getElementById('userModal');\n            \n            // Update modal data\n            document.getElementById('modalAvatar').textContent = currentUsername.charAt(0).toUpperCase();\n            document.getElementById('modalTitle').textContent = currentUsername;\n            document.getElementById('modalUserId').textContent = currentUserId;\n            document.getElementById('modalLang').textContent = currentLang.charAt(0).toUpperCase() + currentLang.slice(1);\n            \n            // Show modal\n            modal.classList.add('show');\n        }\n\n        // Close user modal\n        function closeUserModal() {\n            const modal = document.getElementById('userModal');\n            modal.classList.remove('show');\n        }\n\n        // Show toast notification\n        function showToast(type, title, message) {\n            const toast = document.getElementById('toast');\n            const toastTitle = document.getElementById('toastTitle');\n            const toastMessage = document.getElementById('toastMessage');\n            \n            toast.className = `toast ${type}`;\n            toastTitle.textContent = title;\n            toastMessage.textContent = message;\n            \n            toast.classList.add('show');\n            \n            setTimeout(() => {\n                toast.classList.remove('show');\n            }, 3000);\n        }\n\n        // Resolution calculations based on SeedDream-V4 specifications\n        const resolutionMap = {\n            '1:1': {\n                '1024': { width: 1024, height: 1024, pixels: 1048576, price: 0.015 },\n                '1448': { width: 1448, height: 1448, pixels: 2096704, price: 0.027 },\n                '1920': { width: 1920, height: 1920, pixels: 3686400, price: 0.045 },\n                '4096': { width: 4096, height: 4096, pixels: 16777216, price: 0.089 }\n            },\n            '9:16': {\n                '1024': { width: 576, height: 1024, pixels: 589824, price: 0.012 },\n                '1448': { width: 814, height: 1448, pixels: 1178992, price: 0.022 },\n                '1920': { width: 1080, height: 1920, pixels: 2073600, price: 0.038 },\n                '4096': { width: 2304, height: 4096, pixels: 9437184, price: 0.075 }\n            },\n            '16:9': {\n                '1024': { width: 1024, height: 576, pixels: 589824, price: 0.012 },\n                '1448': { width: 1448, height: 814, pixels: 1178992, price: 0.022 },\n                '1920': { width: 1920, height: 1080, pixels: 2073600, price: 0.038 },\n                '4096': { width: 4096, height: 2304, pixels: 9437184, price: 0.075 }\n            },\n            '4:3': {\n                '1024': { width: 1024, height: 768, pixels: 786432, price: 0.014 },\n                '1448': { width: 1448, height: 1086, pixels: 1573128, price: 0.025 },\n                '1920': { width: 1920, height: 1440, pixels: 2764800, price: 0.042 },\n                '4096': { width: 4096, height: 3072, pixels: 12582912, price: 0.082 }\n            },\n            '3:2': {\n                '1024': { width: 1024, height: 683, pixels: 699392, price: 0.013 },\n                '1448': { width: 1448, height: 965, pixels: 1397320, price: 0.024 },\n                '1920': { width: 1920, height: 1280, pixels: 2457600, price: 0.040 },\n                '4096': { width: 4096, height: 2731, pixels: 11189376, price: 0.078 }\n            },\n            '21:9': {\n                '1024': { width: 1024, height: 439, pixels: 449536, price: 0.010 },\n                '1448': { width: 1448, height: 621, pixels: 899208, price: 0.019 },\n                '1920': { width: 1920, height: 823, pixels: 1580160, price: 0.032 },\n                '4096': { width: 4096, height: 1757, pixels: 7192928, price: 0.068 }\n            }\n        };\n\n        // Update resolution options based on aspect ratio\n        function updateResolutionOptions() {\n            const aspectRatio = document.getElementById('imageAspectRatio').value;\n            const resolutionSelect = document.getElementById('imageResolution');\n            const qualitySelect = document.getElementById('imageQuality');\n            \n            // Update button price based on selected resolution\n            updateDimensionsPreview();\n        }\n\n        // Update dimensions preview and pricing\n        function updateDimensionsPreview() {\n            const aspectRatio = document.getElementById('imageAspectRatio').value;\n            const resolution = document.getElementById('imageResolution').value;\n            const quality = document.getElementById('imageQuality').value;\n            \n            const dims = resolutionMap[aspectRatio][resolution];\n            const pixels = dims.pixels;\n            const basePrice = dims.price;\n            \n            // Apply quality multiplier\n            const qualityMultipliers = {\n                'standard': 1.0,\n                'high': 1.2,\n                'ultra': 1.5,\n                'premium': 2.0\n            };\n            \n            const finalPrice = basePrice * qualityMultipliers[quality];\n            const mpString = (pixels / 1000000).toFixed(1) + 'MP';\n            \n            // Update preview\n            document.querySelector('.dimension-info').textContent = \n                `${dims.width} × ${dims.height} pixels (${mpString})`;\n            document.querySelector('.dimension-price').textContent = \n                `Cost: $${finalPrice.toFixed(3)}`;\n            \n            // Update button price\n            const createBtn = document.getElementById('createImageBtn');\n            createBtn.textContent = `Run $${finalPrice.toFixed(3)}`;\n        }\n\n        // Update resolution options for edit form\n        function updateEditResolutionOptions() {\n            // Update button price based on selected resolution\n            updateEditDimensionsPreview();\n        }\n\n        // Update dimensions preview and pricing for edit form\n        function updateEditDimensionsPreview() {\n            const aspectRatio = document.getElementById('editAspectRatio').value;\n            const resolution = document.getElementById('editResolution').value;\n            const quality = document.getElementById('editQuality').value;\n            \n            const dims = resolutionMap[aspectRatio][resolution];\n            const pixels = dims.pixels;\n            const basePrice = dims.price;\n            \n            // Apply quality multiplier\n            const qualityMultipliers = {\n                'standard': 1.0,\n                'high': 1.2,\n                'ultra': 1.5,\n                'premium': 2.0\n            };\n            \n            const finalPricePerImage = basePrice * qualityMultipliers[quality];\n            const mpString = (pixels / 1000000).toFixed(1) + 'MP';\n            \n            // Get current image count - ensure uploadedEditImages is defined\n            const imageCount = (typeof uploadedEditImages !== 'undefined' && uploadedEditImages) ? uploadedEditImages.length : 0;\n            const totalPrice = finalPricePerImage * imageCount;\n            \n            // Update preview - check if elements exist\n            const editDimensionInfo = document.querySelector('#editDimensionsPreview .dimension-info');\n            const editDimensionPrice = document.querySelector('#editDimensionsPreview .dimension-price');\n            \n            if (editDimensionInfo && editDimensionPrice) {\n                editDimensionInfo.textContent = `${dims.width} × ${dims.height} pixels (${mpString})`;\n                \n                if (imageCount > 0) {\n                    editDimensionPrice.textContent = `Cost: $${finalPricePerImage.toFixed(3)} per image ($${totalPrice.toFixed(3)} total)`;\n                } else {\n                    editDimensionPrice.textContent = `Cost: $${finalPricePerImage.toFixed(3)} per image`;\n                }\n            }\n            \n            // Update button price\n            const editBtn = document.getElementById('editImageBtn');\n            if (editBtn) {\n                if (imageCount > 0) {\n                    editBtn.textContent = `Run $${totalPrice.toFixed(3)}`;\n                } else {\n                    editBtn.textContent = 'Run';\n                }\n            }\n        }\n\n        // Daily Reward and unimgai Stars System\n        let dailyRewardClaimed = false;\n\n        // Check daily reward status on page load\n        function checkDailyRewardStatus() {\n            const lastClaim = localStorage.getItem(`lastDailyClaim_${currentUserId}`);\n            const today = new Date().toDateString();\n            \n            if (lastClaim === today) {\n                dailyRewardClaimed = true;\n                updateDailyRewardButton();\n            }\n        }\n        \n        // Reset daily reward (for testing/development)\n        function resetDailyReward() {\n            dailyRewardClaimed = false;\n            localStorage.removeItem(`lastDailyClaim_${currentUserId}`);\n            updateDailyRewardButton();\n            console.log('✅ Daily reward reset! You can claim again.');\n        }\n        \n        // Make resetDailyReward available globally for console access\n        window.resetDailyReward = resetDailyReward;\n\n        // Update daily reward button state\n        function updateDailyRewardButton() {\n            const claimBtn = document.getElementById('claimRewardBtn');\n            const rewardStatus = document.getElementById('rewardStatus');\n            const dailyRewardBtn = document.getElementById('dailyRewardBtn');\n            \n            if (dailyRewardClaimed) {\n                claimBtn.disabled = true;\n                claimBtn.textContent = 'Already Claimed';\n                rewardStatus.textContent = 'Come back tomorrow for your next reward!';\n                if (dailyRewardBtn) {\n                    dailyRewardBtn.classList.add('claimed');\n                    const rewardText = dailyRewardBtn.querySelector('.reward-text');\n                    if (rewardText) rewardText.textContent = 'Claimed';\n                }\n            } else {\n                claimBtn.disabled = false;\n                claimBtn.textContent = 'Claim 5 Free unimgai Stars';\n                rewardStatus.textContent = 'Claim your daily bonus of 5 unimgai stars!';\n                if (dailyRewardBtn) {\n                    dailyRewardBtn.classList.remove('claimed');\n                    const rewardText = dailyRewardBtn.querySelector('.reward-text');\n                    if (rewardText) rewardText.textContent = 'Daily Gift';\n                }\n            }\n        }\n\n        // Open credits modal\n        function openCreditsModal() {\n            console.log('🚀 openCreditsModal llamada');\n            try {\n                const modal = document.getElementById('creditsModal');\n                console.log('📦 Modal encontrado:', !!modal);\n                \n                if (modal) {\n                    modal.classList.add('show');\n                    console.log('✅ Clase \"show\" agregada al modal');\n                    console.log('🔄 Llamando a loadCreditsPlans()...');\n                    loadCreditsPlans(); // Load Credits plans when opening modal\n                } else {\n                    console.error('❌ Credits modal not found');\n                    showToast('error', 'Error', 'Unable to open credits modal');\n                }\n            } catch (error) {\n                console.error('❌ Error opening credits modal:', error);\n                showToast('error', 'Error', 'Unable to open credits modal');\n            }\n        }\n\n        // Close credits modal\n        function closeCreditsModal() {\n            const modal = document.getElementById('creditsModal');\n            modal.classList.remove('show');\n        }\n\n        // Claim daily reward\n        async function claimDailyReward() {\n            if (dailyRewardClaimed) {\n                showToast('error', 'Already Claimed', 'You have already claimed your daily reward. Come back tomorrow!');\n                return;\n            }\n\n            const claimBtn = document.getElementById('claimRewardBtn');\n            const originalText = claimBtn.textContent;\n            \n            try {\n                // Show loading state\n                claimBtn.disabled = true;\n                claimBtn.textContent = 'Claiming...';\n                \n                // Reward credits amount\n                const rewardCredits = 5;\n                \n                // Send reward claim to webhook FIRST and wait for response\n                console.log('📤 Sending claim request to webhook...');\n                const webhookResponse = await sendRewardClaim(rewardCredits);\n                \n                // Check if webhook responded successfully\n                if (!webhookResponse || !webhookResponse.success) {\n                    throw new Error(webhookResponse?.message || 'Webhook did not confirm the reward');\n                }\n                \n                console.log('✅ Webhook confirmed reward:', webhookResponse);\n                \n                // Only update locally if webhook confirmed\n                const headerCreditsElement = document.getElementById('headerCredits');\n                const currentCredits = parseInt(headerCreditsElement.textContent);\n                const newCredits = currentCredits + rewardCredits;\n                \n                // Update credits display\n                updateCreditsDisplay(newCredits);\n                \n                // Mark as claimed\n                dailyRewardClaimed = true;\n                const today = new Date().toDateString();\n                localStorage.setItem(`lastDailyClaim_${currentUserId}`, today);\n                \n                // Update button state\n                updateDailyRewardButton();\n                \n                // Show success message\n                showToast('success', 'Daily Reward Claimed!', `You received ${rewardCredits} free unimgai stars!`);\n                \n            } catch (error) {\n                console.error('❌ Error claiming daily reward:', error);\n                claimBtn.disabled = false;\n                claimBtn.textContent = originalText;\n                showToast('error', 'Claim Failed', error.message || 'Unable to claim reward. Please try again.');\n            }\n        }\n\n        // Send reward claim to webhook with CORS workarounds\n        async function sendRewardClaim(credits) {\n            const webhookUrl = 'https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/bf8d944b-0885-437b-b709-7079a3fbfbf1';\n            \n            const rewardData = {\n                type: 'daily_reward',\n                credits: credits,\n                user_id: currentUserId,\n                username: currentUsername,\n                lang: currentLang,\n                timestamp: new Date().toISOString()\n            };\n            \n            try {\n                // Method 1: Try direct POST with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'unimgai-dashboard',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(rewardData)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                return await response.json();\n                \n            } catch (error) {\n                console.error('Direct webhook call failed, trying CORS proxy:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'User-Agent': 'unimgai-dashboard'\n                        },\n                        body: JSON.stringify(rewardData)\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        return await proxyResponse.json();\n                    }\n                } catch (proxyError) {\n                    console.error('CORS proxy also failed:', proxyError);\n                }\n                \n                // Method 3: Simulate success for development\n                console.log('Simulating reward claim success for development');\n                return { success: true, message: 'Reward claimed successfully' };\n            }\n        }\n\n        // Old Telegram Stars buyPlan function removed - Now using NOWPayments integration\n\n        // Send purchase data to webhook with CORS workarounds\n        async function sendPurchaseData(planType, credits, price, starsNeeded) {\n            const webhookUrl = `https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/dad5726f-ef25-4976-8780-c2e892a37b9e?user_id=${encodeURIComponent(currentUserId)}`;\n            \n            const purchaseData = {\n                type: 'purchase',\n                plan_type: planType,\n                credits: credits,\n                price: price,\n                stars_needed: starsNeeded,\n                telegram_star_price: telegramStarPrice,\n                user_id: currentUserId,\n                username: currentUsername,\n                lang: currentLang,\n                timestamp: new Date().toISOString()\n            };\n            \n            try {\n                // Method 1: Try direct POST with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'unimgai-dashboard',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(purchaseData)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                return await response.json();\n                \n            } catch (error) {\n                console.error('Direct webhook call failed, trying CORS proxy:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'User-Agent': 'unimgai-dashboard'\n                        },\n                        body: JSON.stringify(purchaseData)\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        return await proxyResponse.json();\n                    }\n                } catch (proxyError) {\n                    console.error('CORS proxy also failed:', proxyError);\n                }\n                \n                // Method 3: Simulate success for development\n                console.log('Simulating purchase success for development');\n                return { success: true, message: 'Purchase processed successfully' };\n            }\n        }\n\n        // Close modals when clicking outside\n        document.addEventListener('click', function(event) {\n            const creditsModal = document.getElementById('creditsModal');\n            const userModal = document.getElementById('userModal');\n            \n            if (event.target === creditsModal) {\n                closeCreditsModal();\n            }\n            if (event.target === userModal) {\n                closeUserModal();\n            }\n        });\n\n        // Initialize on page load\n        document.addEventListener('DOMContentLoaded', function() {\n            initializePage();\n            \n            // Check daily reward status\n            checkDailyRewardStatus();\n            \n            // Add event listeners for resolution updates - Image Creator\n            document.getElementById('imageAspectRatio').addEventListener('change', updateResolutionOptions);\n            document.getElementById('imageResolution').addEventListener('change', updateDimensionsPreview);\n            document.getElementById('imageQuality').addEventListener('change', updateDimensionsPreview);\n            \n            // Add event listeners for resolution updates - Image Editor\n            document.getElementById('editAspectRatio').addEventListener('change', updateEditResolutionOptions);\n            document.getElementById('editResolution').addEventListener('change', updateEditDimensionsPreview);\n            document.getElementById('editQuality').addEventListener('change', updateEditDimensionsPreview);\n            \n            // Initialize dimensions preview\n            updateDimensionsPreview();\n            updateEditDimensionsPreview();\n        });\n        \n        // Fallback: hide loading screen after 3 seconds even if initialization fails\n        setTimeout(() => {\n            const loadingScreen = document.getElementById('loadingScreen');\n            if (loadingScreen && !loadingScreen.classList.contains('hidden')) {\n                loadingScreen.classList.add('hidden');\n                console.warn('Loading screen hidden by fallback timer');\n            }\n        }, 3000);\n    </script>\n</body>\n</html>\n","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[96,0],"id":"30c1b625-3265-4d5e-ace5-e07d12ad2a1a","name":"Respond to Webhook"},{"parameters":{"path":"dad5726f-ef25-4976-8780-c2e892a37b9e","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[-128,224],"id":"814102c3-2515-4832-9f2d-45394cca58a8","name":"Webhook1","webhookId":"dad5726f-ef25-4976-8780-c2e892a37b9e"},{"parameters":{"respondWith":"json","responseBody":"={{ $json.plans }}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[544,224],"id":"2778fc59-2606-476b-b323-d3ffe3e8a873","name":"Respond to Webhook1"},{"parameters":{"assignments":{"assignments":[{"id":"c03ddfd7-a255-45f2-9162-2f14bc0a57d8","name":"plans[0].major_price_usd","value":"={{ $json.plans[0].major_price_usd }}","type":"number"},{"id":"3dd7bc3b-b554-40e9-88e2-d770e5f5f322","name":"plans[0]","value":"={{ $json.plans[0] }}","type":"object"},{"id":"fbe11633-6d32-4029-afcc-b5eae13a315f","name":"plans[1]","value":"={{ $json.plans[1] }}","type":"object"},{"id":"d24f61d1-7c59-4088-8d84-260f618b8a91","name":"plans[2]","value":"={{ $json.plans[2] }}","type":"object"},{"id":"b007201e-3944-40ee-8b04-b0a344cadd79","name":"plans[3]","value":"={{ $json.plans[3] }}","type":"object"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[320,224],"id":"bee58c7c-c9c1-4249-80e0-1ebdfd086371","name":"Edit Fields"},{"parameters":{"jsCode":"// Script para n8n - Calcular costos de planes basado en sistema de créditos USD\n// Los usuarios compran planes y reciben créditos (estrellas) para generar contenido\n\n// Planes de compra de créditos - 1 USD = 100 créditos\nconst CREDIT_PLANS = [\n  { \n    plan_price_usd: 5,\n    credits_received: 500,\n    plan_name: \"Plan Básico\"\n  },\n  { \n    plan_price_usd: 15, \n    credits_received: 1500,\n    plan_name: \"Plan Estándar\"\n  },\n  { \n    plan_price_usd: 25, \n    credits_received: 2500,\n    plan_name: \"Plan Premium\"\n  },\n  { \n    plan_price_usd: 30, \n    credits_received: 3000,\n    plan_name: \"Plan Pro\"\n  }\n];\n\n// Costos de generación en créditos\nconst GENERATION_COSTS = {\n  image: 5,    // créditos por imagen\n  video: 50    // créditos por video\n};\n\n// Obtener datos de entrada si existen\nconst inputData = $input.first()?.json;\n\n// Variable para almacenar el resultado\nlet result;\n\nif (inputData && inputData.plan_price) {\n  // Calcular para un plan específico por precio\n  const plan = CREDIT_PLANS.find(p => p.plan_price_usd === inputData.plan_price);\n  \n  if (!plan) {\n    result = {\n      error: `No se encontró plan de $${inputData.plan_price} USD`,\n      available_plans: CREDIT_PLANS.map(p => p.plan_price_usd),\n      timestamp: new Date().toISOString(),\n      symbol: 'USD',\n      success: false\n    };\n  } else {\n    const maxImages = Math.floor(plan.credits_received / GENERATION_COSTS.image);\n    const maxVideos = Math.floor(plan.credits_received / GENERATION_COSTS.video);\n    \n    result = {\n      symbol: 'USD',\n      calculation_type: 'specific_plan',\n      plan_price_requested: inputData.plan_price,\n      timestamp: new Date().toISOString(),\n      success: true,\n      plan: {\n        plan_name: plan.plan_name,\n        plan_price_usd: plan.plan_price_usd,\n        credits_received: plan.credits_received,\n        generation_costs: GENERATION_COSTS,\n        max_images_possible: maxImages,\n        max_videos_possible: maxVideos,\n        calculations: {\n          credits_per_dollar: plan.credits_received / plan.plan_price_usd,\n          images_calculation: `${plan.credits_received} créditos ÷ ${GENERATION_COSTS.image} = ${maxImages} imágenes`,\n          videos_calculation: `${plan.credits_received} créditos ÷ ${GENERATION_COSTS.video} = ${maxVideos} videos`\n        }\n      },\n      summary: {\n        symbol: 'USD',\n        plan_name: plan.plan_name,\n        plan_price_usd: plan.plan_price_usd,\n        credits_received: plan.credits_received,\n        max_images: maxImages,\n        max_videos: maxVideos\n      }\n    };\n  }\n} else {\n  // Calcular todos los planes disponibles\n  const allPlans = [];\n  \n  for (const plan of CREDIT_PLANS) {\n    const maxImages = Math.floor(plan.credits_received / GENERATION_COSTS.image);\n    const maxVideos = Math.floor(plan.credits_received / GENERATION_COSTS.video);\n    \n    allPlans.push({\n      plan_name: plan.plan_name,\n      plan_price_usd: plan.plan_price_usd,\n      credits_received: plan.credits_received,\n      generation_costs: GENERATION_COSTS,\n      max_images_possible: maxImages,\n      max_videos_possible: maxVideos,\n      calculations: {\n        credits_per_dollar: plan.credits_received / plan.plan_price_usd,\n        images_calculation: `${plan.credits_received} créditos ÷ ${GENERATION_COSTS.image} = ${maxImages} imágenes`,\n        videos_calculation: `${plan.credits_received} créditos ÷ ${GENERATION_COSTS.video} = ${maxVideos} videos`\n      }\n    });\n  }\n  \n  const conversionRate = CREDIT_PLANS[0].credits_received / CREDIT_PLANS[0].plan_price_usd;\n  \n  result = {\n    symbol: 'USD',\n    calculation_type: 'all_plans',\n    plans_info: {\n      success: true,\n      conversion_rate: conversionRate,\n      conversion_description: `1 USD = ${conversionRate} créditos`,\n      generation_costs: GENERATION_COSTS,\n      total_plans: CREDIT_PLANS.length,\n      timestamp: new Date().toISOString()\n    },\n    timestamp: new Date().toISOString(),\n    success: true,\n    plans: allPlans,\n    summary: {\n      symbol: 'USD',\n      total_plans: allPlans.length,\n      conversion_rate: conversionRate,\n      conversion_description: `1 USD = ${conversionRate} créditos`,\n      generation_costs: GENERATION_COSTS,\n      available_plan_prices: CREDIT_PLANS.map(p => p.plan_price_usd)\n    }\n  };\n}\n\n// Retornar el resultado\nreturn [{ json: result }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[96,224],"id":"9a318280-b6fa-48e8-b451-74492c3463c0","name":"Code in JavaScript1"},{"parameters":{"httpMethod":"POST","path":"bf8d944b-0885-437b-b709-7079a3fbfbf1","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[-128,416],"id":"d099a48f-599c-4e5b-9f66-fef99ef13107","name":"Webhook2","webhookId":"bf8d944b-0885-437b-b709-7079a3fbfbf1"},{"parameters":{"options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[720,416],"id":"8309f7d4-bae7-45f6-9aa2-420cee9b8ede","name":"Respond to Webhook2"},{"parameters":{"operation":"get","dataTableId":{"__rl":true,"value":"8oKrDcp5sczgB30J","mode":"list","cachedResultName":"User","cachedResultUrl":"/projects/j0ScW9j43X1fRnX4/datatables/8oKrDcp5sczgB30J"},"filters":{"conditions":[{"keyName":"user_id","keyValue":"={{ $json.body.user_id }}"}]}},"type":"n8n-nodes-base.dataTable","typeVersion":1,"position":[80,416],"id":"9db4ee16-34b5-4778-bad1-cc2dc30173c3","name":"Get row(s)"},{"parameters":{"operation":"upsert","dataTableId":{"__rl":true,"value":"8oKrDcp5sczgB30J","mode":"list","cachedResultName":"User","cachedResultUrl":"/projects/j0ScW9j43X1fRnX4/datatables/8oKrDcp5sczgB30J"},"columns":{"mappingMode":"defineBelow","value":{"user_id":"={{ $json.last_reward }}","total_gems_earned":"={{ $json.total_gems_earned + 5 }}"},"matchingColumns":[],"schema":[{"id":"user_id","displayName":"user_id","required":false,"defaultMatch":false,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"username","displayName":"username","required":false,"defaultMatch":false,"display":true,"type":"string","readOnly":false,"removed":true},{"id":"name","displayName":"name","required":false,"defaultMatch":false,"display":true,"type":"string","readOnly":false,"removed":true},{"id":"language","displayName":"language","required":false,"defaultMatch":false,"display":true,"type":"string","readOnly":false,"removed":true},{"id":"total_gems_earned","displayName":"total_gems_earned","required":false,"defaultMatch":false,"display":true,"type":"number","readOnly":false,"removed":false},{"id":"total_gems_purchased","displayName":"total_gems_purchased","required":false,"defaultMatch":false,"display":true,"type":"number","readOnly":false,"removed":true},{"id":"total_gems_spent","displayName":"total_gems_spent","required":false,"defaultMatch":false,"display":true,"type":"number","readOnly":false,"removed":true},{"id":"gem_balance","displayName":"gem_balance","required":false,"defaultMatch":false,"display":true,"type":"number","readOnly":false,"removed":true},{"id":"total_loaded","displayName":"total_loaded","required":false,"defaultMatch":false,"display":true,"type":"number","readOnly":false,"removed":true},{"id":"referred_by","displayName":"referred_by","required":false,"defaultMatch":false,"display":true,"type":"string","readOnly":false,"removed":true},{"id":"referrals_made","displayName":"referrals_made","required":false,"defaultMatch":false,"display":true,"type":"number","readOnly":false,"removed":true},{"id":"last_upload_date","displayName":"last_upload_date","required":false,"defaultMatch":false,"display":true,"type":"dateTime","readOnly":false,"removed":true},{"id":"last_use_date","displayName":"last_use_date","required":false,"defaultMatch":false,"display":true,"type":"dateTime","readOnly":false,"removed":true},{"id":"last_reward","displayName":"last_reward","required":false,"defaultMatch":false,"display":true,"type":"dateTime","readOnly":false,"removed":true},{"id":"terms_and_conditions","displayName":"terms_and_conditions","required":false,"defaultMatch":false,"display":true,"type":"boolean","readOnly":false,"removed":true},{"id":"blockade","displayName":"blockade","required":false,"defaultMatch":false,"display":true,"type":"boolean","readOnly":false,"removed":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.dataTable","typeVersion":1,"position":[288,416],"id":"9ad3bfc6-f766-4dcd-8736-1958b7541d24","name":"Upsert row(s)"}],"connections":{"Webhook":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]},"Webhook1":{"main":[[{"node":"Code in JavaScript1","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Respond to Webhook1","type":"main","index":0}]]},"Code in JavaScript1":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Webhook2":{"main":[[{"node":"Get row(s)","type":"main","index":0}]]},"Get row(s)":{"main":[[{"node":"Upsert row(s)","type":"main","index":0}]]},"Upsert row(s)":{"main":[[{"node":"Respond to Webhook2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Webhook2":[{"json":{"headers":{"host":"mumbai-sampling-conflicts-forest.trycloudflare.com","user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36","content-length":"129","accept":"application/json","accept-encoding":"gzip","accept-language":"es-ES,es;q=0.9","cdn-loop":"cloudflare; loops=1; subreqs=1","cf-connecting-ip":"206.1.80.150","cf-ew-via":"15","cf-ipcountry":"CO","cf-ray":"991a3033c3f431f2-ORD","cf-visitor":"{\"scheme\":\"https\"}","cf-warp-tag-id":"4e633b37-eb1a-4e38-bac1-a7418309a030","cf-worker":"trycloudflare.com","connection":"keep-alive","content-type":"application/json","origin":"null","priority":"u=1, i","sec-ch-ua":"\"Brave\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"Windows\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"cross-site","sec-gpc":"1","x-forwarded-for":"206.1.80.150","x-forwarded-proto":"https"},"params":{},"query":{},"body":{"type":"daily_reward","credits":5,"user_id":"852169805","username":"Tkeyfff","lang":"es","timestamp":"2025-10-20T17:20:54.511Z"},"webhookUrl":"https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/bf8d944b-0885-437b-b709-7079a3fbfbf1","executionMode":"production"}}]},"versionId":"e8e5ed11-95ed-405f-a83f-cab6df8dd80a","triggerCount":3,"shared":[{"createdAt":"2025-10-19T02:46:27.431Z","updatedAt":"2025-10-19T02:46:27.431Z","role":"workflow:owner","workflowId":"VEqNRSSXwPBuqcef","projectId":"j0ScW9j43X1fRnX4"}],"tags":[]}