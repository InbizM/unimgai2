{
  "name": "unimgai",
  "nodes": [
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1696,
        448
      ],
      "id": "a7765437-2537-47d7-9890-60c3632d5aec",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "operation": "upsert",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $('terms acept').item.json.query.user_id }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "terms_and_conditions": true
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "username",
              "displayName": "username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "language",
              "displayName": "language",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "total_gems_earned",
              "displayName": "total_gems_earned",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "total_gems_purchased",
              "displayName": "total_gems_purchased",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "total_gems_spent",
              "displayName": "total_gems_spent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "gem_balance",
              "displayName": "gem_balance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "total_loaded",
              "displayName": "total_loaded",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "referred_by",
              "displayName": "referred_by",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "referrals_made",
              "displayName": "referrals_made",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "terms_and_conditions",
              "displayName": "terms_and_conditions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "blockade",
              "displayName": "blockade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2592,
        448
      ],
      "id": "b1fd17ad-8523-424e-9283-18656672bd40",
      "name": "Upsert row(s)"
    },
    {
      "parameters": {
        "chatId": "={{ $('Upsert row(s)').item.json.user_id }}",
        "text": "={{ $json.message }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "={{ $json.reply_markup.inline_keyboard[0][0].text }}",
                    "additionalFields": {
                      "web_app": {
                        "url": "={{ $json.reply_markup.inline_keyboard[0][0].url }}"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2144,
        448
      ],
      "id": "0f3307e2-bbdd-42fa-a4d5-7569e059cb6a",
      "name": "Send a text message1",
      "webhookId": "51819ef7-36d6-430c-a804-df2e09a15f42",
      "credentials": {
        "telegramApi": {
          "id": "E2ITcLBr6y9qgG1Q",
          "name": "unimgai"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1. Obtener los datos directamente desde el nodo 'Webhook1' como solicitaste\nconst webhookData = $('terms acept').first().json;\n\n// --- EXTRAER DATOS DESDE WEBDATA ---\nconst username = webhookData.body?.username || 'unknown';\nconst lang = webhookData.body?.lang || 'en';\nconst userId = webhookData.query?.user_id || 'unknown_id';\nconst firstName = username || 'there';\n\n// 2. Definir los mensajes de bienvenida\nconst welcomeMessages = {\n  es: `<b>¬°Bienvenido a unimgai! üéâ</b>\\n\\nEs el momento de empezar a disfrutar de la edici√≥n de im√°genes y la creaci√≥n de videos con IA.`,\n  en: `<b>Welcome to unimgai! üéâ</b>\\n\\nIt's time to start enjoying image editing and video creation powered by AI.`,\n  ru: `<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ unimgai! üéâ</b>\\n\\n–ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.`,\n  hi: `<b>unimgai ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! üéâ</b>\\n\\n‡§Ö‡§¨ AI ‡§ï‡•á ‡§∏‡§æ‡§• ‡§õ‡§µ‡§ø ‡§∏‡§Ç‡§™‡§æ‡§¶‡§® ‡§î‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ï‡§æ ‡§Ü‡§®‡§Ç‡§¶ ‡§≤‡•á‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§π‡•à‡•§`,\n  id: `<b>Selamat datang di unimgai! üéâ</b>\\n\\nSaatnya mulai menikmati pengeditan gambar dan pembuatan video yang didukung oleh AI.`,\n  pt: `<b>Bem-vindo ao unimgai! üéâ</b>\\n\\nHora de come√ßar a desfrutar da edi√ß√£o de imagens e cria√ß√£o de v√≠deos com tecnologia de IA.`,\n  uk: `<b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ unimgai! üéâ</b>\\n\\n–ß–∞—Å –ø–æ—á–∞—Ç–∏ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü.`\n};\n\n// 3. Definir los mensajes de referidos (MEJORADO)\nconst referralMessages = {\n  es: `<b><u>üéÅ ¬°Invita y gana UnimgAI Starts!</u></b>\\n\\nComparte tu enlace y recibe <b>10 Starts gratis</b> por cada amigo que se una. ¬°Tu amigo tambi√©n recibir√° 10 Starts al registrarse!`,\n  en: `<b><u>üéÅ Invite & Earn UnimgAI Starts!</u></b>\\n\\nShare your link and get <b>10 free Starts</b> for each friend who joins. Your friend will also get 10 Starts upon signing up!`,\n  ru: `<b><u>üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π –∏ –ø–æ–ª—É—á–∞–π UnimgAI Starts!</u></b>\\n\\n–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∏ <b>10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö Starts</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è. –¢–≤–æ–π –¥—Ä—É–≥ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç 10 Starts –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!`,\n  hi: `<b><u>üéÅ ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§Ü‡§Æ‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ UnimgAI Starts ‡§ï‡§Æ‡§æ‡§è‡§Ç!</u></b>\\n\\n‡§Ö‡§™‡§®‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§π‡§∞ ‡§â‡§∏ ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è <b>10 ‡§Æ‡•Å‡§´‡§º‡•ç‡§§ Starts</b> ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ú‡•ã ‡§ú‡•Å‡§°‡§º‡§§‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•á ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§ï‡•ã ‡§≠‡•Ä ‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ 10 Starts ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á!`,\n  id: `<b><u>üéÅ Ajak Teman & Dapatkan UnimgAI Starts!</u></b>\\n\\nBagikan tautanmu dan dapatkan <b>10 Starts gratis</b> untuk setiap teman yang bergabung. Temanmu juga akan mendapatkan 10 Starts saat mendaftar!`,\n  pt: `<b><u>üéÅ Convide e ganhe UnimgAI Starts!</u></b>\\n\\nCompartilhe seu link e ganhe <b>10 Starts gratuitos</b> para cada amigo que se juntar. Seu amigo tamb√©m receber√° 10 Starts ao se cadastrar!`,\n  uk: `<b><u>üéÅ –ó–∞–ø—Ä–æ—à—É–π —Ç–∞ –æ—Ç—Ä–∏–º—É–π UnimgAI Starts!</u></b>\\n\\n–ü–æ–¥—ñ–ª–∏—Å—è —Å–≤–æ—ó–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –æ—Ç—Ä–∏–º—É–π <b>10 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö Starts</b> –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –¥—Ä—É–≥–∞, —è–∫–∏–π –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è. –¢–≤—ñ–π –¥—Ä—É–≥ —Ç–∞–∫–æ–∂ –æ—Ç—Ä–∏–º–∞—î 10 Starts –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó!`\n};\n\n// 4. Definir textos de la interfaz (compartir)\nconst uiTexts = {\n  es: { shareText: \"üí´ Compartir unimgai con tus amigos\" },\n  en: { shareText: \"üí´ Share unimgai with your friends\" },\n  ru: { shareText: \"üí´ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è unimgai —Å –¥—Ä—É–∑—å—è–º–∏\" },\n  hi: { shareText: \"üí´ ‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• unimgai ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç\" },\n  id: { shareText: \"üí´ Bagikan unimgai ke temanmu\" },\n  pt: { shareText: \"üí´ Compartilhe unimgai com seus amigos\" },\n  uk: { shareText: \"üí´ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è unimgai –∑ –¥—Ä—É–∑—è–º–∏\" }\n};\n\n// 5. Generar enlaces de referido\nconst referralLink = `https://t.me/unimgai_bot?start=ref_${username}`;\nconst shareText = 'üöÄ Try unimgai ‚Äî AI Image Editor on Telegram! Edit, enhance, and transform your photos with AI!';\nconst shareLink = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`;\n\n// 6. Construir la URL din√°micamente con los datos del usuario\nconst baseUrl = 'https://unimgai-n8n.nmvnem.easypanel.host/webhook/dashboard';\nconst params = {\n  user_id: userId,\n  username: username,\n  lang: lang\n};\n\n// Funci√≥n para construir la cadena de consulta (query string)\nconst buildQueryString = (obj) => {\n  return Object.keys(obj)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)\n    .join('&');\n};\n\nconst queryString = buildQueryString(params);\nconst singleLink = `${baseUrl}?${queryString}`;\n\nconst singleButtonLabel = 'UnimgAI ‚åò';\n\n// 7. Seleccionar contenido seg√∫n el idioma\nconst welcomeMessage = welcomeMessages[lang] || welcomeMessages['en'];\nconst referralMessage = referralMessages[lang] || referralMessages['en'];\nconst ui = uiTexts[lang] || uiTexts['en'];\n\n// 8. Construir el mensaje final\nconst fullMessage = `${welcomeMessage}\\n\\n${referralMessage}\\n\\n<a href=\"${shareLink}\">${ui.shareText}</a>`;\n\n// 9. Crear el teclado en l√≠nea con el √∫nico bot√≥n\nconst replyMarkup = {\n  inline_keyboard: [[\n    { text: singleButtonLabel, url: singleLink }\n  ]]\n};\n\n// 10. Retornar todo en un solo JSON\nreturn [{\n  json: {\n    message: fullMessage,\n    link: singleLink,\n    buttonLabel: singleButtonLabel,\n    reply_markup: replyMarkup,\n    firstName,\n    username,\n    language: lang\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2368,
        448
      ],
      "id": "8bf43902-b7c9-4e03-a5ee-ef340f1a0434",
      "name": "Code in JavaScript3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "10c127e2-cd14-473f-8aec-f5f178f6117e",
              "leftValue": "={{ $json.body.accepted }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2816,
        448
      ],
      "id": "9d0ca947-5c77-4c9e-b761-020f349d1771",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f0e5b6c5-6d1f-40a8-a944-6b44b44d8170",
              "name": "body",
              "value": "={{ $('terms acept').item.json.body }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1920,
        448
      ],
      "id": "d924162f-5d99-4756-af65-7d1ff2936c15",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>unimgai - Dashboard</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üé®</text></svg>\">\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        :root {\n            --bg-primary: #0F0E11;\n            --text-primary: #E3E3E3;\n            --color-primary: #E61E85;\n            --color-secondary: #0F2D5C;\n            --surface: #1A191C;\n            --text-muted: #BFBFBF;\n            --success: #4CAF50;\n            --warning: #FF9800;\n            --error: #F44336;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background: linear-gradient(135deg, var(--bg-primary) 0%, #1a1a1f 100%);\n            color: var(--text-primary);\n            min-height: 100vh;\n            overflow-x: hidden;\n            position: relative;\n        }\n\n        /* Custom Scrollbar Styles */\n        ::-webkit-scrollbar {\n            width: 12px;\n            height: 12px;\n        }\n\n        ::-webkit-scrollbar-track {\n            background: rgba(15, 14, 17, 0.5);\n            border-radius: 10px;\n            border: 1px solid rgba(230, 30, 133, 0.1);\n        }\n\n        ::-webkit-scrollbar-thumb {\n            background: linear-gradient(180deg, #E61E85 0%, #B01567 100%);\n            border-radius: 10px;\n            border: 2px solid rgba(15, 14, 17, 0.5);\n            box-shadow: 0 0 10px rgba(230, 30, 133, 0.3);\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n            background: linear-gradient(180deg, #FF2E95 0%, #C01577 100%);\n            box-shadow: 0 0 15px rgba(230, 30, 133, 0.5);\n        }\n\n        ::-webkit-scrollbar-thumb:active {\n            background: linear-gradient(180deg, #D01E75 0%, #A01557 100%);\n        }\n\n        /* Firefox Scrollbar */\n        * {\n            scrollbar-width: thin;\n            scrollbar-color: #E61E85 rgba(15, 14, 17, 0.5);\n        }\n\n        /* Animated background lights */\n        .particles {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            z-index: 1;\n            overflow: hidden;\n        }\n\n        .diffused-light {\n            position: absolute;\n            border-radius: 50%;\n            filter: blur(60px);\n            opacity: 0.15;\n            animation: floatLight 20s infinite ease-in-out;\n        }\n\n        .diffused-light.small {\n            width: 150px;\n            height: 150px;\n        }\n\n        .diffused-light.medium {\n            width: 250px;\n            height: 250px;\n        }\n\n        .diffused-light.large {\n            width: 350px;\n            height: 350px;\n        }\n\n        @keyframes floatLight {\n            0%, 100% {\n                transform: translate(0, 0) scale(1);\n                opacity: 0.1;\n            }\n            25% {\n                transform: translate(150px, -80px) scale(1.2);\n                opacity: 0.2;\n            }\n            50% {\n                transform: translate(-100px, 120px) scale(0.8);\n                opacity: 0.15;\n            }\n            75% {\n                transform: translate(80px, 60px) scale(1.1);\n                opacity: 0.25;\n            }\n        }\n\n        /* Loading screen */\n        .loading-screen {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: var(--bg-primary);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            transition: opacity 0.8s ease, visibility 0.8s ease;\n        }\n\n        .loading-screen.hidden {\n            opacity: 0;\n            visibility: hidden;\n        }\n\n        .logo-loader {\n            width: 120px;\n            height: 120px;\n            position: relative;\n            animation: logoFloat 4s ease-in-out infinite;\n        }\n\n        .logo-loader img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            border-radius: 50%;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.6));\n            animation: logoGlow 3s ease-in-out infinite alternate;\n        }\n\n        @keyframes logoFloat {\n            0%, 100% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            25% {\n                transform: translateY(-10px) rotate(5deg);\n            }\n            50% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            75% {\n                transform: translateY(-5px) rotate(-5deg);\n            }\n        }\n\n        @keyframes logoGlow {\n            0% {\n                filter: drop-shadow(0 0 20px rgba(230, 30, 133, 0.4));\n            }\n            100% {\n                filter: drop-shadow(0 0 40px rgba(230, 30, 133, 0.8));\n            }\n        }\n\n        .loading-text {\n            margin-top: 30px;\n            font-size: 18px;\n            color: var(--text-muted);\n            animation: pulse 1.5s ease-in-out infinite;\n        }\n\n        @keyframes pulse {\n            0%, 100% {\n                opacity: 0.5;\n            }\n            50% {\n                opacity: 1;\n            }\n        }\n\n        /* Header */\n        .header {\n            background: rgba(26, 25, 28, 0.95);\n            backdrop-filter: blur(15px);\n            border-bottom: 2px solid rgba(230, 30, 133, 0.3);\n            padding: 25px 0;\n            position: sticky;\n            top: 0;\n            z-index: 100;\n            animation: slideDown 0.8s ease;\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n        }\n\n        @keyframes slideDown {\n            from {\n                opacity: 0;\n                transform: translateY(-20px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        .header-content {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 0 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .logo {\n            width: 70px;\n            height: 70px;\n            position: relative;\n            animation: mainLogoFloat 6s ease-in-out infinite;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.7));\n        }\n\n        .logo img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            border-radius: 50%;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.5));\n            animation: mainLogoGlow 4s ease-in-out infinite alternate;\n        }\n\n        @keyframes mainLogoFloat {\n            0%, 100% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            25% {\n                transform: translateY(-8px) rotate(3deg);\n            }\n            50% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            75% {\n                transform: translateY(-4px) rotate(-3deg);\n            }\n        }\n\n        @keyframes mainLogoGlow {\n            0% {\n                filter: drop-shadow(0 0 15px rgba(230, 30, 133, 0.3));\n            }\n            100% {\n                filter: drop-shadow(0 0 35px rgba(230, 30, 133, 0.7));\n            }\n        }\n\n        .user-info {\n            display: flex;\n            align-items: center;\n            gap: 18px;\n        }\n\n        .user-avatar {\n            width: 45px;\n            height: 45px;\n            border-radius: 50%;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            color: white;\n            font-size: 18px;\n            box-shadow: 0 0 20px rgba(230, 30, 133, 0.4);\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .user-avatar:hover {\n            transform: scale(1.1);\n            box-shadow: 0 0 25px rgba(230, 30, 133, 0.6);\n        }\n\n        .user-details h3 {\n            font-size: 16px;\n            font-weight: 600;\n            margin-bottom: 2px;\n        }\n\n        .user-credits {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            font-size: 14px;\n            color: var(--color-primary);\n            font-weight: 600;\n        }\n\n        .credits-star {\n            width: 20px;\n            height: 20px;\n            background-image: url('https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000');\n            background-size: contain;\n            background-repeat: no-repeat;\n            background-position: center;\n            filter: drop-shadow(0 0 4px rgba(255, 215, 0, 0.6));\n        }\n\n        .user-details p {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        /* Main container */\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 40px 20px;\n            position: relative;\n            z-index: 10;\n        }\n\n        /* Stats grid */\n        .stats-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.2s both;\n        }\n\n        @keyframes fadeInUp {\n            from {\n                opacity: 0;\n                transform: translateY(30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        .stat-card {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 25px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .stat-card::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 3px;\n            background: linear-gradient(90deg, var(--color-primary), #ff4081);\n        }\n\n        .stat-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 15px 40px rgba(230, 30, 133, 0.2);\n        }\n\n        .stat-icon {\n            width: 50px;\n            height: 50px;\n            border-radius: 12px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 24px;\n            margin-bottom: 15px;\n        }\n\n        .stat-icon.credits {\n            background: linear-gradient(135deg, #4CAF50, #45a049);\n        }\n\n        .stat-icon.videos {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n        }\n\n        .stat-icon.storage {\n            background: linear-gradient(135deg, #2196F3, #1976D2);\n        }\n\n        .stat-icon.api {\n            background: linear-gradient(135deg, #FF9800, #F57C00);\n        }\n\n        .stat-value {\n            font-size: 28px;\n            font-weight: bold;\n            margin-bottom: 5px;\n            background: linear-gradient(135deg, var(--text-primary), var(--color-primary));\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-clip: text;\n        }\n\n        .stat-label {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        /* Creator Tabs */\n        .creator-tabs {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 30px;\n            animation: fadeInUp 1s ease 0.3s both;\n        }\n\n        .tab-btn {\n            background: rgba(26, 25, 28, 0.8);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            border-radius: 50px;\n            padding: 12px 24px;\n            color: var(--text-muted);\n            font-size: 14px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            backdrop-filter: blur(10px);\n        }\n\n        .tab-btn:hover {\n            border-color: var(--color-primary);\n            color: var(--color-primary);\n            transform: translateY(-2px);\n        }\n\n        .tab-btn.active {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            border-color: var(--color-primary);\n            color: white;\n            box-shadow: 0 5px 20px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Creator Sections */\n        .creator-section {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.4s both;\n            display: none;\n        }\n\n        .creator-section.active {\n            display: block;\n        }\n\n        .image-creator .section-title::before {\n            content: 'üñºÔ∏è';\n        }\n\n        .image-editor .section-title::before {\n            content: '‚úèÔ∏è';\n        }\n\n        /* Daily Reward Button */\n        .daily-reward-btn {\n            background: linear-gradient(135deg, #FFD700, #FFA500);\n            color: #000;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 24px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);\n            position: relative;\n            overflow: hidden;\n        }\n\n        .daily-reward-btn::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n            transition: left 0.5s ease;\n        }\n\n        .daily-reward-btn:hover::before {\n            left: 100%;\n        }\n\n        .daily-reward-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);\n        }\n\n        .daily-reward-btn.claimed {\n            background: linear-gradient(135deg, #666, #444);\n            color: #fff;\n            cursor: not-allowed;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n        }\n\n        .reward-icon {\n            font-size: 18px;\n        }\n\n        .reward-text {\n            font-size: 13px;\n        }\n\n        /* unimgai Stars Plans Modal */\n        .credits-modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.8);\n            backdrop-filter: blur(10px);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1001;\n            opacity: 0;\n            visibility: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .credits-modal.show {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .credits-modal-content {\n            background: var(--surface);\n            border-radius: 20px;\n            padding: 40px;\n            border: 2px solid #FFD700;\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n            max-width: 800px;\n            width: 90%;\n            max-height: 90vh;\n            overflow-y: auto;\n            transform: scale(0.9);\n            transition: transform 0.3s ease;\n        }\n\n        .credits-modal.show .credits-modal-content {\n            transform: scale(1);\n        }\n\n        .credits-modal-header {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        .credits-modal-title {\n            font-size: 28px;\n            font-weight: 600;\n            color: #FFD700;\n            margin-bottom: 10px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 10px;\n        }\n\n        .credits-modal-subtitle {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .daily-reward-section {\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 20px;\n            margin-bottom: 30px;\n            text-align: center;\n        }\n\n        .daily-reward-title {\n            font-size: 20px;\n            font-weight: 600;\n            color: #FFD700;\n            margin-bottom: 15px;\n        }\n\n        .claim-reward-btn {\n            background: linear-gradient(135deg, #FFD700, #FFA500);\n            color: #000;\n            border: none;\n            border-radius: 50px;\n            padding: 15px 30px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n            max-width: 300px;\n        }\n\n        .claim-reward-btn:hover:not(:disabled) {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);\n        }\n\n        .claim-reward-btn:disabled {\n            background: linear-gradient(135deg, #666, #444);\n            color: #fff;\n            cursor: not-allowed;\n        }\n\n        .reward-status {\n            margin-top: 10px;\n            font-size: 14px;\n            color: var(--text-muted);\n        }\n\n        .credits-plans {\n            margin-top: 30px;\n        }\n\n        .plans-title {\n            font-size: 22px;\n            font-weight: 600;\n            color: var(--text-primary);\n            margin-bottom: 20px;\n            text-align: center;\n        }\n\n        .plans-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n\n        .plan-card {\n            background: rgba(0, 0, 0, 0.3);\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 25px;\n            text-align: center;\n            transition: all 0.3s ease;\n            position: relative;\n        }\n\n        .plan-card:hover {\n            border-color: #FFD700;\n            transform: translateY(-5px);\n            box-shadow: 0 10px 30px rgba(255, 215, 0, 0.2);\n        }\n\n        .plan-card.popular {\n            border-color: #FFD700;\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n        }\n\n        .popular-badge {\n            position: absolute;\n            top: -10px;\n            right: 20px;\n            background: #FFD700;\n            color: #000;\n            padding: 5px 15px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n        }\n\n        .plan-credits {\n            font-size: 36px;\n            font-weight: bold;\n            color: #FFD700;\n            margin-bottom: 5px;\n        }\n\n        .plan-price {\n            font-size: 24px;\n            font-weight: 600;\n            color: var(--text-primary);\n            margin-bottom: 15px;\n        }\n\n        .plan-description {\n            font-size: 14px;\n            color: var(--text-muted);\n            margin-bottom: 20px;\n        }\n\n        .plan-details {\n            background: rgba(255, 255, 255, 0.05);\n            border-radius: 10px;\n            padding: 15px;\n            margin-bottom: 20px;\n            text-align: left;\n        }\n\n        .plan-detail-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 8px;\n            font-size: 12px;\n        }\n\n        .plan-detail-row:last-child {\n            margin-bottom: 0;\n        }\n\n        .plan-detail-label {\n            color: var(--text-muted);\n        }\n\n        .plan-detail-value {\n            color: var(--text-primary);\n            font-weight: 600;\n        }\n\n        .buy-plan-btn {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 25px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n        }\n\n        .buy-plan-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(230, 30, 133, 0.3);\n        }\n\n        .telegram-info {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 15px;\n            margin-top: 20px;\n            text-align: center;\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        .close-credits-btn {\n            background: rgba(255, 255, 255, 0.1);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            color: var(--text-primary);\n            border-radius: 50px;\n            padding: 12px 30px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n            margin-top: 20px;\n        }\n\n        .close-credits-btn:hover {\n            background: rgba(255, 255, 255, 0.2);\n        }\n\n        /* Loading spinner for plans */\n        .plans-loading {\n            text-align: center;\n            padding: 40px;\n        }\n\n        .spinner {\n            display: inline-block;\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(255, 215, 0, 0.1);\n            border-top: 4px solid #FFD700;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n            margin-bottom: 20px;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        .loading-text {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        /* Error message */\n        .error-message {\n            background: rgba(244, 67, 54, 0.1);\n            border: 2px solid rgba(244, 67, 54, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            text-align: center;\n            color: var(--error);\n            margin: 20px 0;\n        }\n\n        /* Major price info */\n        .major-price-info {\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 20px;\n            margin-bottom: 30px;\n            text-align: center;\n        }\n\n        /* User Data Modal */\n        .user-modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.8);\n            backdrop-filter: blur(10px);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            opacity: 0;\n            visibility: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .user-modal.show {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .modal-content {\n            background: var(--surface);\n            border-radius: 20px;\n            padding: 40px;\n            border: 2px solid var(--color-primary);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n            max-width: 500px;\n            width: 90%;\n            transform: scale(0.9);\n            transition: transform 0.3s ease;\n        }\n\n        .user-modal.show .modal-content {\n            transform: scale(1);\n        }\n\n        .modal-header {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        .modal-avatar {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 32px;\n            font-weight: bold;\n            color: white;\n            margin: 0 auto 20px;\n        }\n\n        .modal-title {\n            font-size: 24px;\n            font-weight: 600;\n            color: var(--color-primary);\n            margin-bottom: 5px;\n        }\n\n        .modal-subtitle {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .modal-stats {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n\n        .modal-stat {\n            text-align: center;\n            padding: 15px;\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n        }\n\n        .modal-stat-value {\n            font-size: 20px;\n            font-weight: bold;\n            color: var(--color-primary);\n            margin-bottom: 5px;\n        }\n\n        .modal-stat-label {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        .modal-info {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n\n        .info-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 10px;\n        }\n\n        .info-row:last-child {\n            margin-bottom: 0;\n        }\n\n        .info-label {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .info-value {\n            color: var(--text-primary);\n            font-weight: 500;\n            font-size: 14px;\n        }\n\n        .close-modal-btn {\n            background: var(--color-primary);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 30px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n        }\n\n        .close-modal-btn:hover {\n            transform: scale(1.05);\n            box-shadow: 0 10px 30px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Video creator section */\n        .video-creator {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.4s both;\n        }\n\n        .section-title {\n            font-size: 24px;\n            font-weight: 600;\n            margin-bottom: 20px;\n            color: var(--color-primary);\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n\n        .section-title::before {\n            content: 'üé¨';\n            font-size: 28px;\n        }\n\n        .video-form {\n            display: grid;\n            gap: 20px;\n        }\n\n        .form-group {\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n        }\n\n        .form-group label {\n            font-weight: 500;\n            color: var(--text-primary);\n        }\n\n        .form-group input,\n        .form-group textarea {\n            background: rgba(0, 0, 0, 0.3);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            border-radius: 10px;\n            padding: 12px 15px;\n            color: var(--text-primary);\n            font-size: 14px;\n            transition: all 0.3s ease;\n        }\n\n        .form-group input:focus,\n        .form-group textarea:focus {\n            outline: none;\n            border-color: var(--color-primary);\n            box-shadow: 0 0 0 3px rgba(230, 30, 133, 0.1);\n        }\n\n        /* Improved select styling */\n        .form-group select {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.1), rgba(255, 64, 129, 0.05));\n            border: 2px solid rgba(230, 30, 133, 0.4);\n            border-radius: 12px;\n            padding: 12px 15px;\n            color: var(--text-primary);\n            font-size: 14px;\n            font-weight: 500;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            appearance: none;\n            background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23E61E85' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\");\n            background-repeat: no-repeat;\n            background-position: right 12px center;\n            background-size: 20px;\n            padding-right: 45px;\n            position: relative;\n        }\n\n        .form-group select:hover {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.15), rgba(255, 64, 129, 0.08));\n            border-color: rgba(230, 30, 133, 0.6);\n            transform: translateY(-1px);\n            box-shadow: 0 4px 12px rgba(230, 30, 133, 0.2);\n        }\n\n        .form-group select:focus {\n            outline: none;\n            border-color: var(--color-primary);\n            box-shadow: 0 0 0 3px rgba(230, 30, 133, 0.2), 0 4px 12px rgba(230, 30, 133, 0.3);\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.2), rgba(255, 64, 129, 0.1));\n        }\n\n        .form-group select option {\n            background: var(--surface);\n            color: var(--text-primary);\n            padding: 10px;\n            border: none;\n            font-weight: 500;\n        }\n\n        .form-group select option:hover {\n            background: rgba(230, 30, 133, 0.2);\n        }\n\n        .form-group textarea {\n            resize: vertical;\n            min-height: 100px;\n        }\n\n        .form-row {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n        }\n\n        .create-btn {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 15px 40px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n            position: relative;\n            overflow: hidden;\n            margin-top: 10px;\n        }\n\n        .create-btn::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 0;\n            height: 0;\n            border-radius: 50%;\n            background: rgba(255, 255, 255, 0.1);\n            transform: translate(-50%, -50%);\n            transition: width 0.6s ease, height 0.6s ease;\n        }\n\n        .create-btn:hover::before {\n            width: 300px;\n            height: 300px;\n        }\n\n        .create-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 30px rgba(230, 30, 133, 0.3);\n        }\n\n        .create-btn:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n            transform: none;\n        }\n\n        .image-upload-area {\n            border: 2px dashed rgba(230, 30, 133, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            text-align: center;\n            cursor: pointer;\n            position: relative;\n            transition: all 0.3s ease;\n        }\n\n        .image-upload-area:hover {\n            border-color: var(--color-primary);\n        }\n\n        .image-upload-input {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            opacity: 0;\n            cursor: pointer;\n        }\n\n        .image-upload-hint {\n            color: var(--text-muted);\n        }\n\n        .image-preview {\n            margin-top: 15px;\n            position: relative;\n            display: inline-block;\n        }\n\n        .preview-img {\n            max-width: 100%;\n            max-height: 150px;\n            border-radius: 10px;\n        }\n\n        .delete-btn {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background: rgba(0, 0, 0, 0.7);\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 25px;\n            height: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        /* Multiple images preview styles */\n        .image-previews-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n            gap: 10px;\n            margin-top: 15px;\n        }\n\n        .image-preview-item {\n            position: relative;\n            border-radius: 10px;\n            overflow: hidden;\n            background: rgba(0, 0, 0, 0.2);\n        }\n\n        .image-preview-item img {\n            width: 100%;\n            height: 120px;\n            object-fit: cover;\n            border-radius: 10px;\n        }\n\n        .image-preview-item .delete-btn {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background: rgba(244, 67, 54, 0.9);\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 25px;\n            height: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n        }\n\n        .image-counter {\n            font-size: 12px;\n            color: var(--text-muted);\n            margin-top: 10px;\n        }\n\n        .image-counter.warning {\n            color: var(--warning);\n        }\n\n        .image-counter.error {\n            color: var(--error);\n        }\n\n        .seed-input-group {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n\n        .seed-input-group input {\n            flex: 1;\n        }\n\n        .refresh-btn {\n            background: rgba(0, 0, 0, 0.3);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            color: var(--text-primary);\n            border-radius: 10px;\n            padding: 10px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .refresh-btn:hover {\n            border-color: var(--color-primary);\n        }\n\n        .form-actions {\n            display: flex;\n            justify-content: flex-end;\n            gap: 15px;\n            margin-top: 20px;\n        }\n\n        .reset-btn {\n            background: rgba(255, 255, 255, 0.1);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            color: var(--text-primary);\n            border-radius: 50px;\n            padding: 15px 40px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .reset-btn:hover {\n            background: rgba(255, 255, 255, 0.2);\n        }\n\n        /* Recent videos */\n        .recent-videos {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            animation: fadeInUp 1s ease 0.6s both;\n        }\n\n        .videos-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n            gap: 20px;\n            margin-top: 20px;\n        }\n\n        .video-card {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 15px;\n            overflow: hidden;\n            transition: transform 0.3s ease;\n            cursor: pointer;\n        }\n\n        .video-card:hover {\n            transform: scale(1.05);\n        }\n\n        .video-thumbnail {\n            width: 100%;\n            height: 120px;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 48px;\n        }\n\n        .video-info {\n            padding: 15px;\n        }\n\n        .video-title {\n            font-weight: 600;\n            margin-bottom: 5px;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n\n        .video-date {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        /* Loading spinner */\n        .spinner {\n            display: none;\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(230, 30, 133, 0.1);\n            border-top: 4px solid var(--color-primary);\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n            margin: 20px auto;\n        }\n\n        .spinner.show {\n            display: block;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        /* Dimensions Preview */\n        .dimensions-preview {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.1), rgba(255, 64, 129, 0.05));\n            border: 2px solid rgba(230, 30, 133, 0.3);\n            border-radius: 12px;\n            padding: 15px 20px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            transition: all 0.3s ease;\n        }\n\n        .dimensions-preview:hover {\n            border-color: rgba(230, 30, 133, 0.5);\n            transform: translateY(-1px);\n            box-shadow: 0 4px 12px rgba(230, 30, 133, 0.15);\n        }\n\n        .dimension-info {\n            font-weight: 600;\n            color: var(--text-primary);\n            font-size: 14px;\n        }\n\n        .dimension-price {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            padding: 6px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            box-shadow: 0 2px 8px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Toast notification */\n        .toast {\n            position: fixed;\n            bottom: 30px;\n            right: 30px;\n            background: var(--surface);\n            padding: 15px 20px;\n            border-radius: 10px;\n            border-left: 4px solid var(--color-primary);\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n            transform: translateX(400px);\n            transition: transform 0.3s ease;\n            z-index: 1000;\n            max-width: 300px;\n        }\n\n        .toast.show {\n            transform: translateX(0);\n        }\n\n        .toast.success {\n            border-left-color: var(--success);\n        }\n\n        .toast.error {\n            border-left-color: var(--error);\n        }\n\n        .toast-title {\n            font-weight: 600;\n            margin-bottom: 5px;\n        }\n\n        .toast-message {\n            font-size: 14px;\n            color: var(--text-muted);\n        }\n\n        /* Responsive */\n        @media (max-width: 768px) {\n            .header {\n                padding: 15px 0;\n            }\n\n            .header-content {\n                flex-direction: row;\n                justify-content: space-between;\n                align-items: center;\n                padding: 0 20px;\n            }\n\n            .logo {\n                width: 60px;\n                height: 60px;\n            }\n\n            .user-info {\n                gap: 10px;\n            }\n\n            .user-details {\n                text-align: left;\n            }\n\n            .user-details h3 {\n                font-size: 18px;\n                margin-bottom: 5px;\n            }\n\n            .user-credits {\n                justify-content: center;\n                font-size: 16px;\n                margin-bottom: 5px;\n            }\n\n            .user-details p {\n                display: none;\n            }\n\n            .form-row {\n                grid-template-columns: 1fr;\n            }\n\n            .stats-grid {\n                grid-template-columns: 1fr;\n            }\n\n            .videos-grid {\n                grid-template-columns: 1fr;\n            }\n\n            .container {\n                padding: 30px 15px;\n            }\n\n            .creator-tabs {\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: center;\n                gap: 8px;\n            }\n\n            .tab-btn {\n                padding: 8px 16px;\n                font-size: 13px;\n            }\n\n            .creator-section {\n                padding: 25px 20px;\n                margin-bottom: 30px;\n            }\n\n            .section-title {\n                font-size: 20px;\n            }\n\n            .create-btn {\n                padding: 12px 24px;\n                font-size: 15px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .header {\n                padding: 15px 0;\n            }\n\n            .header-content {\n                padding: 0 15px;\n            }\n\n            .logo {\n                width: 50px;\n                height: 50px;\n            }\n\n            .user-avatar {\n                width: 40px;\n                height: 40px;\n                font-size: 16px;\n            }\n\n            .user-details h3 {\n                font-size: 14px;\n            }\n\n            .user-credits {\n                font-size: 12px;\n            }\n\n            .user-details p {\n                display: none;\n            }\n\n            .container {\n                padding: 20px 10px;\n            }\n\n            .creator-section {\n                padding: 20px 15px;\n            }\n\n            .section-title {\n                font-size: 18px;\n            }\n\n            .create-btn {\n                padding: 12px 20px;\n                font-size: 14px;\n            }\n\n            .tab-btn {\n                padding: 8px 12px;\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <!-- Loading Screen -->\n    <div class=\"loading-screen\" id=\"loadingScreen\">\n        <div class=\"logo-loader\">\n            <img src=\"https://lh3.googleusercontent.com/d/1wz9VTIXLaeBmCDupXTU_u8hA7N73HBNl=w1000\" alt=\"unimgai\">\n        </div>\n        <div class=\"loading-text\">Loading Dashboard...</div>\n    </div>\n\n    <!-- Particles Background -->\n    <div class=\"particles\" id=\"particles\"></div>\n\n    <!-- Header -->\n    <header class=\"header\">\n        <div class=\"header-content\">\n            <div class=\"logo\">\n                <img src=\"https://lh3.googleusercontent.com/d/1wz9VTIXLaeBmCDupXTU_u8hA7N73HBNl=w1000\" alt=\"unimgai\">\n            </div>\n            <div class=\"user-info\">\n                <button class=\"daily-reward-btn\" id=\"dailyRewardBtn\" onclick=\"openCreditsModal()\">\n                    <span class=\"reward-icon\">üéÅ</span>\n                    <span class=\"reward-text\">Daily Gift</span>\n                </button>\n                <div class=\"user-avatar\" id=\"userAvatar\">U</div>\n                <div class=\"user-details\">\n                    <h3 id=\"userName\">User</h3>\n                    <div class=\"user-credits\" id=\"headerCredits\">150 ‚≠ê</div>\n                    <p id=\"userStatus\">Active</p>\n                </div>\n            </div>\n        </div>\n    </header>\n\n    <!-- Main Container -->\n    <main class=\"container\">\n        <!-- Creator Tabs -->\n\n        <!-- Creator Tabs -->\n        <div class=\"creator-tabs\">\n            <button class=\"tab-btn active\" data-tab=\"video\">üé¨ Create Video</button>\n            <button class=\"tab-btn\" data-tab=\"image\">üñºÔ∏è Create Image</button>\n            <button class=\"tab-btn\" data-tab=\"edit\">‚úèÔ∏è Edit Image</button>\n        </div>\n\n        <!-- Video Creator Section -->\n        <div class=\"creator-section video-creator active\" id=\"video-section\">\n            <h2 class=\"section-title\">Create New Video</h2>\n            <form class=\"video-form\" id=\"videoForm\">\n                <div class=\"form-group\">\n                    <label for=\"videoPrompt\">Prompt</label>\n                    <textarea id=\"videoPrompt\" name=\"videoPrompt\" placeholder=\"Use the reference image as the main subject...\"></textarea>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"videoImage\">Image</label>\n                    <div class=\"image-upload-area\" id=\"imageUploadArea\">\n                        <input type=\"file\" id=\"videoImage\" name=\"videoImage\" accept=\"image/*\" class=\"image-upload-input\">\n                        <div class=\"image-upload-content\">\n                            <span class=\"image-upload-hint\">You can drag and drop a file or click to upload</span>\n                            <div class=\"image-preview\" id=\"imagePreview\" style=\"display: none;\">\n                                <img src=\"\" alt=\"Image Preview\" class=\"preview-img\">\n                                <button type=\"button\" class=\"delete-btn\" id=\"deleteBtn\">&times;</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"createVideoBtn\">\n                        Run $0.3\n                    </button>\n                </div>\n            </form>\n            <div class=\"spinner\" id=\"videoSpinner\"></div>\n        </div>\n\n        <!-- Image Creator Section -->\n        <div class=\"creator-section image-creator\" id=\"image-section\">\n            <h2 class=\"section-title\">Create New Image</h2>\n            <form class=\"image-form\" id=\"imageForm\">\n                <div class=\"form-group\">\n                    <label for=\"imagePrompt\">Image Prompt</label>\n                    <textarea id=\"imagePrompt\" name=\"imagePrompt\" placeholder=\"Describe the image you want to create...\" required></textarea>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"imageAspectRatio\">Aspect Ratio</label>\n                        <select id=\"imageAspectRatio\" name=\"imageAspectRatio\" onchange=\"updateResolutionOptions()\">\n                            <option value=\"1:1\">üì± 1:1 Instagram</option>\n                            <option value=\"9:16\">üì± 9:16 YouTube Shorts</option>\n                            <option value=\"16:9\">üñ•Ô∏è 16:9 YouTube</option>\n                            <option value=\"4:3\">üì∫ 4:3 Classic</option>\n                            <option value=\"3:2\">üì∑ 3:2 Photography</option>\n                            <option value=\"21:9\">üé¨ 21:9 Cinema</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"imageResolution\">Resolution</label>\n                        <select id=\"imageResolution\" name=\"imageResolution\">\n                            <option value=\"1024\">üì± Standard (1MP)</option>\n                            <option value=\"1448\" selected>üñ•Ô∏è High (2MP)</option>\n                            <option value=\"1920\">üíé HD (2K)</option>\n                            <option value=\"4096\">‚ú® Ultra HD (4K)</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"imageQuality\">Quality</label>\n                        <select id=\"imageQuality\" name=\"imageQuality\">\n                            <option value=\"standard\">Standard</option>\n                            <option value=\"high\" selected>High Quality</option>\n                            <option value=\"ultra\">Ultra HD</option>\n                            <option value=\"premium\">Premium 4K</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"imageStyle\">Style</label>\n                        <select id=\"imageStyle\" name=\"imageStyle\">\n                            <option value=\"general\">General</option>\n                            <option value=\"photorealistic\">Photorealistic</option>\n                            <option value=\"artistic\">Artistic</option>\n                            <option value=\"anime\">Anime</option>\n                            <option value=\"3d\">3D Render</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"imageDimensions\">Dimensions Preview</label>\n                    <div class=\"dimensions-preview\" id=\"dimensionsPreview\">\n                        <span class=\"dimension-info\">1448 √ó 1448 pixels (2.1MP)</span>\n                        <span class=\"dimension-price\">Cost: $0.027</span>\n                    </div>\n                </div>\n                \n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"createImageBtn\">\n                        Run $0.1\n                    </button>\n                </div>\n            </form>\n            \n            <div class=\"spinner\" id=\"imageSpinner\"></div>\n        </div>\n\n        <!-- Image Editor Section -->\n        <div class=\"creator-section image-editor\" id=\"edit-section\">\n            <h2 class=\"section-title\">Edit Image</h2>\n            <form class=\"edit-form\" id=\"editForm\">\n                <div class=\"form-group\">\n                    <label for=\"editPrompt\">Edit Instructions</label>\n                    <textarea id=\"editPrompt\" name=\"editPrompt\" placeholder=\"Describe how you want to edit the images...\" required></textarea>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"editImages\">Upload Images (Up to 10)</label>\n                    <div class=\"image-upload-area\" id=\"editImageUploadArea\">\n                        <input type=\"file\" id=\"editImages\" name=\"editImages\" accept=\"image/*\" multiple class=\"image-upload-input\">\n                        <div class=\"image-upload-content\">\n                            <span class=\"image-upload-hint\">You can drag and drop files or click to upload (Maximum 10 images)</span>\n                            <div class=\"image-previews-container\" id=\"editImagePreviews\" style=\"display: none;\">\n                                <div class=\"image-preview\" id=\"editImagePreview\" style=\"display: none;\">\n                                    <img src=\"\" alt=\"Image Preview\" class=\"preview-img\">\n                                    <button type=\"button\" class=\"delete-btn\" id=\"editDeleteBtn\">&times;</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"image-counter\" id=\"imageCounter\" style=\"margin-top: 10px; color: var(--text-muted); font-size: 12px;\">\n                        0 / 10 images uploaded\n                    </div>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"editAspectRatio\">Aspect Ratio</label>\n                        <select id=\"editAspectRatio\" name=\"editAspectRatio\" onchange=\"updateEditResolutionOptions()\">\n                            <option value=\"1:1\">üì± 1:1 Instagram</option>\n                            <option value=\"9:16\">üì± 9:16 YouTube Shorts</option>\n                            <option value=\"16:9\">üñ•Ô∏è 16:9 YouTube</option>\n                            <option value=\"4:3\">üì∫ 4:3 Classic</option>\n                            <option value=\"3:2\">üì∑ 3:2 Photography</option>\n                            <option value=\"21:9\">üé¨ 21:9 Cinema</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"editResolution\">Resolution</label>\n                        <select id=\"editResolution\" name=\"editResolution\">\n                            <option value=\"1024\">üì± Standard (1MP)</option>\n                            <option value=\"1448\" selected>üñ•Ô∏è High (2MP)</option>\n                            <option value=\"1920\">üíé HD (2K)</option>\n                            <option value=\"4096\">‚ú® Ultra HD (4K)</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"editQuality\">Quality</label>\n                        <select id=\"editQuality\" name=\"editQuality\">\n                            <option value=\"standard\">Standard</option>\n                            <option value=\"high\" selected>High Quality</option>\n                            <option value=\"ultra\">Ultra HD</option>\n                            <option value=\"premium\">Premium 4K</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"editStyle\">Style</label>\n                        <select id=\"editStyle\" name=\"editStyle\">\n                            <option value=\"general\">General</option>\n                            <option value=\"photorealistic\">Photorealistic</option>\n                            <option value=\"artistic\">Artistic</option>\n                            <option value=\"anime\">Anime</option>\n                            <option value=\"3d\">3D Render</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"editDimensions\">Dimensions Preview</label>\n                    <div class=\"dimensions-preview\" id=\"editDimensionsPreview\">\n                        <span class=\"dimension-info\">1448 √ó 1448 pixels (2.1MP)</span>\n                        <span class=\"dimension-price\">Cost: $0.027</span>\n                    </div>\n                </div>\n                \n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"editImageBtn\">\n                        Run $0.1\n                    </button>\n                </div>\n            </form>\n            \n            <div class=\"spinner\" id=\"editSpinner\"></div>\n        </div>\n\n    </main>\n\n    <!-- Credits Plans Modal -->\n    <div class=\"credits-modal\" id=\"creditsModal\">\n        <div class=\"credits-modal-content\">\n            <div class=\"credits-modal-header\">\n                <h2 class=\"credits-modal-title\">\n                    <img src=\"https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000\" style=\"width: 32px; height: 32px; vertical-align: middle;\" alt=\"unimgai Stars\">\n                    <span>unimgai Stars Plans</span>\n                </h2>\n                <p class=\"credits-modal-subtitle\">Get more unimgai stars to create amazing content</p>\n            </div>\n            \n            <!-- Daily Reward Section -->\n            <div class=\"daily-reward-section\">\n                <h3 class=\"daily-reward-title\">üéÅ Daily Reward</h3>\n                <button class=\"claim-reward-btn\" id=\"claimRewardBtn\" onclick=\"claimDailyReward()\">\n                    Claim 5 Free unimgai Stars\n                </button>\n                <div class=\"reward-status\" id=\"rewardStatus\">\n                    Claim your daily bonus of 5 unimgai stars!\n                </div>\n            </div>\n            \n            <!-- Credits Plans -->\n            <div class=\"credits-plans\">\n                <h3 class=\"plans-title\">Choose Your Plan</h3>\n                \n                <!-- Loading State -->\n                <div class=\"plans-loading\" id=\"plansLoading\">\n                    <div class=\"spinner\"></div>\n                    <div class=\"loading-text\">Loading available plans...</div>\n                </div>\n                \n                <!-- Plans Container -->\n                <div class=\"plans-grid\" id=\"plansGrid\" style=\"display: none;\">\n                    <!-- Plans will be dynamically inserted here -->\n                </div>\n                \n                <!-- Error Message -->\n                <div class=\"error-message\" id=\"errorMessage\" style=\"display: none;\">\n                    <p>‚ùå Unable to load plans</p>\n                    <p>Please try again later</p>\n                    <button onclick=\"loadMajorPlans()\" style=\"background: var(--color-primary); color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-top: 10px;\">\n                        Retry\n                    </button>\n                </div>\n            </div>\n            \n            <button class=\"close-credits-btn\" onclick=\"closeCreditsModal()\">Close</button>\n        </div>\n    </div>\n\n    <!-- User Data Modal -->\n    <div class=\"user-modal\" id=\"userModal\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <div class=\"modal-avatar\" id=\"modalAvatar\">U</div>\n                <h2 class=\"modal-title\" id=\"modalTitle\">User Name</h2>\n                <p class=\"modal-subtitle\">Premium Member</p>\n            </div>\n            \n            <div class=\"modal-stats\">\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalGemBalance\">20</div>\n                    <div class=\"modal-stat-label\">Gem Balance</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalGemsEarned\">0</div>\n                    <div class=\"modal-stat-label\">Gems Earned</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalGemsPurchased\">0</div>\n                    <div class=\"modal-stat-label\">Gems Purchased</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalGemsSpent\">0</div>\n                    <div class=\"modal-stat-label\">Gems Spent</div>\n                </div>\n            </div>\n            \n            <div class=\"modal-info\">\n                <!-- Info rows removed as requested -->\n            </div>\n            \n            <button class=\"close-modal-btn\" onclick=\"closeUserModal()\">Close</button>\n        </div>\n    </div>\n\n    <!-- Toast Notification -->\n    <div class=\"toast\" id=\"toast\">\n        <div class=\"toast-title\" id=\"toastTitle\">Notification</div>\n        <div class=\"toast-message\" id=\"toastMessage\">Message</div>\n    </div>\n\n    <script>\n        // Get URL parameters\n        function getUrlParams() {\n            const params = new URLSearchParams(window.location.search);\n            return {\n                lang: params.get('lang') || 'en',\n                username: params.get('username') || 'User',\n                user_id: params.get('user_id') || 'User'\n            };\n        }\n\n        // Initialize page\n        let currentLang = 'en';\n        let currentUsername = 'User';\n        let currentUserId = 'User';\n\n        async function initializePage() {\n            const params = getUrlParams();\n            currentLang = params.lang || 'en';\n            currentUsername = params.username || 'User';\n            currentUserId = params.user_id || 'User';\n            \n            // Create particles\n            createParticles();\n            \n            // Load user data (including credits from webhook)\n            await loadUserData();\n            \n            \n            // Setup tabs\n            setupTabs();\n            \n            // Setup forms\n            setupForms();\n            \n            // Setup user avatar click\n            setupUserAvatar();\n            \n            // Hide loading screen after data is loaded\n            setTimeout(() => {\n                document.getElementById('loadingScreen').classList.add('hidden');\n            }, 500);\n        }\n\n        // Create background diffused lights\n        function createParticles() {\n            const particlesContainer = document.getElementById('particles');\n            const lightColors = [\n                'rgba(230, 30, 133, 0.3)',\n                'rgba(255, 64, 129, 0.25)',\n                'rgba(156, 39, 176, 0.2)',\n                'rgba(103, 58, 183, 0.15)',\n                'rgba(63, 81, 181, 0.2)'\n            ];\n            \n            const sizeClasses = ['small', 'medium', 'large'];\n            \n            for (let i = 0; i < 8; i++) {\n                const light = document.createElement('div');\n                const sizeClass = sizeClasses[Math.floor(Math.random() * sizeClasses.length)];\n                light.className = `diffused-light ${sizeClass}`;\n                light.style.background = `radial-gradient(circle, ${lightColors[i % lightColors.length]}, transparent)`;\n                light.style.left = Math.random() * 100 + '%';\n                light.style.top = Math.random() * 100 + '%';\n                light.style.animationDelay = Math.random() * 20 + 's';\n                light.style.animationDuration = (20 + Math.random() * 10) + 's';\n                particlesContainer.appendChild(light);\n            }\n        }\n\n        // Load user data\n        async function loadUserData() {\n            // Update user info\n            document.getElementById('userName').textContent = currentUsername;\n            document.getElementById('userAvatar').textContent = currentUsername.charAt(0).toUpperCase();\n            \n            // Fetch credits from webhook\n            await fetchUserCredits();\n        }\n        \n        // Fetch user credits from webhook\n        async function fetchUserCredits() {\n            const CREDITS_API_URL = 'https://unimgai-n8n.nmvnem.easypanel.host/webhook/credits';\n            \n            try {\n                console.log('Fetching credits for user:', currentUserId, currentUsername);\n                \n                const response = await fetch(CREDITS_API_URL, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        id: currentUserId,\n                        usuario: currentUsername\n                    })\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                console.log('Credits data received:', data);\n                \n                // Update credits display with the received data\n                // El webhook devuelve un array con un objeto que contiene todas las estad√≠sticas\n                let gemData = {};\n                if (Array.isArray(data) && data.length > 0) {\n                    gemData = data[0];\n                } else {\n                    gemData = data;\n                }\n                \n                // Extract all gem statistics\n                const credits = gemData.gem_balance || gemData.total_loaded || 0;\n                const gemsEarned = gemData.total_gems_earned || 0;\n                const gemsPurchased = gemData.total_gems_purchased || 0;\n                const gemsSpent = gemData.total_gems_spent || 0;\n                \n                // Update all displays\n                updateCreditsDisplay(credits, gemsEarned, gemsPurchased, gemsSpent);\n                \n            } catch (error) {\n                console.error('Error fetching credits:', error);\n                // Fallback to default credits if webhook fails\n                const fallbackCredits = 150;\n                updateCreditsDisplay(fallbackCredits);\n                showToast('error', 'Error de Cr√©ditos', 'No se pudieron cargar los cr√©ditos. Usando valor por defecto.');\n            }\n        }\n\n        // Update credits display in both header and modal\n        function updateCreditsDisplay(credits, gemsEarned = 0, gemsPurchased = 0, gemsSpent = 0) {\n            // Update header\n            const headerCreditsElement = document.getElementById('headerCredits');\n            headerCreditsElement.innerHTML = `<span class=\"credits-star\"></span> ${credits}`;\n            \n            // Update modal with all gem statistics\n            document.getElementById('modalGemBalance').textContent = credits;\n            document.getElementById('modalGemsEarned').textContent = gemsEarned;\n            document.getElementById('modalGemsPurchased').textContent = gemsPurchased;\n            document.getElementById('modalGemsSpent').textContent = gemsSpent;\n        }\n\n        // CREDITS PLANS INTEGRATION\n        const CREDITS_WEBHOOK_URL = 'https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/dad5726f-ef25-4976-8780-c2e892a37b9e';\n        \n        // Datos de respaldo en caso de que el webhook no est√© disponible\n        // Estos datos est√°n sincronizados con el webhook actual\n        const FALLBACK_PLANS_DATA = [\n            {\n                plan_name: \"Plan B√°sico\",\n                plan_price_usd: 5,\n                credits_received: 500,\n                generation_costs: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                max_images_possible: 10000,\n                max_videos_possible: 1000,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"500 cr√©ditos √∑ 0.05 = 10000 im√°genes\",\n                    videos_calculation: \"500 cr√©ditos √∑ 0.5 = 1000 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Est√°ndar\",\n                plan_price_usd: 15,\n                credits_received: 1500,\n                generation_costs: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                max_images_possible: 30000,\n                max_videos_possible: 3000,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"1500 cr√©ditos √∑ 0.05 = 30000 im√°genes\",\n                    videos_calculation: \"1500 cr√©ditos √∑ 0.5 = 3000 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Premium\",\n                plan_price_usd: 25,\n                credits_received: 2500,\n                generation_costs: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                max_images_possible: 50000,\n                max_videos_possible: 5000,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"2500 cr√©ditos √∑ 0.05 = 50000 im√°genes\",\n                    videos_calculation: \"2500 cr√©ditos √∑ 0.5 = 5000 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Pro\",\n                plan_price_usd: 30,\n                credits_received: 3000,\n                generation_costs: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                max_images_possible: 60000,\n                max_videos_possible: 6000,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"3000 cr√©ditos √∑ 0.05 = 60000 im√°genes\",\n                    videos_calculation: \"3000 cr√©ditos √∑ 0.5 = 6000 videos\"\n                }\n            }\n        ];\n        \n        // Load Credits plans from webhook\n        async function loadCreditsPlans() {\n            const plansLoading = document.getElementById('plansLoading');\n            const plansGrid = document.getElementById('plansGrid');\n            const errorMessage = document.getElementById('errorMessage');\n            \n            // Show loading state\n            if (plansLoading) plansLoading.style.display = 'block';\n            if (plansGrid) plansGrid.style.display = 'none';\n            if (errorMessage) errorMessage.style.display = 'none';\n            \n            console.log('üîó Intentando cargar planes desde webhook:', CREDITS_WEBHOOK_URL);\n            \n            try {\n                // Intentar llamada GET al webhook con timeout\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 segundos timeout\n                \n                const response = await fetch(CREDITS_WEBHOOK_URL, {\n                    method: 'GET',\n                    signal: controller.signal,\n                    headers: {\n                        'Accept': 'application/json'\n                    }\n                });\n                \n                clearTimeout(timeoutId);\n                \n                console.log('üì° Respuesta del webhook - Status:', response.status);\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                console.log('‚úÖ Datos recibidos del webhook:', data);\n                \n                // El webhook puede devolver: array directo, objeto con 'plans', o array con objeto que tiene 'plans'\n                let plansArray = null;\n                \n                if (Array.isArray(data)) {\n                    // Si data es un array\n                    if (data.length > 0 && data[0].plans && Array.isArray(data[0].plans)) {\n                        // Array que contiene objeto con propiedad 'plans': [{ plans: [...] }]\n                        plansArray = data[0].plans;\n                    } else {\n                        // Array directo de planes: [plan1, plan2, ...]\n                        plansArray = data;\n                    }\n                } else if (data && data.plans && Array.isArray(data.plans)) {\n                    // Objeto con propiedad 'plans': { plans: [...] }\n                    plansArray = data.plans;\n                }\n                \n                if (plansArray && plansArray.length > 0) {\n                    console.log('‚úÖ Planes cargados exitosamente:', plansArray.length, 'planes');\n                    displayCreditsPlans(plansArray);\n                    return;\n                } else {\n                    throw new Error('Estructura de datos inv√°lida');\n                }\n                \n            } catch (error) {\n                console.warn('‚ö†Ô∏è No se pudo cargar desde el webhook:', error.message);\n                console.log('üì¶ Usando datos de respaldo locales');\n                \n                // Usar datos de respaldo\n                setTimeout(() => {\n                    displayCreditsPlans(FALLBACK_PLANS_DATA);\n                }, 500);\n            }\n        }\n        \n        // Display Credits plans in the modal\n        function displayCreditsPlans(plans) {\n            console.log('üéØ displayCreditsPlans llamada con', plans.length, 'planes');\n            \n            const plansLoading = document.getElementById('plansLoading');\n            const plansGrid = document.getElementById('plansGrid');\n            const errorMessage = document.getElementById('errorMessage');\n            \n            console.log('üìç Elementos encontrados:', {\n                plansLoading: !!plansLoading,\n                plansGrid: !!plansGrid,\n                errorMessage: !!errorMessage\n            });\n            \n            // Hide loading, show container\n            if (plansLoading) plansLoading.style.display = 'none';\n            if (plansGrid) {\n                plansGrid.style.display = 'grid';\n                console.log('‚úÖ plansGrid mostrado');\n            }\n            if (errorMessage) errorMessage.style.display = 'none';\n            \n            // Clear existing plans\n            if (plansGrid) {\n                plansGrid.innerHTML = '';\n            }\n            \n            // Create plan cards\n            plans.forEach((plan, index) => {\n                const planCard = createCreditsPlanCard(plan, index);\n                if (plansGrid) {\n                    plansGrid.appendChild(planCard);\n                    console.log(`‚úÖ Plan ${index + 1} agregado:`, plan.plan_name);\n                }\n            });\n            \n            console.log('‚úÖ displayCreditsPlans completado');\n        }\n        \n        // Create Credits plan card element\n        function createCreditsPlanCard(plan, index) {\n            const planCard = document.createElement('div');\n            planCard.className = 'plan-card';\n            \n            // Add popular badge to second plan (index 1)\n            if (index === 1) {\n                planCard.classList.add('popular');\n            }\n            \n            const starIcon = '<img src=\"https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000\" style=\"width: 20px; height: 20px; vertical-align: middle;\" alt=\"Credits\">';\n            \n            planCard.innerHTML = `\n                ${index === 1 ? '<div class=\"popular-badge\">POPULAR</div>' : ''}\n                <div style=\"font-size: 18px; font-weight: 600; color: var(--color-primary); margin-bottom: 10px; text-align: center;\">\n                    ${plan.plan_name}\n                </div>\n                <div class=\"plan-credits\">${plan.credits_received} ${starIcon}</div>\n                <div class=\"plan-price\">$${plan.plan_price_usd.toFixed(2)}</div>\n                <div class=\"plan-description\">\n                    ${plan.max_images_possible.toLocaleString()} images or ${plan.max_videos_possible.toLocaleString()} videos\n                </div>\n                <div class=\"plan-details\">\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Credits:</span>\n                        <span class=\"plan-detail-value\">${plan.credits_received} ${starIcon}</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Price:</span>\n                        <span class=\"plan-detail-value\">$${plan.plan_price_usd.toFixed(2)} USD</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Cost per Image:</span>\n                        <span class=\"plan-detail-value\">${plan.generation_costs.image} credits</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Cost per Video:</span>\n                        <span class=\"plan-detail-value\">${plan.generation_costs.video} credits</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Max Images:</span>\n                        <span class=\"plan-detail-value\">${plan.max_images_possible.toLocaleString()}</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Max Videos:</span>\n                        <span class=\"plan-detail-value\">${plan.max_videos_possible.toLocaleString()}</span>\n                    </div>\n                </div>\n                <div class=\"calculations-details\">\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 5px;\">\n                        <strong>Calculations:</strong>\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 3px;\">\n                        1 USD = ${plan.calculations.credits_per_dollar} cr√©ditos\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 3px;\">\n                        ${plan.calculations.images_calculation}\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted);\">\n                        ${plan.calculations.videos_calculation}\n                    </div>\n                </div>\n                <button class=\"buy-plan-btn\" onclick=\"buyPlan('${plan.plan_name}', ${plan.plan_price_usd})\">\n                    Buy Plan\n                </button>\n            `;\n            \n            return planCard;\n        }\n        \n        // NOWPayments configuration\n        const NOWPAYMENTS_CONFIG = {\n            // Tu API key de NOWPayments (obtener en: https://account.nowpayments.io/settings/api-keys)\n            apiKey: 'BWBTGMS-G57MP1C-HWT45E9-VK6CDWS',\n            // Sandbox mode para testing (cambiar a false en producci√≥n)\n            sandbox: false,\n            // URL base de la API\n            apiUrl: 'https://api.nowpayments.io/v1',\n            sandboxApiUrl: 'https://api-sandbox.nowpayments.io/v1'\n        };\n        \n        // Get API URL based on mode\n        function getNOWPaymentsApiUrl() {\n            return NOWPAYMENTS_CONFIG.sandbox ? NOWPAYMENTS_CONFIG.sandboxApiUrl : NOWPAYMENTS_CONFIG.apiUrl;\n        }\n        \n        // Buy plan function with NOWPayments integration\n        function buyPlan(planName, priceUSD) {\n            console.log(`Comprando plan: ${planName} por $${priceUSD} USD`);\n            \n            // Mostrar modal de selecci√≥n de criptomoneda\n            showCryptoSelectionModal(planName, priceUSD);\n        }\n        \n        // Show cryptocurrency selection modal\n        function showCryptoSelectionModal(planName, priceUSD) {\n            const modal = document.createElement('div');\n            modal.className = 'crypto-selection-modal';\n            modal.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.9);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 10000;\n                animation: fadeIn 0.3s ease;\n            `;\n            \n            const popularCryptos = [\n                { code: 'btc', name: 'Bitcoin', icon: '‚Çø' },\n                { code: 'eth', name: 'Ethereum', icon: 'Œû' },\n                { code: 'usdttrc20', name: 'USDT (TRC20)', icon: '‚ÇÆ' },\n                { code: 'usdterc20', name: 'USDT (ERC20)', icon: '‚ÇÆ' },\n                { code: 'ltc', name: 'Litecoin', icon: '≈Å' },\n                { code: 'trx', name: 'Tron', icon: 'T' },\n                { code: 'bnbbsc', name: 'BNB (BSC)', icon: 'B' },\n                { code: 'sol', name: 'Solana', icon: 'S' }\n            ];\n            \n            modal.innerHTML = `\n                <div style=\"\n                    background: var(--surface);\n                    border-radius: 20px;\n                    padding: 40px;\n                    max-width: 600px;\n                    width: 90%;\n                    max-height: 80vh;\n                    overflow-y: auto;\n                    border: 2px solid var(--color-primary);\n                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n                \">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\n                        <h2 style=\"color: var(--color-primary); margin: 0;\">\n                            Select Payment Method\n                        </h2>\n                        <button onclick=\"this.closest('.crypto-selection-modal').remove()\" style=\"\n                            background: none;\n                            border: none;\n                            color: var(--text-primary);\n                            font-size: 28px;\n                            cursor: pointer;\n                            padding: 0;\n                            width: 30px;\n                            height: 30px;\n                            line-height: 1;\n                        \">&times;</button>\n                    </div>\n                    \n                    <div style=\"background: rgba(230, 30, 133, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 30px;\">\n                        <p style=\"margin: 0; text-align: center;\">\n                            <strong style=\"color: var(--color-primary);\">${planName}</strong>\n                            <br>\n                            <span style=\"font-size: 24px; color: var(--text-primary); font-weight: bold;\">$${priceUSD.toFixed(2)} USD</span>\n                        </p>\n                    </div>\n                    \n                    <h3 style=\"color: var(--text-primary); margin-bottom: 15px; font-size: 16px;\">\n                        Popular Cryptocurrencies\n                    </h3>\n                    \n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); gap: 10px; margin-bottom: 20px;\">\n                        ${popularCryptos.map(crypto => `\n                            <button onclick=\"createNOWPayment('${planName}', ${priceUSD}, '${crypto.code}')\" style=\"\n                                background: rgba(230, 30, 133, 0.1);\n                                border: 2px solid rgba(230, 30, 133, 0.3);\n                                border-radius: 10px;\n                                padding: 15px 10px;\n                                cursor: pointer;\n                                transition: all 0.3s ease;\n                                color: var(--text-primary);\n                            \" onmouseover=\"this.style.background='rgba(230, 30, 133, 0.2)'; this.style.borderColor='var(--color-primary)'\" \n                               onmouseout=\"this.style.background='rgba(230, 30, 133, 0.1)'; this.style.borderColor='rgba(230, 30, 133, 0.3)'\">\n                                <div style=\"font-size: 24px; margin-bottom: 5px;\">${crypto.icon}</div>\n                                <div style=\"font-size: 12px; font-weight: 600;\">${crypto.name}</div>\n                            </button>\n                        `).join('')}\n                    </div>\n                    \n                    <p style=\"text-align: center; color: var(--text-muted); font-size: 12px; margin-top: 20px;\">\n                        Powered by <strong style=\"color: var(--color-primary);\">NOWPayments</strong> - 300+ cryptocurrencies supported\n                    </p>\n                </div>\n            `;\n            \n            document.body.appendChild(modal);\n        }\n        \n        // Create NOWPayments invoice\n        async function createNOWPayment(planName, priceUSD, payCurrency) {\n            try {\n                // Cerrar modal de selecci√≥n\n                const selectionModal = document.querySelector('.crypto-selection-modal');\n                if (selectionModal) selectionModal.remove();\n                \n                // Mostrar loading\n                showToast('info', 'Processing', 'Creating payment...');\n                \n                const apiUrl = getNOWPaymentsApiUrl();\n                \n                // Crear invoice usando la API de NOWPayments\n                // Si no especificamos pay_currency, el usuario puede elegir en la invoice_url\n                const invoiceData = {\n                    price_amount: priceUSD,\n                    price_currency: 'usd',\n                    order_id: `${planName.replace(/\\s+/g, '-')}-${Date.now()}`,\n                    order_description: `Purchase of ${planName} - ${priceUSD} USD`,\n                    ipn_callback_url: window.location.origin + '/api/nowpayments-callback',\n                    success_url: window.location.href + '?payment=success',\n                    cancel_url: window.location.href + '?payment=cancelled'\n                };\n                \n                // Si el usuario seleccion√≥ una crypto espec√≠fica, la incluimos\n                if (payCurrency) {\n                    invoiceData.pay_currency = payCurrency;\n                }\n                \n                console.log('Creating invoice with data:', invoiceData);\n                \n                const response = await fetch(`${apiUrl}/invoice`, {\n                    method: 'POST',\n                    headers: {\n                        'x-api-key': NOWPAYMENTS_CONFIG.apiKey,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(invoiceData)\n                });\n                \n                if (!response.ok) {\n                    const errorData = await response.json();\n                    console.error('Invoice creation failed:', errorData);\n                    throw new Error(errorData.message || 'Failed to create invoice');\n                }\n                \n                const invoice = await response.json();\n                console.log('Invoice created successfully:', invoice);\n                \n                // Abrir el modal de pago de NOWPayments\n                openNOWPaymentsModal(invoice, planName, priceUSD);\n                \n            } catch (error) {\n                console.error('Error creating invoice:', error);\n                showToast('error', 'Error', error.message || 'Failed to create payment. Please try again.');\n            }\n        }\n        \n        // Open NOWPayments invoice modal\n        function openNOWPaymentsModal(invoice, planName, priceUSD) {\n            const modal = document.createElement('div');\n            modal.className = 'nowpayments-modal';\n            modal.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.95);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 10001;\n                animation: fadeIn 0.3s ease;\n                padding: 20px;\n                overflow-y: auto;\n            `;\n            \n            // Para invoices, usamos invoice_url directamente\n            const invoiceUrl = invoice.invoice_url;\n            const invoiceId = invoice.id;\n            \n            modal.innerHTML = `\n                <div style=\"\n                    background: var(--surface);\n                    border-radius: 20px;\n                    padding: 30px;\n                    max-width: 600px;\n                    width: 100%;\n                    border: 2px solid var(--color-primary);\n                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n                \">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\n                        <div>\n                            <h2 style=\"color: var(--color-primary); margin: 0 0 5px 0;\">\n                                üí≥ Complete Your Payment\n                            </h2>\n                            <p style=\"margin: 0; color: var(--text-muted); font-size: 14px;\">\n                                ${planName}\n                            </p>\n                        </div>\n                        <button onclick=\"this.closest('.nowpayments-modal').remove()\" style=\"\n                            background: none;\n                            border: none;\n                            color: var(--text-primary);\n                            font-size: 28px;\n                            cursor: pointer;\n                            padding: 0;\n                            width: 30px;\n                            height: 30px;\n                            line-height: 1;\n                        \">&times;</button>\n                    </div>\n                    \n                    <!-- NOWPayments Trust Badge -->\n                    <div style=\"background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.05)); padding: 12px 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(76, 175, 80, 0.3); display: flex; align-items: center; gap: 10px;\">\n                        <div style=\"font-size: 24px;\">üîí</div>\n                        <div style=\"flex: 1;\">\n                            <p style=\"margin: 0; color: var(--text-primary); font-size: 13px; font-weight: 600;\">\n                                Secure Payment via NOWPayments\n                            </p>\n                            <p style=\"margin: 0; color: var(--text-muted); font-size: 11px; line-height: 1.4;\">\n                                Your payment is processed by NOWPayments, a trusted third-party payment processor. We never handle your funds directly.\n                            </p>\n                        </div>\n                    </div>\n                    \n                    <!-- Payment Info -->\n                    <div style=\"background: rgba(230, 30, 133, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(230, 30, 133, 0.3); text-align: center;\">\n                        <p style=\"margin: 0 0 10px 0; color: var(--text-muted); font-size: 14px;\">Amount to Pay</p>\n                        <p style=\"margin: 0; font-size: 28px; font-weight: bold; color: var(--color-primary);\">$${priceUSD.toFixed(2)} USD</p>\n                        <p style=\"margin: 10px 0 0 0; color: var(--text-muted); font-size: 12px;\">\n                            You'll be able to select your preferred cryptocurrency on the next page\n                        </p>\n                    </div>\n                    \n                    <!-- Invoice iframe -->\n                    <div style=\"margin-bottom: 20px;\">\n                        <iframe \n                            src=\"${invoiceUrl}\" \n                            style=\"\n                                width: 100%;\n                                height: 600px;\n                                border: none;\n                                border-radius: 10px;\n                                background: white;\n                            \"\n                            allow=\"payment\"\n                        ></iframe>\n                    </div>\n                    \n                    <p style=\"text-align: center; color: var(--text-muted); font-size: 11px; margin-top: 20px; line-height: 1.5;\">\n                        Invoice ID: <code style=\"background: rgba(230, 30, 133, 0.1); padding: 2px 6px; border-radius: 4px;\">${invoiceId}</code>\n                        <br>\n                        Powered by <strong style=\"color: var(--color-primary);\">NOWPayments</strong>\n                    </p>\n                </div>\n            `;\n            \n            document.body.appendChild(modal);\n            showToast('success', 'Payment Created', 'Please complete the payment using the information provided');\n        }\n        \n        // Toggle payment iframe visibility\n        function togglePaymentIframe(paymentId) {\n            const container = document.getElementById(`payment-iframe-container-${paymentId}`);\n            const button = document.getElementById(`toggle-iframe-btn-${paymentId}`);\n            \n            if (container.style.display === 'none') {\n                container.style.display = 'block';\n                button.innerHTML = 'üîº Hide NOWPayments Interface';\n                // Scroll to iframe\n                container.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n            } else {\n                container.style.display = 'none';\n                button.innerHTML = 'üîó Show NOWPayments Interface';\n            }\n        }\n        \n        // Copy to clipboard helper\n        function copyToClipboard(text, button) {\n            navigator.clipboard.writeText(text).then(() => {\n                const originalText = button.innerHTML;\n                button.innerHTML = '‚úÖ Copied!';\n                button.style.background = '#4CAF50';\n                setTimeout(() => {\n                    button.innerHTML = originalText;\n                    button.style.background = 'var(--color-primary)';\n                }, 2000);\n                showToast('success', 'Copied', 'Address copied to clipboard');\n            }).catch(err => {\n                console.error('Failed to copy:', err);\n                showToast('error', 'Error', 'Failed to copy address');\n            });\n        }\n        \n        // Check payment status\n        async function checkPaymentStatus(paymentId) {\n            try {\n                showToast('info', 'Checking', 'Checking payment status...');\n                \n                const apiUrl = getNOWPaymentsApiUrl();\n                const response = await fetch(`${apiUrl}/payment/${paymentId}`, {\n                    method: 'GET',\n                    headers: {\n                        'x-api-key': NOWPAYMENTS_CONFIG.apiKey\n                    }\n                });\n                \n                if (!response.ok) {\n                    throw new Error('Failed to check payment status');\n                }\n                \n                const status = await response.json();\n                console.log('Payment status:', status);\n                \n                const statusMessages = {\n                    'waiting': 'Waiting for payment',\n                    'confirming': 'Payment received, confirming...',\n                    'confirmed': 'Payment confirmed',\n                    'sending': 'Sending to your wallet...',\n                    'finished': 'Payment completed successfully!',\n                    'failed': 'Payment failed',\n                    'refunded': 'Payment refunded',\n                    'expired': 'Payment expired'\n                };\n                \n                const message = statusMessages[status.payment_status] || status.payment_status;\n                const type = ['finished', 'confirmed'].includes(status.payment_status) ? 'success' : \n                            ['failed', 'refunded', 'expired'].includes(status.payment_status) ? 'error' : 'info';\n                \n                showToast(type, 'Payment Status', message);\n                \n                if (status.payment_status === 'finished') {\n                    // Cerrar modal y actualizar cr√©ditos\n                    const modal = document.querySelector('.nowpayments-modal');\n                    if (modal) modal.remove();\n                    // Aqu√≠ puedes agregar l√≥gica para actualizar los cr√©ditos del usuario\n                }\n                \n            } catch (error) {\n                console.error('Error checking payment status:', error);\n                showToast('error', 'Error', 'Failed to check payment status');\n            }\n        }\n        \n        // Check for payment success/cancel in URL\n        window.addEventListener('DOMContentLoaded', () => {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get('payment') === 'success') {\n                showToast('success', 'Payment Successful', 'Your payment has been completed successfully!');\n                // Limpiar URL\n                window.history.replaceState({}, document.title, window.location.pathname);\n            } else if (urlParams.get('payment') === 'cancelled') {\n                showToast('warning', 'Payment Cancelled', 'Your payment was cancelled');\n                // Limpiar URL\n                window.history.replaceState({}, document.title, window.location.pathname);\n            }\n        });\n\n        // Setup tabs functionality\n        function setupTabs() {\n            const tabButtons = document.querySelectorAll('.tab-btn');\n            const sections = document.querySelectorAll('.creator-section');\n            \n            tabButtons.forEach(button => {\n                button.addEventListener('click', () => {\n                    const targetTab = button.getAttribute('data-tab');\n                    \n                    // Remove active class from all buttons and sections\n                    tabButtons.forEach(btn => btn.classList.remove('active'));\n                    sections.forEach(section => section.classList.remove('active'));\n                    \n                    // Add active class to clicked button and corresponding section\n                    button.classList.add('active');\n                    document.getElementById(`${targetTab}-section`).classList.add('active');\n                });\n            });\n        }\n\n        // Setup forms functionality\n        function setupForms() {\n            // Video form\n            const videoForm = document.getElementById('videoForm');\n            videoForm.addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                const formData = new FormData(this);\n                const videoData = {\n                    type: 'video',\n                    prompt: formData.get('videoPrompt'),\n                    image: videoImageInput.dataset.base64 || null,\n                    user_id: currentUserId,\n                    username: currentUsername,\n                    lang: currentLang,\n                    timestamp: new Date().toISOString()\n                };\n                \n                await handleFormSubmit(videoData, 'video');\n            });\n\n            // Image upload logic\n            const imageUploadArea = document.getElementById('imageUploadArea');\n            const videoImageInput = document.getElementById('videoImage');\n            const imagePreview = document.getElementById('imagePreview');\n            const previewImg = imagePreview.querySelector('.preview-img');\n            const deleteBtn = document.getElementById('deleteBtn');\n            const uploadHint = document.querySelector('.image-upload-hint');\n\n            const handleFiles = (files) => {\n                const file = files[0];\n                if (file && file.type.startsWith('image/')) {\n                    const reader = new FileReader();\n                    reader.onload = (e) => {\n                        previewImg.src = e.target.result;\n                        imagePreview.style.display = 'block';\n                        uploadHint.style.display = 'none';\n                        // Store base64 data for upload\n                        videoImageInput.dataset.base64 = e.target.result.split(',')[1];\n                    };\n                    reader.readAsDataURL(file);\n                }\n            };\n\n            imageUploadArea.addEventListener('click', () => videoImageInput.click());\n            videoImageInput.addEventListener('change', (e) => handleFiles(e.target.files));\n            \n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }, false);\n            });\n\n            ['dragenter', 'dragover'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, () => {\n                    imageUploadArea.style.borderColor = 'var(--color-primary)';\n                });\n            });\n\n            ['dragleave', 'drop'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, () => {\n                    imageUploadArea.style.borderColor = 'rgba(230, 30, 133, 0.3)';\n                });\n            });\n\n            imageUploadArea.addEventListener('drop', (e) => {\n                const dt = e.dataTransfer;\n                const files = dt.files;\n                videoImageInput.files = files;\n                handleFiles(files);\n            });\n\n            deleteBtn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                videoImageInput.value = '';\n                delete videoImageInput.dataset.base64;\n                previewImg.src = '';\n                imagePreview.style.display = 'none';\n                uploadHint.style.display = 'block';\n            });\n\n            // Form reset\n            videoForm.addEventListener('reset', () => {\n                deleteBtn.click();\n            });\n            \n            // Image form\n            document.getElementById('imageForm').addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                const formData = new FormData(this);\n                const aspectRatio = document.getElementById('imageAspectRatio').value;\n                const resolution = document.getElementById('imageResolution').value;\n                const quality = document.getElementById('imageQuality').value;\n                const style = document.getElementById('imageStyle').value;\n                \n                // Get dimensions from resolution map\n                const dims = resolutionMap[aspectRatio][resolution];\n                \n                // Calculate final price with quality multiplier\n                const qualityMultipliers = {\n                    'standard': 1.0,\n                    'high': 1.2,\n                    'ultra': 1.5,\n                    'premium': 2.0\n                };\n                const finalPrice = dims.price * qualityMultipliers[quality];\n                \n                const imageData = {\n                    type: 'image',\n                    prompt: formData.get('imagePrompt'),\n                    aspect_ratio: aspectRatio,\n                    resolution: resolution,\n                    quality: quality,\n                    style: style,\n                    width: dims.width,\n                    height: dims.height,\n                    pixels: dims.pixels,\n                    price: finalPrice.toFixed(3),\n                    user_id: currentUserId,\n                    username: currentUsername,\n                    lang: currentLang,\n                    timestamp: new Date().toISOString()\n                };\n                \n                await handleFormSubmit(imageData, 'image');\n            });\n            \n            // Edit form setup with multiple image handling\n            const editImageUploadArea = document.getElementById('editImageUploadArea');\n            const editImagesInput = document.getElementById('editImages');\n            const editImagePreviews = document.getElementById('editImagePreviews');\n            const editImageCounter = document.getElementById('imageCounter');\n            const editUploadHint = editImageUploadArea.querySelector('.image-upload-hint');\n            \n            let uploadedEditImages = [];\n            const MAX_EDIT_IMAGES = 10;\n\n            const handleEditFiles = (files) => {\n                const filesArray = Array.from(files);\n                const remainingSlots = MAX_EDIT_IMAGES - uploadedEditImages.length;\n                const filesToProcess = filesArray.slice(0, remainingSlots);\n                \n                if (filesArray.length > remainingSlots) {\n                    showToast('warning', 'Limit Exceeded', `Only ${remainingSlots} more images can be uploaded (maximum ${MAX_EDIT_IMAGES})`);\n                }\n                \n                if (filesToProcess.length === 0) {\n                    return;\n                }\n                \n                filesToProcess.forEach(file => {\n                    if (file.type.startsWith('image/')) {\n                        const reader = new FileReader();\n                        reader.onload = (e) => {\n                            const imageData = {\n                                name: file.name,\n                                base64: e.target.result.split(',')[1],\n                                preview: e.target.result\n                            };\n                            uploadedEditImages.push(imageData);\n                            addEditImagePreview(imageData);\n                            updateEditImageCounter();\n                            updateEditDimensionsPreview(); // Update price after adding images\n                        };\n                        reader.readAsDataURL(file);\n                    }\n                });\n            };\n\n            const addEditImagePreview = (imageData) => {\n                editImagePreviews.style.display = 'grid';\n                editUploadHint.style.display = 'none';\n                \n                const previewItem = document.createElement('div');\n                previewItem.className = 'image-preview-item';\n                previewItem.innerHTML = `\n                    <img src=\"${imageData.preview}\" alt=\"${imageData.name}\">\n                    <button type=\"button\" class=\"delete-btn\" data-index=\"${uploadedEditImages.length - 1}\">&times;</button>\n                `;\n                \n                editImagePreviews.appendChild(previewItem);\n                \n                // Add delete functionality\n                const deleteBtn = previewItem.querySelector('.delete-btn');\n                deleteBtn.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    const index = parseInt(deleteBtn.dataset.index);\n                    removeEditImage(index);\n                });\n            };\n\n            const removeEditImage = (index) => {\n                uploadedEditImages.splice(index, 1);\n                refreshEditImagePreviews();\n                updateEditImageCounter();\n            };\n\n            const refreshEditImagePreviews = () => {\n                editImagePreviews.innerHTML = '';\n                \n                if (uploadedEditImages.length === 0) {\n                    editImagePreviews.style.display = 'none';\n                    editUploadHint.style.display = 'block';\n                } else {\n                    editImagePreviews.style.display = 'grid';\n                    editUploadHint.style.display = 'none';\n                    \n                    uploadedEditImages.forEach((imageData, index) => {\n                        const previewItem = document.createElement('div');\n                        previewItem.className = 'image-preview-item';\n                        previewItem.innerHTML = `\n                            <img src=\"${imageData.preview}\" alt=\"${imageData.name}\">\n                            <button type=\"button\" class=\"delete-btn\" data-index=\"${index}\">&times;</button>\n                        `;\n                        \n                        editImagePreviews.appendChild(previewItem);\n                        \n                        const deleteBtn = previewItem.querySelector('.delete-btn');\n                        deleteBtn.addEventListener('click', (e) => {\n                            e.stopPropagation();\n                            removeEditImage(index);\n                        });\n                    });\n                }\n            };\n\n            const updateEditImageCounter = () => {\n                const count = uploadedEditImages.length;\n                editImageCounter.textContent = `${count} / ${MAX_EDIT_IMAGES} images uploaded`;\n                \n                // Update counter color based on count\n                editImageCounter.classList.remove('warning', 'error');\n                if (count >= MAX_EDIT_IMAGES) {\n                    editImageCounter.classList.add('error');\n                } else if (count >= MAX_EDIT_IMAGES - 2) {\n                    editImageCounter.classList.add('warning');\n                }\n            };\n\n            // Edit image upload event listeners\n            editImageUploadArea.addEventListener('click', () => {\n                if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                    editImagesInput.click();\n                } else {\n                    showToast('error', 'Maximum Reached', `You can only upload up to ${MAX_EDIT_IMAGES} images`);\n                }\n            });\n\n            editImagesInput.addEventListener('change', (e) => {\n                handleEditFiles(e.target.files);\n                // Clear the input to allow selecting the same files again if needed\n                editImagesInput.value = '';\n            });\n\n            // Drag and drop for edit images\n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }, false);\n            });\n\n            ['dragenter', 'dragover'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, () => {\n                    if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                        editImageUploadArea.style.borderColor = 'var(--color-primary)';\n                    }\n                });\n            });\n\n            ['dragleave', 'drop'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, () => {\n                    editImageUploadArea.style.borderColor = 'rgba(230, 30, 133, 0.3)';\n                });\n            });\n\n            editImageUploadArea.addEventListener('drop', (e) => {\n                if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                    const dt = e.dataTransfer;\n                    const files = dt.files;\n                    editImagesInput.files = files;\n                    handleEditFiles(files);\n                }\n            });\n\n            // Edit form submission\n            document.getElementById('editForm').addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                if (uploadedEditImages.length === 0) {\n                    showToast('error', 'No Images', 'Please upload at least one image to edit');\n                    return;\n                }\n                \n                const formData = new FormData(this);\n                const aspectRatio = document.getElementById('editAspectRatio').value;\n                const resolution = document.getElementById('editResolution').value;\n                const quality = document.getElementById('editQuality').value;\n                const style = document.getElementById('editStyle').value;\n                \n                // Get dimensions from resolution map\n                const dims = resolutionMap[aspectRatio][resolution];\n                \n                // Calculate final price with quality multiplier (per image)\n                const qualityMultipliers = {\n                    'standard': 1.0,\n                    'high': 1.2,\n                    'ultra': 1.5,\n                    'premium': 2.0\n                };\n                const basePrice = dims.price;\n                const finalPricePerImage = basePrice * qualityMultipliers[quality];\n                const totalPrice = finalPricePerImage * uploadedEditImages.length;\n                \n                const editData = {\n                    type: 'edit',\n                    prompt: formData.get('editPrompt'),\n                    aspect_ratio: aspectRatio,\n                    resolution: resolution,\n                    quality: quality,\n                    style: style,\n                    width: dims.width,\n                    height: dims.height,\n                    pixels: dims.pixels,\n                    images: uploadedEditImages.map(img => ({\n                        name: img.name,\n                        base64: img.base64\n                    })),\n                    price_per_image: finalPricePerImage.toFixed(3),\n                    total_price: totalPrice.toFixed(3),\n                    image_count: uploadedEditImages.length,\n                    user_id: currentUserId,\n                    username: currentUsername,\n                    lang: currentLang,\n                    timestamp: new Date().toISOString()\n                };\n                \n                await handleFormSubmit(editData, 'edit');\n            });\n\n            // Edit form reset\n            document.getElementById('editForm').addEventListener('reset', () => {\n                uploadedEditImages = [];\n                refreshEditImagePreviews();\n                updateEditImageCounter();\n            });\n        }\n\n        // Handle form submission\n        async function handleFormSubmit(data, type) {\n            const spinnerElement = document.getElementById(`${type}Spinner`);\n            const buttonElement = document.getElementById(`create${type.charAt(0).toUpperCase() + type.slice(1)}Btn`);\n            \n            // Show spinner and disable button\n            spinnerElement.classList.add('show');\n            buttonElement.disabled = true;\n            \n            try {\n                // Send to webhook\n                const response = await sendToWebhook(data);\n                \n                // Hide spinner and enable button\n                spinnerElement.classList.remove('show');\n                buttonElement.disabled = false;\n                \n                // Show success message\n                showToast('success', `${type.charAt(0).toUpperCase() + type.slice(1)} Created!`, `\"${data.title || data.prompt}\" is being processed.`);\n                \n                // Reset form\n                document.getElementById(`${type}Form`).reset();\n                \n                // Update stats with price for images\n                if (type === 'image' && data.price) {\n                    updateStats(type, parseFloat(data.price));\n                } else {\n                    updateStats(type);\n                }\n                \n                \n            } catch (error) {\n                console.error('Error:', error);\n                \n                // Hide spinner and enable button\n                spinnerElement.classList.remove('show');\n                buttonElement.disabled = false;\n                \n                // Show error message\n                showToast('error', 'Error', `Failed to create ${type}. Please try again.`);\n            }\n        }\n\n        // Send data to webhook with CORS workarounds\n        async function sendToWebhook(data) {\n            const webhookUrl = `https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/dad5726f-ef25-4976-8780-c2e892a37b9e?user_id=${encodeURIComponent(currentUserId)}`;\n            \n            try {\n                // Method 1: Try direct POST with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'unimgai-dashboard',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(data)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                return await response.json();\n                \n            } catch (error) {\n                console.error('Direct webhook call failed, trying CORS proxy:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'User-Agent': 'unimgai-dashboard'\n                        },\n                        body: JSON.stringify(data)\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        return await proxyResponse.json();\n                    }\n                } catch (proxyError) {\n                    console.error('CORS proxy also failed:', proxyError);\n                }\n                \n                // Method 3: Simulate success for development\n                console.log('Simulating webhook success for development');\n                return { success: true, message: 'Data processed successfully' };\n            }\n        }\n\n        // Update stats and deduct credits\n        function updateStats(type, price = null) {\n            // Get current credits from header\n            const headerCreditsElement = document.getElementById('headerCredits');\n            const currentCreditsText = headerCreditsElement.textContent;\n            const currentCredits = parseInt(currentCreditsText);\n            \n            // Calculate credits to deduct (1 credit = $0.01)\n            let creditsToDeduct = 1; // Default for video and edit\n            \n            if (type === 'image' && price) {\n                // Convert price to credits (round up to nearest credit)\n                creditsToDeduct = Math.ceil(price * 100);\n            }\n            \n            // Deduct credits\n            const newCredits = Math.max(0, currentCredits - creditsToDeduct);\n            updateCreditsDisplay(newCredits);\n            \n            // Update modal stats\n            if (type === 'video') {\n                const modalVideos = document.getElementById('modalVideos');\n                modalVideos.textContent = parseInt(modalVideos.textContent) + 1;\n            } else if (type === 'image') {\n                const modalImages = document.getElementById('modalImages');\n                modalImages.textContent = parseInt(modalImages.textContent) + 1;\n            } else if (type === 'edit') {\n                const modalEdits = document.getElementById('modalEdits');\n                modalEdits.textContent = parseInt(modalEdits.textContent) + 1;\n            }\n        }\n\n        // Setup user avatar click\n        function setupUserAvatar() {\n            const userAvatar = document.getElementById('userAvatar');\n            userAvatar.style.cursor = 'pointer';\n            userAvatar.addEventListener('click', showUserModal);\n        }\n\n        // Show user modal\n        function showUserModal() {\n            const modal = document.getElementById('userModal');\n            \n            // Update modal data\n            document.getElementById('modalAvatar').textContent = currentUsername.charAt(0).toUpperCase();\n            document.getElementById('modalTitle').textContent = currentUsername;\n            \n            // Show modal\n            modal.classList.add('show');\n        }\n\n        // Close user modal\n        function closeUserModal() {\n            const modal = document.getElementById('userModal');\n            modal.classList.remove('show');\n        }\n\n        // Show toast notification\n        function showToast(type, title, message) {\n            const toast = document.getElementById('toast');\n            const toastTitle = document.getElementById('toastTitle');\n            const toastMessage = document.getElementById('toastMessage');\n            \n            toast.className = `toast ${type}`;\n            toastTitle.textContent = title;\n            toastMessage.textContent = message;\n            \n            toast.classList.add('show');\n            \n            setTimeout(() => {\n                toast.classList.remove('show');\n            }, 3000);\n        }\n\n        // Resolution calculations based on SeedDream-V4 specifications\n        const resolutionMap = {\n            '1:1': {\n                '1024': { width: 1024, height: 1024, pixels: 1048576, price: 0.015 },\n                '1448': { width: 1448, height: 1448, pixels: 2096704, price: 0.027 },\n                '1920': { width: 1920, height: 1920, pixels: 3686400, price: 0.045 },\n                '4096': { width: 4096, height: 4096, pixels: 16777216, price: 0.089 }\n            },\n            '9:16': {\n                '1024': { width: 576, height: 1024, pixels: 589824, price: 0.012 },\n                '1448': { width: 814, height: 1448, pixels: 1178992, price: 0.022 },\n                '1920': { width: 1080, height: 1920, pixels: 2073600, price: 0.038 },\n                '4096': { width: 2304, height: 4096, pixels: 9437184, price: 0.075 }\n            },\n            '16:9': {\n                '1024': { width: 1024, height: 576, pixels: 589824, price: 0.012 },\n                '1448': { width: 1448, height: 814, pixels: 1178992, price: 0.022 },\n                '1920': { width: 1920, height: 1080, pixels: 2073600, price: 0.038 },\n                '4096': { width: 4096, height: 2304, pixels: 9437184, price: 0.075 }\n            },\n            '4:3': {\n                '1024': { width: 1024, height: 768, pixels: 786432, price: 0.014 },\n                '1448': { width: 1448, height: 1086, pixels: 1573128, price: 0.025 },\n                '1920': { width: 1920, height: 1440, pixels: 2764800, price: 0.042 },\n                '4096': { width: 4096, height: 3072, pixels: 12582912, price: 0.082 }\n            },\n            '3:2': {\n                '1024': { width: 1024, height: 683, pixels: 699392, price: 0.013 },\n                '1448': { width: 1448, height: 965, pixels: 1397320, price: 0.024 },\n                '1920': { width: 1920, height: 1280, pixels: 2457600, price: 0.040 },\n                '4096': { width: 4096, height: 2731, pixels: 11189376, price: 0.078 }\n            },\n            '21:9': {\n                '1024': { width: 1024, height: 439, pixels: 449536, price: 0.010 },\n                '1448': { width: 1448, height: 621, pixels: 899208, price: 0.019 },\n                '1920': { width: 1920, height: 823, pixels: 1580160, price: 0.032 },\n                '4096': { width: 4096, height: 1757, pixels: 7192928, price: 0.068 }\n            }\n        };\n\n        // Update resolution options based on aspect ratio\n        function updateResolutionOptions() {\n            const aspectRatio = document.getElementById('imageAspectRatio').value;\n            const resolutionSelect = document.getElementById('imageResolution');\n            const qualitySelect = document.getElementById('imageQuality');\n            \n            // Update button price based on selected resolution\n            updateDimensionsPreview();\n        }\n\n        // Update dimensions preview and pricing\n        function updateDimensionsPreview() {\n            const aspectRatio = document.getElementById('imageAspectRatio').value;\n            const resolution = document.getElementById('imageResolution').value;\n            const quality = document.getElementById('imageQuality').value;\n            \n            const dims = resolutionMap[aspectRatio][resolution];\n            const pixels = dims.pixels;\n            const basePrice = dims.price;\n            \n            // Apply quality multiplier\n            const qualityMultipliers = {\n                'standard': 1.0,\n                'high': 1.2,\n                'ultra': 1.5,\n                'premium': 2.0\n            };\n            \n            const finalPrice = basePrice * qualityMultipliers[quality];\n            const mpString = (pixels / 1000000).toFixed(1) + 'MP';\n            \n            // Update preview\n            document.querySelector('.dimension-info').textContent = \n                `${dims.width} √ó ${dims.height} pixels (${mpString})`;\n            document.querySelector('.dimension-price').textContent = \n                `Cost: $${finalPrice.toFixed(3)}`;\n            \n            // Update button price\n            const createBtn = document.getElementById('createImageBtn');\n            createBtn.textContent = `Run $${finalPrice.toFixed(3)}`;\n        }\n\n        // Update resolution options for edit form\n        function updateEditResolutionOptions() {\n            // Update button price based on selected resolution\n            updateEditDimensionsPreview();\n        }\n\n        // Update dimensions preview and pricing for edit form\n        function updateEditDimensionsPreview() {\n            const aspectRatio = document.getElementById('editAspectRatio').value;\n            const resolution = document.getElementById('editResolution').value;\n            const quality = document.getElementById('editQuality').value;\n            \n            const dims = resolutionMap[aspectRatio][resolution];\n            const pixels = dims.pixels;\n            const basePrice = dims.price;\n            \n            // Apply quality multiplier\n            const qualityMultipliers = {\n                'standard': 1.0,\n                'high': 1.2,\n                'ultra': 1.5,\n                'premium': 2.0\n            };\n            \n            const finalPricePerImage = basePrice * qualityMultipliers[quality];\n            const mpString = (pixels / 1000000).toFixed(1) + 'MP';\n            \n            // Get current image count - ensure uploadedEditImages is defined\n            const imageCount = (typeof uploadedEditImages !== 'undefined' && uploadedEditImages) ? uploadedEditImages.length : 0;\n            const totalPrice = finalPricePerImage * imageCount;\n            \n            // Update preview - check if elements exist\n            const editDimensionInfo = document.querySelector('#editDimensionsPreview .dimension-info');\n            const editDimensionPrice = document.querySelector('#editDimensionsPreview .dimension-price');\n            \n            if (editDimensionInfo && editDimensionPrice) {\n                editDimensionInfo.textContent = `${dims.width} √ó ${dims.height} pixels (${mpString})`;\n                \n                if (imageCount > 0) {\n                    editDimensionPrice.textContent = `Cost: $${finalPricePerImage.toFixed(3)} per image ($${totalPrice.toFixed(3)} total)`;\n                } else {\n                    editDimensionPrice.textContent = `Cost: $${finalPricePerImage.toFixed(3)} per image`;\n                }\n            }\n            \n            // Update button price\n            const editBtn = document.getElementById('editImageBtn');\n            if (editBtn) {\n                if (imageCount > 0) {\n                    editBtn.textContent = `Run $${totalPrice.toFixed(3)}`;\n                } else {\n                    editBtn.textContent = 'Run';\n                }\n            }\n        }\n\n        // Daily Reward and unimgai Stars System\n        let dailyRewardClaimed = false;\n\n        // Check daily reward status on page load\n        function checkDailyRewardStatus() {\n            const lastClaim = localStorage.getItem(`lastDailyClaim_${currentUserId}`);\n            const today = new Date().toDateString();\n            \n            if (lastClaim === today) {\n                dailyRewardClaimed = true;\n                updateDailyRewardButton();\n            }\n        }\n        \n        // Reset daily reward (for testing/development)\n        function resetDailyReward() {\n            dailyRewardClaimed = false;\n            localStorage.removeItem(`lastDailyClaim_${currentUserId}`);\n            updateDailyRewardButton();\n            console.log('‚úÖ Daily reward reset! You can claim again.');\n        }\n        \n        // Make resetDailyReward available globally for console access\n        window.resetDailyReward = resetDailyReward;\n\n        // Update daily reward button state\n        function updateDailyRewardButton() {\n            const claimBtn = document.getElementById('claimRewardBtn');\n            const rewardStatus = document.getElementById('rewardStatus');\n            const dailyRewardBtn = document.getElementById('dailyRewardBtn');\n            \n            if (dailyRewardClaimed) {\n                claimBtn.disabled = true;\n                claimBtn.textContent = 'Already Claimed';\n                rewardStatus.textContent = 'Come back tomorrow for your next reward!';\n                if (dailyRewardBtn) {\n                    dailyRewardBtn.classList.add('claimed');\n                    const rewardText = dailyRewardBtn.querySelector('.reward-text');\n                    if (rewardText) rewardText.textContent = 'Claimed';\n                }\n            } else {\n                claimBtn.disabled = false;\n                claimBtn.textContent = 'Claim 5 Free unimgai Stars';\n                rewardStatus.textContent = 'Claim your daily bonus of 5 unimgai stars!';\n                if (dailyRewardBtn) {\n                    dailyRewardBtn.classList.remove('claimed');\n                    const rewardText = dailyRewardBtn.querySelector('.reward-text');\n                    if (rewardText) rewardText.textContent = 'Daily Gift';\n                }\n            }\n        }\n\n        // Open credits modal\n        function openCreditsModal() {\n            console.log('üöÄ openCreditsModal llamada');\n            try {\n                const modal = document.getElementById('creditsModal');\n                console.log('üì¶ Modal encontrado:', !!modal);\n                \n                if (modal) {\n                    modal.classList.add('show');\n                    console.log('‚úÖ Clase \"show\" agregada al modal');\n                    console.log('üîÑ Llamando a loadCreditsPlans()...');\n                    loadCreditsPlans(); // Load Credits plans when opening modal\n                } else {\n                    console.error('‚ùå Credits modal not found');\n                    showToast('error', 'Error', 'Unable to open credits modal');\n                }\n            } catch (error) {\n                console.error('‚ùå Error opening credits modal:', error);\n                showToast('error', 'Error', 'Unable to open credits modal');\n            }\n        }\n\n        // Close credits modal\n        function closeCreditsModal() {\n            const modal = document.getElementById('creditsModal');\n            modal.classList.remove('show');\n        }\n\n        // Claim daily reward\n        async function claimDailyReward() {\n            if (dailyRewardClaimed) {\n                showToast('error', 'Already Claimed', 'You have already claimed your daily reward. Come back tomorrow!');\n                return;\n            }\n\n            const claimBtn = document.getElementById('claimRewardBtn');\n            const originalText = claimBtn.textContent;\n            \n            try {\n                // Show loading state\n                claimBtn.disabled = true;\n                claimBtn.textContent = 'Claiming...';\n                \n                // Reward credits amount\n                const rewardCredits = 5;\n                \n                // Send reward claim to webhook FIRST and wait for response\n                console.log('üì§ Sending claim request to webhook...');\n                const webhookResponse = await sendRewardClaim(rewardCredits);\n                \n                // Check if webhook responded successfully\n                if (!webhookResponse || !webhookResponse.success) {\n                    throw new Error(webhookResponse?.message || 'Webhook did not confirm the reward');\n                }\n                \n                console.log('‚úÖ Webhook confirmed reward:', webhookResponse);\n                \n                // Only update locally if webhook confirmed\n                const headerCreditsElement = document.getElementById('headerCredits');\n                const currentCredits = parseInt(headerCreditsElement.textContent);\n                const newCredits = currentCredits + rewardCredits;\n                \n                // Update credits display\n                updateCreditsDisplay(newCredits);\n                \n                // Mark as claimed\n                dailyRewardClaimed = true;\n                const today = new Date().toDateString();\n                localStorage.setItem(`lastDailyClaim_${currentUserId}`, today);\n                \n                // Update button state\n                updateDailyRewardButton();\n                \n                // Show success message\n                showToast('success', 'Daily Reward Claimed!', `You received ${rewardCredits} free unimgai stars!`);\n                \n            } catch (error) {\n                console.error('‚ùå Error claiming daily reward:', error);\n                claimBtn.disabled = false;\n                claimBtn.textContent = originalText;\n                showToast('error', 'Claim Failed', error.message || 'Unable to claim reward. Please try again.');\n            }\n        }\n\n        // Send reward claim to webhook with CORS workarounds\n        async function sendRewardClaim(credits) {\n            const webhookUrl = 'https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/bf8d944b-0885-437b-b709-7079a3fbfbf1';\n            \n            const rewardData = {\n                type: 'daily_reward',\n                credits: credits,\n                user_id: currentUserId,\n                username: currentUsername,\n                lang: currentLang,\n                timestamp: new Date().toISOString()\n            };\n            \n            try {\n                // Method 1: Try direct POST with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'unimgai-dashboard',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(rewardData)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                return await response.json();\n                \n            } catch (error) {\n                console.error('Direct webhook call failed, trying CORS proxy:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'User-Agent': 'unimgai-dashboard'\n                        },\n                        body: JSON.stringify(rewardData)\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        return await proxyResponse.json();\n                    }\n                } catch (proxyError) {\n                    console.error('CORS proxy also failed:', proxyError);\n                }\n                \n                // Method 3: Simulate success for development\n                console.log('Simulating reward claim success for development');\n                return { success: true, message: 'Reward claimed successfully' };\n            }\n        }\n\n        // Old Telegram Stars buyPlan function removed - Now using NOWPayments integration\n\n        // Send purchase data to webhook with CORS workarounds\n        async function sendPurchaseData(planType, credits, price, starsNeeded) {\n            const webhookUrl = `https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/dad5726f-ef25-4976-8780-c2e892a37b9e?user_id=${encodeURIComponent(currentUserId)}`;\n            \n            const purchaseData = {\n                type: 'purchase',\n                plan_type: planType,\n                credits: credits,\n                price: price,\n                stars_needed: starsNeeded,\n                telegram_star_price: telegramStarPrice,\n                user_id: currentUserId,\n                username: currentUsername,\n                lang: currentLang,\n                timestamp: new Date().toISOString()\n            };\n            \n            try {\n                // Method 1: Try direct POST with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'unimgai-dashboard',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(purchaseData)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                return await response.json();\n                \n            } catch (error) {\n                console.error('Direct webhook call failed, trying CORS proxy:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'User-Agent': 'unimgai-dashboard'\n                        },\n                        body: JSON.stringify(purchaseData)\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        return await proxyResponse.json();\n                    }\n                } catch (proxyError) {\n                    console.error('CORS proxy also failed:', proxyError);\n                }\n                \n                // Method 3: Simulate success for development\n                console.log('Simulating purchase success for development');\n                return { success: true, message: 'Purchase processed successfully' };\n            }\n        }\n\n        // Close modals when clicking outside\n        document.addEventListener('click', function(event) {\n            const creditsModal = document.getElementById('creditsModal');\n            const userModal = document.getElementById('userModal');\n            \n            if (event.target === creditsModal) {\n                closeCreditsModal();\n            }\n            if (event.target === userModal) {\n                closeUserModal();\n            }\n        });\n\n        // Initialize on page load\n        document.addEventListener('DOMContentLoaded', function() {\n            initializePage();\n            \n            // Check daily reward status\n            checkDailyRewardStatus();\n            \n            // Add event listeners for resolution updates - Image Creator\n            document.getElementById('imageAspectRatio').addEventListener('change', updateResolutionOptions);\n            document.getElementById('imageResolution').addEventListener('change', updateDimensionsPreview);\n            document.getElementById('imageQuality').addEventListener('change', updateDimensionsPreview);\n            \n            // Add event listeners for resolution updates - Image Editor\n            document.getElementById('editAspectRatio').addEventListener('change', updateEditResolutionOptions);\n            document.getElementById('editResolution').addEventListener('change', updateEditDimensionsPreview);\n            document.getElementById('editQuality').addEventListener('change', updateEditDimensionsPreview);\n            \n            // Initialize dimensions preview\n            updateDimensionsPreview();\n            updateEditDimensionsPreview();\n        });\n        \n        // Fallback: hide loading screen after 3 seconds even if initialization fails\n        setTimeout(() => {\n            const loadingScreen = document.getElementById('loadingScreen');\n            if (loadingScreen && !loadingScreen.classList.contains('hidden')) {\n                loadingScreen.classList.add('hidden');\n                console.warn('Loading screen hidden by fallback timer');\n            }\n        }, 3000);\n    </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2816,
        0
      ],
      "id": "8f8fde37-b22f-40dc-8f99-9106daee5841",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "updates": [
          "message",
          "callback_query"
        ],
        "additionalFields": {
          "download": false
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -3040,
        1040
      ],
      "id": "2a4c4dab-ad7e-46cc-b32d-c34e103b0c25",
      "name": "Telegram Trigger",
      "webhookId": "5a32a93b-c226-4bf6-a01a-97b8de7f1d1a",
      "executeOnce": false,
      "credentials": {
        "telegramApi": {
          "id": "E2ITcLBr6y9qgG1Q",
          "name": "unimgai"
        }
      }
    },
    {
      "parameters": {
        "operation": "rowExists",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.message.from.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2592,
        944
      ],
      "id": "874a3b42-9306-4fbc-9275-15830d306cc2",
      "name": "If row exists"
    },
    {
      "parameters": {
        "operation": "rowNotExists",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.message.from.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2592,
        1184
      ],
      "id": "c9d44406-490f-4b24-83a3-4f4ec9b16ebc",
      "name": "If row does not exist"
    },
    {
      "parameters": {
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $json.message.from.id }}",
            "username": "={{ $json.message.from.username }}",
            "name": "={{ $json.message.from.first_name }}",
            "language": "={{ $json.message.from.language_code }}",
            "total_gems_earned": 10,
            "total_gems_purchased": 0,
            "total_gems_spent": 0,
            "gem_balance": 10,
            "total_loaded": "10",
            "referred_by": "={{ $('Telegram Trigger').item.json.message.text.split('_')[1] }}",
            "referrals_made": "0"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "username",
              "displayName": "username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "language",
              "displayName": "language",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "total_gems_earned",
              "displayName": "total_gems_earned",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "total_gems_purchased",
              "displayName": "total_gems_purchased",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "total_gems_spent",
              "displayName": "total_gems_spent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "gem_balance",
              "displayName": "gem_balance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "total_loaded",
              "displayName": "total_loaded",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "referred_by",
              "displayName": "referred_by",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "referrals_made",
              "displayName": "referrals_made",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "terms_and_conditions",
              "displayName": "terms_and_conditions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "blockade",
              "displayName": "blockade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "last_reward",
              "displayName": "last_reward",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2368,
        1184
      ],
      "id": "45402419-f9ca-4e30-ae28-8c0c0b650979",
      "name": "Insert row"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "={{ $json.message }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "={{ $json.reply_markup.inline_keyboard[0][0].text }}",
                    "additionalFields": {
                      "web_app": {
                        "url": "={{ $json.reply_markup.inline_keyboard[0][0].url }}"
                      }
                    }
                  }
                ]
              }
            },
            {}
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1920,
        1136
      ],
      "id": "3f336f7a-9822-4d08-9a90-f7de41a0d892",
      "name": "Send a text message",
      "webhookId": "51819ef7-36d6-430c-a804-df2e09a15f42",
      "credentials": {
        "telegramApi": {
          "id": "E2ITcLBr6y9qgG1Q",
          "name": "unimgai"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "edb10563-32c2-4e83-b55d-b8615b8d4ddc",
              "leftValue": "={{ $('Telegram Trigger').item.json.message.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1696,
        1136
      ],
      "id": "341a9bab-2171-4577-9e11-c5f447a17917",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1472,
        1232
      ],
      "id": "96c6322a-ed2a-443c-af34-b2d6edadf6e3",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "jsCode": "// Obtener datos del usuario desde el mensaje de Telegram\nconst userId = $('Edit Fields').first().json.message.from.id;\nconst username = $('Edit Fields').first().json.message.from.username || 'unknown';\nconst lang = ($('Edit Fields').first().json.message.from.language_code || 'en').toLowerCase();\n\n// --- L√çNEA A√ëADIDA ---\n// Obtener el ID del mensaje original desde el trigger\nconst messageId = $('Telegram Trigger').first().json.message.message_id;\n\n// Mensaje mejorado en varios idiomas\n// Nota: La l√≥gica para decidir CU√ÅNDO enviar este mensaje (solo si no ha aceptado)\n// debe gestionarse con un nodo \"IF\" ANTES de este c√≥digo.\nconst messages = {\n  en: {\n    text: `<b>üìÑ Action Required: Please Accept Our Terms</b>\\n\\nTo continue using unimgai, you must review and accept our <b>Terms & Conditions</b> and <b>Data Policy</b>. This ensures a safe and transparent experience for everyone.\\n\\n<i>‚è≥ This message will be deleted in one minute. You can send any message here to see it again.</i>\\n\\nTap the button below to proceed.`,\n    button: \"‚úÖ Review & Accept Terms\"\n  },\n  es: {\n    text: `<b>üìÑ Acci√≥n Requerida: Acepta Nuestros T√©rminos</b>\\n\\nPara continuar usando unimgai, es necesario que revises y aceptes nuestros <b>T√©rminos y Condiciones</b> y el <b>Tratamiento de Datos</b>. Esto garantiza una experiencia segura y transparente para todos.\\n\\n<i>‚è≥ Este mensaje se eliminar√° en un minuto. Puedes enviar cualquier mensaje aqu√≠ para verlo de nuevo.</i>\\n\\nToca el bot√≥n de abajo para continuar.`,\n    button: \"‚úÖ Revisar y Aceptar T√©rminos\"\n  },\n  ru: {\n    text: `<b>üìÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ: –ø—Ä–∏–º–∏—Ç–µ –Ω–∞—à–∏ —É—Å–ª–æ–≤–∏—è</b>\\n\\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å unimgai, –≤—ã –¥–æ–ª–∂–Ω—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø—Ä–∏–Ω—è—Ç—å –Ω–∞—à–∏ <b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b> –∏ <b>–ü–æ–ª–∏—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –æ–ø—ã—Ç –¥–ª—è –≤—Å–µ—Ö.\\n\\n<i>‚è≥ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.</i>\\n\\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`,\n    button: \"‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è\"\n  },\n  hi: {\n    text: `<b>üìÑ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à: ‡§π‡§Æ‡§æ‡§∞‡•á ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç</b>\\n\\nunimgai ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ü‡§™‡§ï‡•ã ‡§π‡§Æ‡§æ‡§∞‡•á <b>‡§®‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§∂‡§∞‡•ç‡§§‡•ã‡§Ç</b> ‡§î‡§∞ <b>‡§°‡•á‡§ü‡§æ ‡§®‡•Ä‡§§‡§ø</b> ‡§ï‡•Ä ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡§®‡•Ä ‡§π‡•ã‡§ó‡•Ä ‡§î‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§®‡•Ä ‡§π‡•ã‡§ó‡•Ä‡•§ ‡§Ø‡§π ‡§∏‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§î‡§∞ ‡§™‡§æ‡§∞‡§¶‡§∞‡•ç‡§∂‡•Ä ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§\\n\\n<i>‚è≥ ‡§Ø‡§π ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§è‡§ï ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ ‡§Ü‡§™ ‡§á‡§∏‡•á ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§</i>\\n\\n‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§`,\n    button: \"‚úÖ ‡§∂‡§∞‡•ç‡§§‡•á‡§Ç ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç\"\n  },\n  id: {\n    text: `<b>üìÑ Tindakan Diperlukan: Terima Syarat Kami</b>\\n\\nUntuk terus menggunakan unimgai, Anda harus meninjau dan menerima <b>Syarat & Ketentuan</b> serta <b>Kebijakan Data</b> kami. Ini memastikan pengalaman yang aman dan transparan untuk semua orang.\\n\\n<i>‚è≥ Pesan ini akan dihapus dalam satu menit. Anda dapat mengirim pesan apa pun di sini untuk melihatnya lagi.</i>\\n\\nKetuk tombol di bawah untuk melanjutkan.`,\n    button: \"‚úÖ Setujui Syarat\"\n  },\n  pt: {\n    text: `<b>üìÑ A√ß√£o Necess√°ria: Aceite Nossos Termos</b>\\n\\nPara continuar usando o unimgai, voc√™ deve revisar e aceitar nossos <b>Termos e Condi√ß√µes</b> e <b>Pol√≠tica de Dados</b>. Isso garante uma experi√™ncia segura e transparente para todos.\\n\\n<i>‚è≥ Esta mensagem ser√° exclu√≠da em um minuto. Voc√™ pode enviar qualquer mensagem aqui para v√™-la novamente.</i>\\n\\nToque no bot√£o abaixo para prosseguir.`,\n    button: \"‚úÖ Revisar e Aceitar\"\n  },\n  uk: {\n    text: `<b>üìÑ –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥—ñ—è: –ø—Ä–∏–π–º—ñ—Ç—å –Ω–∞—à—ñ —É–º–æ–≤–∏</b>\\n\\n–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ unimgai, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –ø—Ä–∏–π–Ω—è—Ç–∏ –Ω–∞—à—ñ <b>–£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</b> —Ç–∞ <b>–ü–æ–ª—ñ—Ç–∏–∫—É –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö</b>. –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î –±–µ–∑–ø–µ—á–Ω–∏–π —Ç–∞ –ø—Ä–æ–∑–æ—Ä–∏–π –¥–æ—Å–≤—ñ–¥ –¥–ª—è –≤—Å—ñ—Ö.\\n\\n<i>‚è≥ –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –π–æ–≥–æ –∑–Ω–æ–≤—É.</i>\\n\\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.`,\n    button: \"‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ —É–º–æ–≤–∏\"\n  }\n};\n\n// Seleccionar idioma o usar ingl√©s por defecto\nconst msg = messages[lang] || messages.en;\n\n// Construir URL con datos din√°micos\nconst baseUrl = \"https://unimgai-n8n.nmvnem.easypanel.host/webhook/71a93ff3-2453-46c6-be4e-2865af10d1e5\";\n\n// --- L√çNEA MODIFICADA ---\n// Se a√±ade el 'message_id' a la URL\nconst dynamicUrl = `${baseUrl}?user_id=${userId}&username=${encodeURIComponent(username)}&lang=${lang}&message_id=${messageId}`;\n\n// Crear bot√≥n (inline keyboard de Telegram)\nconst replyMarkup = {\n  inline_keyboard: [[\n    { text: msg.button, url: dynamicUrl }\n  ]]\n};\n\n// Retornar a n8n\nreturn [{\n  json: {\n    message: msg.text,\n    parse_mode: \"HTML\",\n    reply_markup: replyMarkup\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2144,
        1136
      ],
      "id": "3bfabccf-6570-48c6-a6e5-06af19356f05",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42325918-7e1e-4749-858a-895664309d89",
              "name": "message.from.id",
              "value": "={{ $json.message.from.id }}",
              "type": "number"
            },
            {
              "id": "db738afe-4c07-4261-89da-214232742935",
              "name": "message.from.first_name",
              "value": "={{ $json.message.from.first_name }}",
              "type": "string"
            },
            {
              "id": "dd7ff3bb-891c-4f83-bc80-c41460c0361e",
              "name": "message.from.username",
              "value": "={{ $json.message.from.username }}",
              "type": "string"
            },
            {
              "id": "afd749b0-8f7f-4a3a-9380-1fe0bc048412",
              "name": "message.from.language_code",
              "value": "={{ $json.message.from.language_code }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2816,
        1040
      ],
      "id": "2d14dd1d-9cbb-414c-a34e-532ea8485973",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "8oKrDcp5sczgB30J",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/j0ScW9j43X1fRnX4/datatables/8oKrDcp5sczgB30J"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.message.from.id }}"
            },
            {
              "keyName": "username",
              "keyValue": "={{ $json.message.from.username }}"
            },
            {
              "keyName": "name",
              "keyValue": "={{ $json.message.from.first_name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2144,
        896
      ],
      "id": "9dc91a80-744b-47f5-8bd4-4baa6727e3b3",
      "name": "Get row(s)1"
    },
    {
      "parameters": {
        "jsCode": "// Obtener datos del usuario\nconst item = $input.first();\nconst lang = item.json.language || 'en';\nconst totalStars = item.json.total_loaded || 0;\n\n// Valores en USD\nconst starValue = 0.013; // USD por estrella\nconst imagePrice = 0.05; // USD por imagen\nconst videoPrice = 0.5;  // USD por video\n\n// Calcular saldo en USD\nconst balanceUSD = totalStars * starValue;\n\n// Calcular cu√°ntas im√°genes y videos puede crear\nconst availableImages = Math.floor(balanceUSD / imagePrice);\nconst availableVideos = Math.floor(balanceUSD / videoPrice);\n\n// Mensajes por idioma\nconst messages = {\n  en: `<b>üë§ Account Information</b>\\n\\n<b>‚≠ê Total Stars:</b> ${totalStars}\\n<b>üíµ Balance:</b> $${balanceUSD.toFixed(2)} USD\\n\\n<b><u>What you can create:</u></b>\\nüñº <b>Images:</b> ${availableImages} images available\\nüé¨ <b>Videos:</b> ${availableVideos} videos available\\n\\n<i>üí° Each image costs $${imagePrice} (‚âà ${Math.ceil(imagePrice / starValue)} stars)</i>\\n<i>üí° Each video costs $${videoPrice} (‚âà ${Math.ceil(videoPrice / starValue)} stars)</i>`,\n  \n  es: `<b>üë§ Informaci√≥n de Cuenta</b>\\n\\n<b>‚≠ê Estrellas Totales:</b> ${totalStars}\\n<b>üíµ Saldo:</b> $${balanceUSD.toFixed(2)} USD\\n\\n<b><u>Lo que puedes crear:</u></b>\\nüñº <b>Im√°genes:</b> ${availableImages} im√°genes disponibles\\nüé¨ <b>Videos:</b> ${availableVideos} videos disponibles\\n\\n<i>üí° Cada imagen cuesta $${imagePrice} (‚âà ${Math.ceil(imagePrice / starValue)} estrellas)</i>\\n<i>üí° Cada video cuesta $${videoPrice} (‚âà ${Math.ceil(videoPrice / starValue)} estrellas)</i>`,\n  \n  ru: `<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</b>\\n\\n<b>‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥:</b> ${totalStars}\\n<b>üíµ –ë–∞–ª–∞–Ω—Å:</b> $${balanceUSD.toFixed(2)} USD\\n\\n<b><u>–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å:</u></b>\\nüñº <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> ${availableImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ\\nüé¨ <b>–í–∏–¥–µ–æ:</b> ${availableVideos} –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ\\n\\n<i>üí° –ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç $${imagePrice} (‚âà ${Math.ceil(imagePrice / starValue)} –∑–≤—ë–∑–¥)</i>\\n<i>üí° –ö–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ —Å—Ç–æ–∏—Ç $${videoPrice} (‚âà ${Math.ceil(videoPrice / starValue)} –∑–≤—ë–∑–¥)</i>`,\n  \n  ar: `<b>üë§ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®</b>\\n\\n<b>‚≠ê ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÜÿ¨ŸàŸÖ:</b> ${totalStars}\\n<b>üíµ ÿßŸÑÿ±ÿµŸäÿØ:</b> $${balanceUSD.toFixed(2)} USD\\n\\n<b><u>ŸÖÿß ŸäŸÖŸÉŸÜŸÉ ÿ•ŸÜÿ¥ÿßÿ§Ÿá:</u></b>\\nüñº <b>ÿßŸÑÿµŸàÿ±:</b> ${availableImages} ÿµŸàÿ±ÿ© ŸÖÿ™ÿßÿ≠ÿ©\\nüé¨ <b>ÿßŸÑŸÅŸäÿØŸäŸà:</b> ${availableVideos} ŸÅŸäÿØŸäŸà ŸÖÿ™ÿßÿ≠\\n\\n<i>üí° ŸÉŸÑ ÿµŸàÿ±ÿ© ÿ™ŸÉŸÑŸÅ $${imagePrice} (‚âà ${Math.ceil(imagePrice / starValue)} ŸÜÿ¨ŸàŸÖ)</i>\\n<i>üí° ŸÉŸÑ ŸÅŸäÿØŸäŸà ŸäŸÉŸÑŸÅ $${videoPrice} (‚âà ${Math.ceil(videoPrice / starValue)} ŸÜÿ¨ŸàŸÖ)</i>`,\n  \n  tr: `<b>üë§ Hesap Bilgileri</b>\\n\\n<b>‚≠ê Toplam Yƒ±ldƒ±z:</b> ${totalStars}\\n<b>üíµ Bakiye:</b> $${balanceUSD.toFixed(2)} USD\\n\\n<b><u>Neler olu≈üturabilirsin:</u></b>\\nüñº <b>G√∂rseller:</b> ${availableImages} g√∂rsel mevcut\\nüé¨ <b>Videolar:</b> ${availableVideos} video mevcut\\n\\n<i>üí° Her g√∂rsel $${imagePrice} (‚âà ${Math.ceil(imagePrice / starValue)} yƒ±ldƒ±z)</i>\\n<i>üí° Her video $${videoPrice} (‚âà ${Math.ceil(videoPrice / starValue)} yƒ±ldƒ±z)</i>`,\n  \n  id: `<b>üë§ Informasi Akun</b>\\n\\n<b>‚≠ê Total Bintang:</b> ${totalStars}\\n<b>üíµ Saldo:</b> $${balanceUSD.toFixed(2)} USD\\n\\n<b><u>Yang bisa kamu buat:</u></b>\\nüñº <b>Gambar:</b> ${availableImages} gambar tersedia\\nüé¨ <b>Video:</b> ${availableVideos} video tersedia\\n\\n<i>üí° Setiap gambar seharga $${imagePrice} (‚âà ${Math.ceil(imagePrice / starValue)} bintang)</i>\\n<i>üí° Setiap video seharga $${videoPrice} (‚âà ${Math.ceil(videoPrice / starValue)} bintang)</i>`,\n};\n\n// Escoger mensaje seg√∫n idioma\nconst message = messages[lang] || messages['en'];\n\n// Retornar datos\nreturn [{\n  json: {\n    language: lang,\n    totalStars,\n    balanceUSD: parseFloat(balanceUSD.toFixed(2)),\n    availableImages,\n    availableVideos,\n    message,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1920,
        896
      ],
      "id": "7196ea04-3db6-4805-a04d-77a451c0b522",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "chatId": "={{ $('Edit Fields').item.json.message.from.id }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1696,
        896
      ],
      "id": "24523cce-937e-42ed-8ba7-4695269d0b32",
      "name": "Send a text message2",
      "webhookId": "d9bffa9f-fb4c-41eb-959e-09f1fd81e61c",
      "credentials": {
        "telegramApi": {
          "id": "E2ITcLBr6y9qgG1Q",
          "name": "unimgai"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a7dfc30c-3e8a-4e51-b757-74b6b8f2290a",
              "leftValue": "={{ $json.message.text }}",
              "rightValue": "/user",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2368,
        944
      ],
      "id": "4fdc0b30-4057-4462-bb62-a6b69d4b16c1",
      "name": "If user accept send welcome massage"
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1472,
        1040
      ],
      "id": "a5bb69a7-dadf-4d3d-af2e-bdda421d83d1",
      "name": "Wait",
      "webhookId": "58cd5b78-6026-44b1-a59a-8d0286bdb061"
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('If1').item.json.result.chat.id }}",
        "messageId": "={{ $('Send a text message').item.json.result.message_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1248,
        1040
      ],
      "id": "a465e62b-c200-4849-a491-6369b4a25328",
      "name": "Delete a chat message",
      "webhookId": "7a98e080-08d6-4604-9b8f-43a306aa68b9",
      "credentials": {
        "telegramApi": {
          "id": "E2ITcLBr6y9qgG1Q",
          "name": "unimgai"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "username",
              "keyValue": "={{ $('Telegram Trigger').item.json.message.text.replace('/start ref_', '') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -1024,
        1040
      ],
      "id": "daf3e9ae-f0e8-46c9-83ad-a6401fefd331",
      "name": "Get row(s)"
    },
    {
      "parameters": {
        "operation": "upsert",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.user_id }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "referrals_made": "={{ $json.referrals_made + 1 }}",
            "user_id": "={{ $json.user_id }}",
            "total_gems_earned": "={{ $json.total_gems_earned + 10 }}",
            "gem_balance": "={{ $json.gem_balance + 10}}",
            "total_loaded": "={{ $json.total_loaded + 10 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "username",
              "displayName": "username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "language",
              "displayName": "language",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "total_gems_earned",
              "displayName": "total_gems_earned",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "total_gems_purchased",
              "displayName": "total_gems_purchased",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "total_gems_spent",
              "displayName": "total_gems_spent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "gem_balance",
              "displayName": "gem_balance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "total_loaded",
              "displayName": "total_loaded",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "referred_by",
              "displayName": "referred_by",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "referrals_made",
              "displayName": "referrals_made",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "terms_and_conditions",
              "displayName": "terms_and_conditions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "blockade",
              "displayName": "blockade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "last_reward",
              "displayName": "last_reward",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -800,
        1040
      ],
      "id": "f1137de5-0620-4c77-9d9d-7157932ca392",
      "name": "Upsert row(s)2"
    },
    {
      "parameters": {
        "jsCode": "// Script para n8n - Calcular costos de planes basado en sistema de cr√©ditos USD\n// Los usuarios compran planes y reciben cr√©ditos (estrellas) para generar contenido\n\n// --- NUEVO: Tasa de conversi√≥n centralizada ---\n// Facilita cambiar la conversi√≥n en un solo lugar si alguna vez var√≠a.\nconst CREDIT_CONVERSION_RATE = 100; // 1 USD = 100 cr√©ditos\n\n// Planes de compra de cr√©ditos\nconst CREDIT_PLANS = [\n  { \n    plan_price_usd: 5,\n    credits_received: 500, // 5 USD * 100 cr√©ditos/USD\n    plan_name: \"Plan B√°sico\"\n  },\n  { \n    plan_price_usd: 15, \n    credits_received: 1500, // 15 USD * 100 cr√©ditos/USD\n    plan_name: \"Plan Est√°ndar\"\n  },\n  { \n    plan_price_usd: 25, \n    credits_received: 2500, // 25 USD * 100 cr√©ditos/USD\n    plan_name: \"Plan Premium\"\n  },\n  { \n    plan_price_usd: 30, \n    credits_received: 3000, // 30 USD * 100 cr√©ditos/USD\n    plan_name: \"Plan Pro\"\n  }\n];\n\n// --- NUEVO: Costos de generaci√≥n en USD (la fuente de la verdad) ---\nconst GENERATION_COSTS_USD = {\n  image: 0.05,   // $0.05 por imagen\n  video: 0.50    // $0.50 por video\n};\n\n// --- MODIFICADO: Costos de generaci√≥n calculados en cr√©ditos ---\n// Ya no est√°n \"endurecidos\", se calculan din√°micamente.\nconst GENERATION_COSTS_CREDITS = {\n  image: GENERATION_COSTS_USD.image * CREDIT_CONVERSION_RATE, // 0.05 * 100 = 5 cr√©ditos\n  video: GENERATION_COSTS_USD.video * CREDIT_CONVERSION_RATE  // 0.50 * 100 = 50 cr√©ditos\n};\n\n\n// Obtener datos de entrada si existen\nconst inputData = $input.first()?.json;\n\n// Variable para almacenar el resultado\nlet result;\n\nif (inputData && inputData.plan_price) {\n  // Calcular para un plan espec√≠fico por precio\n  const plan = CREDIT_PLANS.find(p => p.plan_price_usd === inputData.plan_price);\n  \n  if (!plan) {\n    result = {\n      error: `No se encontr√≥ plan de $${inputData.plan_price} USD`,\n      available_plans: CREDIT_PLANS.map(p => p.plan_price_usd),\n      timestamp: new Date().toISOString(),\n      symbol: 'USD',\n      success: false\n    };\n  } else {\n    // MODIFICADO: Usar los costos calculados en cr√©ditos\n    const maxImages = Math.floor(plan.credits_received / GENERATION_COSTS_CREDITS.image);\n    const maxVideos = Math.floor(plan.credits_received / GENERATION_COSTS_CREDITS.video);\n    \n    result = {\n      symbol: 'USD',\n      calculation_type: 'specific_plan',\n      plan_price_requested: inputData.plan_price,\n      timestamp: new Date().toISOString(),\n      success: true,\n      plan: {\n        plan_name: plan.plan_name,\n        plan_price_usd: plan.plan_price_usd,\n        credits_received: plan.credits_received,\n        // NUEVO: Mostrar la informaci√≥n base para mayor claridad\n        base_costs_usd: GENERATION_COSTS_USD,\n        conversion_rate: `1 USD = ${CREDIT_CONVERSION_RATE} cr√©ditos`,\n        generation_costs_in_credits: GENERATION_COSTS_CREDITS,\n        max_images_possible: maxImages,\n        max_videos_possible: maxVideos,\n        calculations: {\n          credits_per_dollar: plan.credits_received / plan.plan_price_usd,\n          images_calculation: `${plan.credits_received} cr√©ditos √∑ ${GENERATION_COSTS_CREDITS.image} cr√©ditos/imagen = ${maxImages} im√°genes`,\n          videos_calculation: `${plan.credits_received} cr√©ditos √∑ ${GENERATION_COSTS_CREDITS.video} cr√©ditos/video = ${maxVideos} videos`\n        }\n      },\n      summary: {\n        symbol: 'USD',\n        plan_name: plan.plan_name,\n        plan_price_usd: plan.plan_price_usd,\n        credits_received: plan.credits_received,\n        max_images: maxImages,\n        max_videos: maxVideos\n      }\n    };\n  }\n} else {\n  // Calcular todos los planes disponibles\n  const allPlans = [];\n  \n  for (const plan of CREDIT_PLANS) {\n    // MODIFICADO: Usar los costos calculados en cr√©ditos\n    const maxImages = Math.floor(plan.credits_received / GENERATION_COSTS_CREDITS.image);\n    const maxVideos = Math.floor(plan.credits_received / GENERATION_COSTS_CREDITS.video);\n    \n    allPlans.push({\n      plan_name: plan.plan_name,\n      plan_price_usd: plan.plan_price_usd,\n      credits_received: plan.credits_received,\n      // NUEVO: Mostrar la informaci√≥n base para mayor claridad\n      base_costs_usd: GENERATION_COSTS_USD,\n      conversion_rate: `1 USD = ${CREDIT_CONVERSION_RATE} cr√©ditos`,\n      generation_costs_in_credits: GENERATION_COSTS_CREDITS,\n      max_images_possible: maxImages,\n      max_videos_possible: maxVideos,\n      calculations: {\n        credits_per_dollar: plan.credits_received / plan.plan_price_usd,\n        images_calculation: `${plan.credits_received} cr√©ditos √∑ ${GENERATION_COSTS_CREDITS.image} cr√©ditos/imagen = ${maxImages} im√°genes`,\n        videos_calculation: `${plan.credits_received} cr√©ditos √∑ ${GENERATION_COSTS_CREDITS.video} cr√©ditos/video = ${maxVideos} videos`\n      }\n    });\n  }\n  \n  result = {\n    symbol: 'USD',\n    calculation_type: 'all_plans',\n    plans_info: {\n      success: true,\n      // NUEVO: Mostrar la informaci√≥n base para mayor claridad\n      base_costs_usd: GENERATION_COSTS_USD,\n      conversion_rate: `1 USD = ${CREDIT_CONVERSION_RATE} cr√©ditos`,\n      generation_costs_in_credits: GENERATION_COSTS_CREDITS,\n      total_plans: CREDIT_PLANS.length,\n      timestamp: new Date().toISOString()\n    },\n    timestamp: new Date().toISOString(),\n    success: true,\n    plans: allPlans,\n    summary: {\n      symbol: 'USD',\n      total_plans: allPlans.length,\n      conversion_rate: `1 USD = ${CREDIT_CONVERSION_RATE} cr√©ditos`,\n      generation_costs_in_credits: GENERATION_COSTS_CREDITS,\n      available_plan_prices: CREDIT_PLANS.map(p => p.plan_price_usd)\n    }\n  };\n}\n\n// Retornar el resultado\nreturn [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2816,
        1680
      ],
      "id": "25858437-b939-4b76-8fd0-0a2e35cbae20",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1696,
        1904
      ],
      "id": "649c3743-54aa-40f7-bcd7-d3d92cb1afc7",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>unimgai - Dashboard</title>\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üé®</text></svg>\">\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        :root {\n            --bg-primary: #0F0E11;\n            --text-primary: #E3E3E3;\n            --color-primary: #E61E85;\n            --color-secondary: #0F2D5C;\n            --surface: #1A191C;\n            --text-muted: #BFBFBF;\n            --success: #4CAF50;\n            --warning: #FF9800;\n            --error: #F44336;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background: linear-gradient(135deg, var(--bg-primary) 0%, #1a1a1f 100%);\n            color: var(--text-primary);\n            min-height: 100vh;\n            overflow-x: hidden;\n            position: relative;\n        }\n\n        /* Custom Scrollbar Styles */\n        ::-webkit-scrollbar {\n            width: 12px;\n            height: 12px;\n        }\n\n        ::-webkit-scrollbar-track {\n            background: rgba(15, 14, 17, 0.5);\n            border-radius: 10px;\n            border: 1px solid rgba(230, 30, 133, 0.1);\n        }\n\n        ::-webkit-scrollbar-thumb {\n            background: linear-gradient(180deg, #E61E85 0%, #B01567 100%);\n            border-radius: 10px;\n            border: 2px solid rgba(15, 14, 17, 0.5);\n            box-shadow: 0 0 10px rgba(230, 30, 133, 0.3);\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n            background: linear-gradient(180deg, #FF2E95 0%, #C01577 100%);\n            box-shadow: 0 0 15px rgba(230, 30, 133, 0.5);\n        }\n\n        ::-webkit-scrollbar-thumb:active {\n            background: linear-gradient(180deg, #D01E75 0%, #A01557 100%);\n        }\n\n        /* Firefox Scrollbar */\n        * {\n            scrollbar-width: thin;\n            scrollbar-color: #E61E85 rgba(15, 14, 17, 0.5);\n        }\n\n        /* Animated background lights */\n        .particles {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            z-index: 1;\n            overflow: hidden;\n        }\n\n        .diffused-light {\n            position: absolute;\n            border-radius: 50%;\n            filter: blur(60px);\n            opacity: 0.15;\n            animation: floatLight 20s infinite ease-in-out;\n        }\n\n        .diffused-light.small {\n            width: 150px;\n            height: 150px;\n        }\n\n        .diffused-light.medium {\n            width: 250px;\n            height: 250px;\n        }\n\n        .diffused-light.large {\n            width: 350px;\n            height: 350px;\n        }\n\n        @keyframes floatLight {\n            0%, 100% {\n                transform: translate(0, 0) scale(1);\n                opacity: 0.1;\n            }\n            25% {\n                transform: translate(150px, -80px) scale(1.2);\n                opacity: 0.2;\n            }\n            50% {\n                transform: translate(-100px, 120px) scale(0.8);\n                opacity: 0.15;\n            }\n            75% {\n                transform: translate(80px, 60px) scale(1.1);\n                opacity: 0.25;\n            }\n        }\n\n        /* Loading screen */\n        .loading-screen {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: var(--bg-primary);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            transition: opacity 0.8s ease, visibility 0.8s ease;\n        }\n\n        .loading-screen.hidden {\n            opacity: 0;\n            visibility: hidden;\n        }\n\n        .logo-loader {\n            width: 120px;\n            height: 120px;\n            position: relative;\n            animation: logoFloat 4s ease-in-out infinite;\n        }\n\n        .logo-loader img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            border-radius: 50%;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.6));\n            animation: logoGlow 3s ease-in-out infinite alternate;\n        }\n\n        @keyframes logoFloat {\n            0%, 100% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            25% {\n                transform: translateY(-10px) rotate(5deg);\n            }\n            50% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            75% {\n                transform: translateY(-5px) rotate(-5deg);\n            }\n        }\n\n        @keyframes logoGlow {\n            0% {\n                filter: drop-shadow(0 0 20px rgba(230, 30, 133, 0.4));\n            }\n            100% {\n                filter: drop-shadow(0 0 40px rgba(230, 30, 133, 0.8));\n            }\n        }\n\n        .loading-text {\n            margin-top: 30px;\n            font-size: 18px;\n            color: var(--text-muted);\n            animation: pulse 1.5s ease-in-out infinite;\n        }\n\n        @keyframes pulse {\n            0%, 100% {\n                opacity: 0.5;\n            }\n            50% {\n                opacity: 1;\n            }\n        }\n\n        /* Header */\n        .header {\n            background: rgba(26, 25, 28, 0.95);\n            backdrop-filter: blur(15px);\n            border-bottom: 2px solid rgba(230, 30, 133, 0.3);\n            padding: 25px 0;\n            position: sticky;\n            top: 0;\n            z-index: 100;\n            animation: slideDown 0.8s ease;\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n        }\n\n        @keyframes slideDown {\n            from {\n                opacity: 0;\n                transform: translateY(-20px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        .header-content {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 0 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .logo {\n            width: 70px;\n            height: 70px;\n            position: relative;\n            animation: mainLogoFloat 6s ease-in-out infinite;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.7));\n        }\n\n        .logo img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            border-radius: 50%;\n            filter: drop-shadow(0 0 30px rgba(230, 30, 133, 0.5));\n            animation: mainLogoGlow 4s ease-in-out infinite alternate;\n        }\n\n        @keyframes mainLogoFloat {\n            0%, 100% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            25% {\n                transform: translateY(-8px) rotate(3deg);\n            }\n            50% {\n                transform: translateY(0px) rotate(0deg);\n            }\n            75% {\n                transform: translateY(-4px) rotate(-3deg);\n            }\n        }\n\n        @keyframes mainLogoGlow {\n            0% {\n                filter: drop-shadow(0 0 15px rgba(230, 30, 133, 0.3));\n            }\n            100% {\n                filter: drop-shadow(0 0 35px rgba(230, 30, 133, 0.7));\n            }\n        }\n\n        .user-info {\n            display: flex;\n            align-items: center;\n            gap: 18px;\n        }\n\n        .user-avatar {\n            width: 45px;\n            height: 45px;\n            border-radius: 50%;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            color: white;\n            font-size: 18px;\n            box-shadow: 0 0 20px rgba(230, 30, 133, 0.4);\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .user-avatar:hover {\n            transform: scale(1.1);\n            box-shadow: 0 0 25px rgba(230, 30, 133, 0.6);\n        }\n\n        .user-details h3 {\n            font-size: 16px;\n            font-weight: 600;\n            margin-bottom: 2px;\n        }\n\n        .user-credits {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            font-size: 14px;\n            color: var(--color-primary);\n            font-weight: 600;\n        }\n\n        .credits-star {\n            width: 20px;\n            height: 20px;\n            background-image: url('https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000');\n            background-size: contain;\n            background-repeat: no-repeat;\n            background-position: center;\n            filter: drop-shadow(0 0 4px rgba(255, 215, 0, 0.6));\n        }\n\n        .user-details p {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        /* Main container */\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 40px 20px;\n            position: relative;\n            z-index: 10;\n        }\n\n        /* Stats grid */\n        .stats-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.2s both;\n        }\n\n        @keyframes fadeInUp {\n            from {\n                opacity: 0;\n                transform: translateY(30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        .stat-card {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 25px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .stat-card::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 3px;\n            background: linear-gradient(90deg, var(--color-primary), #ff4081);\n        }\n\n        .stat-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 15px 40px rgba(230, 30, 133, 0.2);\n        }\n\n        .stat-icon {\n            width: 50px;\n            height: 50px;\n            border-radius: 12px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 24px;\n            margin-bottom: 15px;\n        }\n\n        .stat-icon.credits {\n            background: linear-gradient(135deg, #4CAF50, #45a049);\n        }\n\n        .stat-icon.videos {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n        }\n\n        .stat-icon.storage {\n            background: linear-gradient(135deg, #2196F3, #1976D2);\n        }\n\n        .stat-icon.api {\n            background: linear-gradient(135deg, #FF9800, #F57C00);\n        }\n\n        .stat-value {\n            font-size: 28px;\n            font-weight: bold;\n            margin-bottom: 5px;\n            background: linear-gradient(135deg, var(--text-primary), var(--color-primary));\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-clip: text;\n        }\n\n        .stat-label {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        /* Creator Tabs */\n        .creator-tabs {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 30px;\n            animation: fadeInUp 1s ease 0.3s both;\n        }\n\n        .tab-btn {\n            background: rgba(26, 25, 28, 0.8);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            border-radius: 50px;\n            padding: 12px 24px;\n            color: var(--text-muted);\n            font-size: 14px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            backdrop-filter: blur(10px);\n        }\n\n        .tab-btn:hover {\n            border-color: var(--color-primary);\n            color: var(--color-primary);\n            transform: translateY(-2px);\n        }\n\n        .tab-btn.active {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            border-color: var(--color-primary);\n            color: white;\n            box-shadow: 0 5px 20px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Creator Sections */\n        .creator-section {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.4s both;\n            display: none;\n        }\n\n        .creator-section.active {\n            display: block;\n        }\n\n        .image-creator .section-title::before {\n            content: 'üñºÔ∏è';\n        }\n\n        .image-editor .section-title::before {\n            content: '‚úèÔ∏è';\n        }\n\n        /* Daily Reward Button */\n        .daily-reward-btn {\n            background: linear-gradient(135deg, #FFD700, #FFA500);\n            color: #000;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 24px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);\n            position: relative;\n            overflow: hidden;\n        }\n\n        .daily-reward-btn::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n            transition: left 0.5s ease;\n        }\n\n        .daily-reward-btn:hover::before {\n            left: 100%;\n        }\n\n        .daily-reward-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);\n        }\n\n        .daily-reward-btn.claimed {\n            background: linear-gradient(135deg, #666, #444);\n            color: #fff;\n            cursor: not-allowed;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n        }\n\n        .reward-icon {\n            font-size: 18px;\n        }\n\n        .reward-text {\n            font-size: 13px;\n        }\n\n        /* unimgai Stars Plans Modal */\n        .credits-modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.8);\n            backdrop-filter: blur(10px);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1001;\n            opacity: 0;\n            visibility: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .credits-modal.show {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .credits-modal-content {\n            background: var(--surface);\n            border-radius: 20px;\n            padding: 40px;\n            border: 2px solid #FFD700;\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n            max-width: 800px;\n            width: 90%;\n            max-height: 90vh;\n            overflow-y: auto;\n            transform: scale(0.9);\n            transition: transform 0.3s ease;\n        }\n\n        .credits-modal.show .credits-modal-content {\n            transform: scale(1);\n        }\n\n        .credits-modal-header {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        .credits-modal-title {\n            font-size: 28px;\n            font-weight: 600;\n            color: #FFD700;\n            margin-bottom: 10px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 10px;\n        }\n\n        .credits-modal-subtitle {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .daily-reward-section {\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 20px;\n            margin-bottom: 30px;\n            text-align: center;\n        }\n\n        .daily-reward-title {\n            font-size: 20px;\n            font-weight: 600;\n            color: #FFD700;\n            margin-bottom: 15px;\n        }\n\n        .claim-reward-btn {\n            background: linear-gradient(135deg, #FFD700, #FFA500);\n            color: #000;\n            border: none;\n            border-radius: 50px;\n            padding: 15px 30px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n            max-width: 300px;\n        }\n\n        .claim-reward-btn:hover:not(:disabled) {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);\n        }\n\n        .claim-reward-btn:disabled {\n            background: linear-gradient(135deg, #666, #444);\n            color: #fff;\n            cursor: not-allowed;\n        }\n\n        .reward-status {\n            margin-top: 10px;\n            font-size: 14px;\n            color: var(--text-muted);\n        }\n\n        .credits-plans {\n            margin-top: 30px;\n        }\n\n        .plans-title {\n            font-size: 22px;\n            font-weight: 600;\n            color: var(--text-primary);\n            margin-bottom: 20px;\n            text-align: center;\n        }\n\n        .plans-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n\n        .plan-card {\n            background: rgba(0, 0, 0, 0.3);\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 25px;\n            text-align: center;\n            transition: all 0.3s ease;\n            position: relative;\n        }\n\n        .plan-card:hover {\n            border-color: #FFD700;\n            transform: translateY(-5px);\n            box-shadow: 0 10px 30px rgba(255, 215, 0, 0.2);\n        }\n\n        .plan-card.popular {\n            border-color: #FFD700;\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n        }\n\n        .popular-badge {\n            position: absolute;\n            top: -10px;\n            right: 20px;\n            background: #FFD700;\n            color: #000;\n            padding: 5px 15px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n        }\n\n        .plan-credits {\n            font-size: 36px;\n            font-weight: bold;\n            color: #FFD700;\n            margin-bottom: 5px;\n        }\n\n        .plan-price {\n            font-size: 24px;\n            font-weight: 600;\n            color: var(--text-primary);\n            margin-bottom: 15px;\n        }\n\n        .plan-description {\n            font-size: 14px;\n            color: var(--text-muted);\n            margin-bottom: 20px;\n        }\n\n        .plan-details {\n            background: rgba(255, 255, 255, 0.05);\n            border-radius: 10px;\n            padding: 15px;\n            margin-bottom: 20px;\n            text-align: left;\n        }\n\n        .plan-detail-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 8px;\n            font-size: 12px;\n        }\n\n        .plan-detail-row:last-child {\n            margin-bottom: 0;\n        }\n\n        .plan-detail-label {\n            color: var(--text-muted);\n        }\n\n        .plan-detail-value {\n            color: var(--text-primary);\n            font-weight: 600;\n        }\n\n        .buy-plan-btn {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 25px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n        }\n\n        .buy-plan-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(230, 30, 133, 0.3);\n        }\n\n        .telegram-info {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 15px;\n            margin-top: 20px;\n            text-align: center;\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        .close-credits-btn {\n            background: rgba(255, 255, 255, 0.1);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            color: var(--text-primary);\n            border-radius: 50px;\n            padding: 12px 30px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n            margin-top: 20px;\n        }\n\n        .close-credits-btn:hover {\n            background: rgba(255, 255, 255, 0.2);\n        }\n\n        /* Loading spinner for plans */\n        .plans-loading {\n            text-align: center;\n            padding: 40px;\n        }\n\n        .spinner {\n            display: inline-block;\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(255, 215, 0, 0.1);\n            border-top: 4px solid #FFD700;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n            margin-bottom: 20px;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        .loading-text {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        /* Error message */\n        .error-message {\n            background: rgba(244, 67, 54, 0.1);\n            border: 2px solid rgba(244, 67, 54, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            text-align: center;\n            color: var(--error);\n            margin: 20px 0;\n        }\n\n        /* Major price info */\n        .major-price-info {\n            background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.05));\n            border: 2px solid rgba(255, 215, 0, 0.3);\n            border-radius: 15px;\n            padding: 20px;\n            margin-bottom: 30px;\n            text-align: center;\n        }\n\n        /* User Data Modal */\n        .user-modal {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.8);\n            backdrop-filter: blur(10px);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            opacity: 0;\n            visibility: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .user-modal.show {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .modal-content {\n            background: var(--surface);\n            border-radius: 20px;\n            padding: 40px;\n            border: 2px solid var(--color-primary);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n            max-width: 500px;\n            width: 90%;\n            transform: scale(0.9);\n            transition: transform 0.3s ease;\n        }\n\n        .user-modal.show .modal-content {\n            transform: scale(1);\n        }\n\n        .modal-header {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        .modal-avatar {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 32px;\n            font-weight: bold;\n            color: white;\n            margin: 0 auto 20px;\n        }\n\n        .modal-title {\n            font-size: 24px;\n            font-weight: 600;\n            color: var(--color-primary);\n            margin-bottom: 5px;\n        }\n\n        .modal-subtitle {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .modal-stats {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n\n        .modal-stat {\n            text-align: center;\n            padding: 15px;\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n        }\n\n        .modal-stat-value {\n            font-size: 20px;\n            font-weight: bold;\n            color: var(--color-primary);\n            margin-bottom: 5px;\n        }\n\n        .modal-stat-label {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        .modal-info {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n\n        .info-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 10px;\n        }\n\n        .info-row:last-child {\n            margin-bottom: 0;\n        }\n\n        .info-label {\n            color: var(--text-muted);\n            font-size: 14px;\n        }\n\n        .info-value {\n            color: var(--text-primary);\n            font-weight: 500;\n            font-size: 14px;\n        }\n\n        .close-modal-btn {\n            background: var(--color-primary);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 12px 30px;\n            font-size: 14px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n        }\n\n        .close-modal-btn:hover {\n            transform: scale(1.05);\n            box-shadow: 0 10px 30px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Video creator section */\n        .video-creator {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            margin-bottom: 40px;\n            animation: fadeInUp 1s ease 0.4s both;\n        }\n\n        .section-title {\n            font-size: 24px;\n            font-weight: 600;\n            margin-bottom: 20px;\n            color: var(--color-primary);\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n\n        .section-title::before {\n            content: 'üé¨';\n            font-size: 28px;\n        }\n\n        .video-form {\n            display: grid;\n            gap: 20px;\n        }\n\n        .form-group {\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n        }\n\n        .form-group label {\n            font-weight: 500;\n            color: var(--text-primary);\n        }\n\n        .form-group input,\n        .form-group textarea {\n            background: rgba(0, 0, 0, 0.3);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            border-radius: 10px;\n            padding: 12px 15px;\n            color: var(--text-primary);\n            font-size: 14px;\n            transition: all 0.3s ease;\n        }\n\n        .form-group input:focus,\n        .form-group textarea:focus {\n            outline: none;\n            border-color: var(--color-primary);\n            box-shadow: 0 0 0 3px rgba(230, 30, 133, 0.1);\n        }\n\n        /* Improved select styling */\n        .form-group select {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.1), rgba(255, 64, 129, 0.05));\n            border: 2px solid rgba(230, 30, 133, 0.4);\n            border-radius: 12px;\n            padding: 12px 15px;\n            color: var(--text-primary);\n            font-size: 14px;\n            font-weight: 500;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            appearance: none;\n            background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23E61E85' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\");\n            background-repeat: no-repeat;\n            background-position: right 12px center;\n            background-size: 20px;\n            padding-right: 45px;\n            position: relative;\n        }\n\n        .form-group select:hover {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.15), rgba(255, 64, 129, 0.08));\n            border-color: rgba(230, 30, 133, 0.6);\n            transform: translateY(-1px);\n            box-shadow: 0 4px 12px rgba(230, 30, 133, 0.2);\n        }\n\n        .form-group select:focus {\n            outline: none;\n            border-color: var(--color-primary);\n            box-shadow: 0 0 0 3px rgba(230, 30, 133, 0.2), 0 4px 12px rgba(230, 30, 133, 0.3);\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.2), rgba(255, 64, 129, 0.1));\n        }\n\n        .form-group select option {\n            background: var(--surface);\n            color: var(--text-primary);\n            padding: 10px;\n            border: none;\n            font-weight: 500;\n        }\n\n        .form-group select option:hover {\n            background: rgba(230, 30, 133, 0.2);\n        }\n\n        .form-group textarea {\n            resize: vertical;\n            min-height: 100px;\n        }\n\n        .form-row {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n        }\n\n        .create-btn {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 15px 40px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n            position: relative;\n            overflow: hidden;\n            margin-top: 10px;\n        }\n\n        .create-btn::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 0;\n            height: 0;\n            border-radius: 50%;\n            background: rgba(255, 255, 255, 0.1);\n            transform: translate(-50%, -50%);\n            transition: width 0.6s ease, height 0.6s ease;\n        }\n\n        .create-btn:hover::before {\n            width: 300px;\n            height: 300px;\n        }\n\n        .create-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 10px 30px rgba(230, 30, 133, 0.3);\n        }\n\n        .create-btn:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n            transform: none;\n        }\n\n        .image-upload-area {\n            border: 2px dashed rgba(230, 30, 133, 0.3);\n            border-radius: 10px;\n            padding: 20px;\n            text-align: center;\n            cursor: pointer;\n            position: relative;\n            transition: all 0.3s ease;\n        }\n\n        .image-upload-area:hover {\n            border-color: var(--color-primary);\n        }\n\n        .image-upload-input {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            opacity: 0;\n            cursor: pointer;\n        }\n\n        .image-upload-hint {\n            color: var(--text-muted);\n        }\n\n        .image-preview {\n            margin-top: 15px;\n            position: relative;\n            display: inline-block;\n        }\n\n        .preview-img {\n            max-width: 100%;\n            max-height: 150px;\n            border-radius: 10px;\n        }\n\n        .delete-btn {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background: rgba(0, 0, 0, 0.7);\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 25px;\n            height: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        /* Multiple images preview styles */\n        .image-previews-container {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n            gap: 10px;\n            margin-top: 15px;\n        }\n\n        .image-preview-item {\n            position: relative;\n            border-radius: 10px;\n            overflow: hidden;\n            background: rgba(0, 0, 0, 0.2);\n        }\n\n        .image-preview-item img {\n            width: 100%;\n            height: 120px;\n            object-fit: cover;\n            border-radius: 10px;\n        }\n\n        .image-preview-item .delete-btn {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background: rgba(244, 67, 54, 0.9);\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 25px;\n            height: 25px;\n            font-size: 16px;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n        }\n\n        .image-counter {\n            font-size: 12px;\n            color: var(--text-muted);\n            margin-top: 10px;\n        }\n\n        .image-counter.warning {\n            color: var(--warning);\n        }\n\n        .image-counter.error {\n            color: var(--error);\n        }\n\n        .seed-input-group {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n\n        .seed-input-group input {\n            flex: 1;\n        }\n\n        .refresh-btn {\n            background: rgba(0, 0, 0, 0.3);\n            border: 1px solid rgba(230, 30, 133, 0.3);\n            color: var(--text-primary);\n            border-radius: 10px;\n            padding: 10px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .refresh-btn:hover {\n            border-color: var(--color-primary);\n        }\n\n        .form-actions {\n            display: flex;\n            justify-content: flex-end;\n            gap: 15px;\n            margin-top: 20px;\n        }\n\n        .reset-btn {\n            background: rgba(255, 255, 255, 0.1);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            color: var(--text-primary);\n            border-radius: 50px;\n            padding: 15px 40px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .reset-btn:hover {\n            background: rgba(255, 255, 255, 0.2);\n        }\n\n        /* Recent videos */\n        .recent-videos {\n            background: rgba(26, 25, 28, 0.8);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 30px;\n            border: 1px solid rgba(230, 30, 133, 0.2);\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n            animation: fadeInUp 1s ease 0.6s both;\n        }\n\n        .videos-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n            gap: 20px;\n            margin-top: 20px;\n        }\n\n        .video-card {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 15px;\n            overflow: hidden;\n            transition: transform 0.3s ease;\n            cursor: pointer;\n        }\n\n        .video-card:hover {\n            transform: scale(1.05);\n        }\n\n        .video-thumbnail {\n            width: 100%;\n            height: 120px;\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 48px;\n        }\n\n        .video-info {\n            padding: 15px;\n        }\n\n        .video-title {\n            font-weight: 600;\n            margin-bottom: 5px;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n\n        .video-date {\n            font-size: 12px;\n            color: var(--text-muted);\n        }\n\n        /* Loading spinner */\n        .spinner {\n            display: none;\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(230, 30, 133, 0.1);\n            border-top: 4px solid var(--color-primary);\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n            margin: 20px auto;\n        }\n\n        .spinner.show {\n            display: block;\n        }\n\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n        /* Dimensions Preview */\n        .dimensions-preview {\n            background: linear-gradient(135deg, rgba(230, 30, 133, 0.1), rgba(255, 64, 129, 0.05));\n            border: 2px solid rgba(230, 30, 133, 0.3);\n            border-radius: 12px;\n            padding: 15px 20px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            transition: all 0.3s ease;\n        }\n\n        .dimensions-preview:hover {\n            border-color: rgba(230, 30, 133, 0.5);\n            transform: translateY(-1px);\n            box-shadow: 0 4px 12px rgba(230, 30, 133, 0.15);\n        }\n\n        .dimension-info {\n            font-weight: 600;\n            color: var(--text-primary);\n            font-size: 14px;\n        }\n\n        .dimension-price {\n            background: linear-gradient(135deg, var(--color-primary), #ff4081);\n            color: white;\n            padding: 6px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            box-shadow: 0 2px 8px rgba(230, 30, 133, 0.3);\n        }\n\n        /* Toast notification */\n        .toast {\n            position: fixed;\n            bottom: 30px;\n            right: 30px;\n            background: var(--surface);\n            padding: 15px 20px;\n            border-radius: 10px;\n            border-left: 4px solid var(--color-primary);\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n            transform: translateX(400px);\n            transition: transform 0.3s ease;\n            z-index: 1000;\n            max-width: 300px;\n        }\n\n        .toast.show {\n            transform: translateX(0);\n        }\n\n        .toast.success {\n            border-left-color: var(--success);\n        }\n\n        .toast.error {\n            border-left-color: var(--error);\n        }\n\n        .toast-title {\n            font-weight: 600;\n            margin-bottom: 5px;\n        }\n\n        .toast-message {\n            font-size: 14px;\n            color: var(--text-muted);\n        }\n\n        /* Responsive */\n        @media (max-width: 768px) {\n            .header {\n                padding: 15px 0;\n            }\n\n            .header-content {\n                flex-direction: row;\n                justify-content: space-between;\n                align-items: center;\n                padding: 0 20px;\n            }\n\n            .logo {\n                width: 60px;\n                height: 60px;\n            }\n\n            .user-info {\n                gap: 10px;\n            }\n\n            .user-details {\n                text-align: left;\n            }\n\n            .user-details h3 {\n                font-size: 18px;\n                margin-bottom: 5px;\n            }\n\n            .user-credits {\n                justify-content: center;\n                font-size: 16px;\n                margin-bottom: 5px;\n            }\n\n            .user-details p {\n                display: none;\n            }\n\n            .form-row {\n                grid-template-columns: 1fr;\n            }\n\n            .stats-grid {\n                grid-template-columns: 1fr;\n            }\n\n            .videos-grid {\n                grid-template-columns: 1fr;\n            }\n\n            .container {\n                padding: 30px 15px;\n            }\n\n            .creator-tabs {\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: center;\n                gap: 8px;\n            }\n\n            .tab-btn {\n                padding: 8px 16px;\n                font-size: 13px;\n            }\n\n            .creator-section {\n                padding: 25px 20px;\n                margin-bottom: 30px;\n            }\n\n            .section-title {\n                font-size: 20px;\n            }\n\n            .create-btn {\n                padding: 12px 24px;\n                font-size: 15px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .header {\n                padding: 15px 0;\n            }\n\n            .header-content {\n                padding: 0 15px;\n            }\n\n            .logo {\n                width: 50px;\n                height: 50px;\n            }\n\n            .user-avatar {\n                width: 40px;\n                height: 40px;\n                font-size: 16px;\n            }\n\n            .user-details h3 {\n                font-size: 14px;\n            }\n\n            .user-credits {\n                font-size: 12px;\n            }\n\n            .user-details p {\n                display: none;\n            }\n\n            .container {\n                padding: 20px 10px;\n            }\n\n            .creator-section {\n                padding: 20px 15px;\n            }\n\n            .section-title {\n                font-size: 18px;\n            }\n\n            .create-btn {\n                padding: 12px 20px;\n                font-size: 14px;\n            }\n\n            .tab-btn {\n                padding: 8px 12px;\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <!-- Loading Screen -->\n    <div class=\"loading-screen\" id=\"loadingScreen\">\n        <div class=\"logo-loader\">\n            <img src=\"https://lh3.googleusercontent.com/d/1wz9VTIXLaeBmCDupXTU_u8hA7N73HBNl=w1000\" alt=\"unimgai\">\n        </div>\n        <div class=\"loading-text\">Loading Dashboard...</div>\n    </div>\n\n    <!-- Particles Background -->\n    <div class=\"particles\" id=\"particles\"></div>\n\n    <!-- Header -->\n    <header class=\"header\">\n        <div class=\"header-content\">\n            <div class=\"logo\">\n                <img src=\"https://lh3.googleusercontent.com/d/1wz9VTIXLaeBmCDupXTU_u8hA7N73HBNl=w1000\" alt=\"unimgai\">\n            </div>\n            <div class=\"user-info\">\n                <button class=\"daily-reward-btn\" id=\"dailyRewardBtn\" onclick=\"openCreditsModal()\">\n                    <span class=\"reward-icon\">üéÅ</span>\n                    <span class=\"reward-text\">Daily Gift</span>\n                </button>\n                <div class=\"user-avatar\" id=\"userAvatar\">U</div>\n                <div class=\"user-details\">\n                    <h3 id=\"userName\">User</h3>\n                    <div class=\"user-credits\" id=\"headerCredits\">150 ‚≠ê</div>\n                    <p id=\"userStatus\">Active</p>\n                </div>\n            </div>\n        </div>\n    </header>\n\n    <!-- Main Container -->\n    <main class=\"container\">\n        <!-- Creator Tabs -->\n\n        <!-- Creator Tabs -->\n        <div class=\"creator-tabs\">\n            <button class=\"tab-btn active\" data-tab=\"video\">üé¨ Create Video</button>\n            <button class=\"tab-btn\" data-tab=\"image\">üñºÔ∏è Create Image</button>\n            <button class=\"tab-btn\" data-tab=\"edit\">‚úèÔ∏è Edit Image</button>\n        </div>\n\n        <!-- Video Creator Section -->\n        <div class=\"creator-section video-creator active\" id=\"video-section\">\n            <h2 class=\"section-title\">Create New Video</h2>\n            <form class=\"video-form\" id=\"videoForm\">\n                <div class=\"form-group\">\n                    <label for=\"videoPrompt\">Prompt</label>\n                    <textarea id=\"videoPrompt\" name=\"videoPrompt\" placeholder=\"Use the reference image as the main subject...\"></textarea>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"videoImage\">Image</label>\n                    <div class=\"image-upload-area\" id=\"imageUploadArea\">\n                        <input type=\"file\" id=\"videoImage\" name=\"videoImage\" accept=\"image/*\" class=\"image-upload-input\">\n                        <div class=\"image-upload-content\">\n                            <span class=\"image-upload-hint\">You can drag and drop a file or click to upload</span>\n                            <div class=\"image-preview\" id=\"imagePreview\" style=\"display: none;\">\n                                <img src=\"\" alt=\"Image Preview\" class=\"preview-img\">\n                                <button type=\"button\" class=\"delete-btn\" id=\"deleteBtn\">&times;</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"createVideoBtn\">\n                        ‚≠ê 50\n                    </button>\n                </div>\n            </form>\n            <div class=\"spinner\" id=\"videoSpinner\"></div>\n        </div>\n\n        <!-- Image Creator Section -->\n        <div class=\"creator-section image-creator\" id=\"image-section\">\n            <h2 class=\"section-title\">Create New Image</h2>\n            <form class=\"image-form\" id=\"imageForm\">\n                <div class=\"form-group\">\n                    <label for=\"imagePrompt\">Image Prompt</label>\n                    <textarea id=\"imagePrompt\" name=\"imagePrompt\" placeholder=\"Describe the image you want to create...\" required></textarea>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"imageAspectRatio\">Aspect Ratio</label>\n                        <select id=\"imageAspectRatio\" name=\"imageAspectRatio\" onchange=\"updateImageCost()\">\n                            <option value=\"1:1\">üì± 1:1 Instagram</option>\n                            <option value=\"3:2\">üì∑ 3:2 Photography</option>\n                            <option value=\"4:3\">üì∫ 4:3 Classic</option>\n                            <option value=\"16:9\">üñ•Ô∏è 16:9 YouTube</option>\n                            <option value=\"21:9\">üé¨ 21:9 Cinema</option>\n                            <option value=\"9:16\">üì± 9:16 YouTube Shorts</option>\n                            <option value=\"2:3\">üì± 2:3 Portrait</option>\n                            <option value=\"3:4\">üì± 3:4 Portrait</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"imageQuantity\">Number of Images</label>\n                        <input type=\"number\" id=\"imageQuantity\" name=\"imageQuantity\" min=\"1\" max=\"10\" value=\"1\" onchange=\"updateImageCost()\">\n                    </div>\n                </div>\n                \n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"createImageBtn\">\n                        ‚≠ê 5\n                    </button>\n                </div>\n            </form>\n            \n            <div class=\"spinner\" id=\"imageSpinner\"></div>\n        </div>\n\n        <!-- Image Editor Section -->\n        <div class=\"creator-section image-editor\" id=\"edit-section\">\n            <h2 class=\"section-title\">Edit Image</h2>\n            <form class=\"edit-form\" id=\"editForm\">\n                <div class=\"form-group\">\n                    <label for=\"editPrompt\">Edit Instructions</label>\n                    <textarea id=\"editPrompt\" name=\"editPrompt\" placeholder=\"Describe how you want to edit the images...\" required></textarea>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"editImages\">Upload Images (Up to 10)</label>\n                    <div class=\"image-upload-area\" id=\"editImageUploadArea\">\n                        <input type=\"file\" id=\"editImages\" name=\"editImages\" accept=\"image/*\" multiple class=\"image-upload-input\">\n                        <div class=\"image-upload-content\">\n                            <span class=\"image-upload-hint\">You can drag and drop files or click to upload (Maximum 10 images)</span>\n                            <div class=\"image-previews-container\" id=\"editImagePreviews\" style=\"display: none;\">\n                                <div class=\"image-preview\" id=\"editImagePreview\" style=\"display: none;\">\n                                    <img src=\"\" alt=\"Image Preview\" class=\"preview-img\">\n                                    <button type=\"button\" class=\"delete-btn\" id=\"editDeleteBtn\">&times;</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"image-counter\" id=\"imageCounter\" style=\"margin-top: 10px; color: var(--text-muted); font-size: 12px;\">\n                        0 / 10 images uploaded\n                    </div>\n                </div>\n                \n                <div class=\"form-row\">\n                    <div class=\"form-group\">\n                        <label for=\"editAspectRatio\">Aspect Ratio</label>\n                        <select id=\"editAspectRatio\" name=\"editAspectRatio\" onchange=\"updateEditCost()\">\n                            <option value=\"1:1\">üì± 1:1 Instagram</option>\n                            <option value=\"3:2\">üì∑ 3:2 Photography</option>\n                            <option value=\"4:3\">üì∫ 4:3 Classic</option>\n                            <option value=\"16:9\">üñ•Ô∏è 16:9 YouTube</option>\n                            <option value=\"21:9\">üé¨ 21:9 Cinema</option>\n                            <option value=\"9:16\">üì± 9:16 YouTube Shorts</option>\n                            <option value=\"2:3\">üì± 2:3 Portrait</option>\n                            <option value=\"3:4\">üì± 3:4 Portrait</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"editQuantity\">Number of Images per Upload</label>\n                        <input type=\"number\" id=\"editQuantity\" name=\"editQuantity\" min=\"1\" max=\"10\" value=\"1\" onchange=\"updateEditCost()\">\n                    </div>\n                </div>\n                \n                <div class=\"form-actions\">\n                    <button type=\"reset\" class=\"reset-btn\">Reset</button>\n                    <button type=\"submit\" class=\"create-btn\" id=\"editImageBtn\">\n                        ‚≠ê 5\n                    </button>\n                </div>\n            </form>\n            \n            <div class=\"spinner\" id=\"editSpinner\"></div>\n        </div>\n\n    </main>\n\n    <!-- Credits Plans Modal -->\n    <div class=\"credits-modal\" id=\"creditsModal\">\n        <div class=\"credits-modal-content\">\n            <div class=\"credits-modal-header\">\n                <h2 class=\"credits-modal-title\">\n                    <img src=\"https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000\" style=\"width: 32px; height: 32px; vertical-align: middle;\" alt=\"unimgai Stars\">\n                    <span>unimgai Stars Plans</span>\n                </h2>\n                <p class=\"credits-modal-subtitle\">Get more unimgai stars to create amazing content</p>\n            </div>\n            \n            <!-- Daily Reward Section -->\n            <div class=\"daily-reward-section\">\n                <h3 class=\"daily-reward-title\">üéÅ Daily Reward</h3>\n                <button class=\"claim-reward-btn\" id=\"claimRewardBtn\" onclick=\"claimDailyReward()\">\n                    Claim 5 Free unimgai Stars\n                </button>\n                <div class=\"reward-status\" id=\"rewardStatus\">\n                    Claim your daily bonus of 5 unimgai stars!\n                </div>\n            </div>\n            \n            <!-- Credits Plans -->\n            <div class=\"credits-plans\">\n                <h3 class=\"plans-title\">Choose Your Plan</h3>\n                \n                <!-- Loading State -->\n                <div class=\"plans-loading\" id=\"plansLoading\">\n                    <div class=\"spinner\"></div>\n                    <div class=\"loading-text\">Loading available plans...</div>\n                </div>\n                \n                <!-- Plans Container -->\n                <div class=\"plans-grid\" id=\"plansGrid\" style=\"display: none;\">\n                    <!-- Plans will be dynamically inserted here -->\n                </div>\n                \n                <!-- Error Message -->\n                <div class=\"error-message\" id=\"errorMessage\" style=\"display: none;\">\n                    <p>‚ùå Unable to load plans</p>\n                    <p>Please try again later</p>\n                    <button onclick=\"loadMajorPlans()\" style=\"background: var(--color-primary); color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-top: 10px;\">\n                        Retry\n                    </button>\n                </div>\n            </div>\n            \n            <button class=\"close-credits-btn\" onclick=\"closeCreditsModal()\">Close</button>\n        </div>\n    </div>\n\n    <!-- User Data Modal -->\n    <div class=\"user-modal\" id=\"userModal\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <div class=\"modal-avatar\" id=\"modalAvatar\">U</div>\n                <h2 class=\"modal-title\" id=\"modalTitle\">User Name</h2>\n                <p class=\"modal-subtitle\">Premium Member</p>\n            </div>\n            \n            <div class=\"modal-stats\">\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalGemBalance\">20</div>\n                    <div class=\"modal-stat-label\">Gem Balance</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalGemsEarned\">0</div>\n                    <div class=\"modal-stat-label\">Gems Earned</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalGemsPurchased\">0</div>\n                    <div class=\"modal-stat-label\">Gems Purchased</div>\n                </div>\n                <div class=\"modal-stat\">\n                    <div class=\"modal-stat-value\" id=\"modalGemsSpent\">0</div>\n                    <div class=\"modal-stat-label\">Gems Spent</div>\n                </div>\n            </div>\n            \n            <div class=\"modal-info\">\n                <!-- Info rows removed as requested -->\n            </div>\n            \n            <button class=\"close-modal-btn\" onclick=\"closeUserModal()\">Close</button>\n        </div>\n    </div>\n\n    <!-- Toast Notification -->\n    <div class=\"toast\" id=\"toast\">\n        <div class=\"toast-title\" id=\"toastTitle\">Notification</div>\n        <div class=\"toast-message\" id=\"toastMessage\">Message</div>\n    </div>\n\n    <script>\n        // Get URL parameters\n        function getUrlParams() {\n            const params = new URLSearchParams(window.location.search);\n            return {\n                lang: params.get('lang') || 'en',\n                username: params.get('username') || 'User',\n                user_id: params.get('user_id') || 'User'\n            };\n        }\n\n        // Initialize page\n        let currentLang = 'en';\n        let currentUsername = 'User';\n        let currentUserId = 'User';\n\n        async function initializePage() {\n            const params = getUrlParams();\n            currentLang = params.lang || 'en';\n            currentUsername = params.username || 'User';\n            currentUserId = params.user_id || 'User';\n            \n            // Create particles\n            createParticles();\n            \n            // Load user data (including credits from webhook)\n            await loadUserData();\n            \n            \n            // Setup tabs\n            setupTabs();\n            \n            // Setup forms\n            setupForms();\n            \n            // Setup user avatar click\n            setupUserAvatar();\n            \n            // Hide loading screen after data is loaded\n            setTimeout(() => {\n                document.getElementById('loadingScreen').classList.add('hidden');\n            }, 500);\n        }\n\n        // Create background diffused lights\n        function createParticles() {\n            const particlesContainer = document.getElementById('particles');\n            const lightColors = [\n                'rgba(230, 30, 133, 0.3)',\n                'rgba(255, 64, 129, 0.25)',\n                'rgba(156, 39, 176, 0.2)',\n                'rgba(103, 58, 183, 0.15)',\n                'rgba(63, 81, 181, 0.2)'\n            ];\n            \n            const sizeClasses = ['small', 'medium', 'large'];\n            \n            for (let i = 0; i < 8; i++) {\n                const light = document.createElement('div');\n                const sizeClass = sizeClasses[Math.floor(Math.random() * sizeClasses.length)];\n                light.className = `diffused-light ${sizeClass}`;\n                light.style.background = `radial-gradient(circle, ${lightColors[i % lightColors.length]}, transparent)`;\n                light.style.left = Math.random() * 100 + '%';\n                light.style.top = Math.random() * 100 + '%';\n                light.style.animationDelay = Math.random() * 20 + 's';\n                light.style.animationDuration = (20 + Math.random() * 10) + 's';\n                particlesContainer.appendChild(light);\n            }\n        }\n\n        // Load user data\n        async function loadUserData() {\n            // Update user info\n            document.getElementById('userName').textContent = currentUsername;\n            document.getElementById('userAvatar').textContent = currentUsername.charAt(0).toUpperCase();\n            \n            // Fetch credits from webhook\n            await fetchUserCredits();\n        }\n        \n        // Fetch user credits from webhook\n        async function fetchUserCredits() {\n            const CREDITS_API_URL = 'https://unimgai-n8n.nmvnem.easypanel.host/webhook/credits';\n            \n            try {\n                console.log('Fetching credits for user:', currentUserId, currentUsername);\n                \n                const response = await fetch(CREDITS_API_URL, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        id: currentUserId,\n                        usuario: currentUsername\n                    })\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                console.log('Credits data received:', data);\n                \n                // Update credits display with the received data\n                // El webhook devuelve un array con un objeto que contiene todas las estad√≠sticas\n                let gemData = {};\n                if (Array.isArray(data) && data.length > 0) {\n                    gemData = data[0];\n                } else {\n                    gemData = data;\n                }\n                \n                // Extract all gem statistics\n                const credits = gemData.gem_balance || gemData.total_loaded || 0;\n                const gemsEarned = gemData.total_gems_earned || 0;\n                const gemsPurchased = gemData.total_gems_purchased || 0;\n                const gemsSpent = gemData.total_gems_spent || 0;\n                \n                // Update all displays\n                updateCreditsDisplay(credits, gemsEarned, gemsPurchased, gemsSpent);\n                \n            } catch (error) {\n                console.error('Error fetching credits:', error);\n                // Fallback to default credits if webhook fails\n                const fallbackCredits = 150;\n                updateCreditsDisplay(fallbackCredits);\n                showToast('error', 'Error de Cr√©ditos', 'No se pudieron cargar los cr√©ditos. Usando valor por defecto.');\n            }\n        }\n\n        // Update credits display in both header and modal\n        function updateCreditsDisplay(credits, gemsEarned = 0, gemsPurchased = 0, gemsSpent = 0) {\n            // Update header\n            const headerCreditsElement = document.getElementById('headerCredits');\n            headerCreditsElement.innerHTML = `<span class=\"credits-star\"></span> ${credits}`;\n            \n            // Update modal with all gem statistics\n            document.getElementById('modalGemBalance').textContent = credits;\n            document.getElementById('modalGemsEarned').textContent = gemsEarned;\n            document.getElementById('modalGemsPurchased').textContent = gemsPurchased;\n            document.getElementById('modalGemsSpent').textContent = gemsSpent;\n        }\n\n        // CREDITS PLANS INTEGRATION\n        const CREDITS_WEBHOOK_URL = 'https://unimgai-n8n.nmvnem.easypanel.host/webhook/plans';\n        \n        // Datos de respaldo en caso de que el webhook no est√© disponible\n        // Estos datos est√°n sincronizados con el webhook actual\n        const FALLBACK_PLANS_DATA = [\n            {\n                plan_name: \"Plan B√°sico\",\n                plan_price_usd: 5,\n                credits_received: 500,\n                base_costs_usd: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                conversion_rate: \"1 USD = 100 cr√©ditos\",\n                generation_costs_in_credits: {\n                    image: 5,\n                    video: 50\n                },\n                max_images_possible: 100,\n                max_videos_possible: 10,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"500 cr√©ditos √∑ 5 cr√©ditos/imagen = 100 im√°genes\",\n                    videos_calculation: \"500 cr√©ditos √∑ 50 cr√©ditos/video = 10 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Est√°ndar\",\n                plan_price_usd: 15,\n                credits_received: 1500,\n                base_costs_usd: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                conversion_rate: \"1 USD = 100 cr√©ditos\",\n                generation_costs_in_credits: {\n                    image: 5,\n                    video: 50\n                },\n                max_images_possible: 300,\n                max_videos_possible: 30,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"1500 cr√©ditos √∑ 5 cr√©ditos/imagen = 300 im√°genes\",\n                    videos_calculation: \"1500 cr√©ditos √∑ 50 cr√©ditos/video = 30 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Premium\",\n                plan_price_usd: 25,\n                credits_received: 2500,\n                base_costs_usd: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                conversion_rate: \"1 USD = 100 cr√©ditos\",\n                generation_costs_in_credits: {\n                    image: 5,\n                    video: 50\n                },\n                max_images_possible: 500,\n                max_videos_possible: 50,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"2500 cr√©ditos √∑ 5 cr√©ditos/imagen = 500 im√°genes\",\n                    videos_calculation: \"2500 cr√©ditos √∑ 50 cr√©ditos/video = 50 videos\"\n                }\n            },\n            {\n                plan_name: \"Plan Pro\",\n                plan_price_usd: 30,\n                credits_received: 3000,\n                base_costs_usd: {\n                    image: 0.05,\n                    video: 0.5\n                },\n                conversion_rate: \"1 USD = 100 cr√©ditos\",\n                generation_costs_in_credits: {\n                    image: 5,\n                    video: 50\n                },\n                max_images_possible: 600,\n                max_videos_possible: 60,\n                calculations: {\n                    credits_per_dollar: 100,\n                    images_calculation: \"3000 cr√©ditos √∑ 5 cr√©ditos/imagen = 600 im√°genes\",\n                    videos_calculation: \"3000 cr√©ditos √∑ 50 cr√©ditos/video = 60 videos\"\n                }\n            }\n        ];\n        \n        // Load Credits plans from webhook\n        async function loadCreditsPlans() {\n            const plansLoading = document.getElementById('plansLoading');\n            const plansGrid = document.getElementById('plansGrid');\n            const errorMessage = document.getElementById('errorMessage');\n            \n            // Show loading state\n            if (plansLoading) plansLoading.style.display = 'block';\n            if (plansGrid) plansGrid.style.display = 'none';\n            if (errorMessage) errorMessage.style.display = 'none';\n            \n            console.log('üîó Intentando cargar planes desde webhook:', CREDITS_WEBHOOK_URL);\n            \n            try {\n                // Intentar llamada GET al webhook con timeout\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 segundos timeout\n                \n                const response = await fetch(CREDITS_WEBHOOK_URL, {\n                    method: 'GET',\n                    signal: controller.signal,\n                    headers: {\n                        'Accept': 'application/json'\n                    }\n                });\n                \n                clearTimeout(timeoutId);\n                \n                console.log('üì° Respuesta del webhook - Status:', response.status);\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                console.log('‚úÖ Datos recibidos del webhook:', data);\n                \n                // El webhook puede devolver: array directo, objeto con 'plans', o array con objeto que tiene 'plans'\n                let plansArray = null;\n                \n                if (Array.isArray(data)) {\n                    // Si data es un array\n                    if (data.length > 0 && data[0].plans && Array.isArray(data[0].plans)) {\n                        // Array que contiene objeto con propiedad 'plans': [{ plans: [...] }]\n                        plansArray = data[0].plans;\n                    } else {\n                        // Array directo de planes: [plan1, plan2, ...]\n                        plansArray = data;\n                    }\n                } else if (data && data.plans && Array.isArray(data.plans)) {\n                    // Objeto con propiedad 'plans': { plans: [...] }\n                    plansArray = data.plans;\n                }\n                \n                if (plansArray && plansArray.length > 0) {\n                    console.log('‚úÖ Planes cargados exitosamente:', plansArray.length, 'planes');\n                    displayCreditsPlans(plansArray);\n                    return;\n                } else {\n                    throw new Error('Estructura de datos inv√°lida');\n                }\n                \n            } catch (error) {\n                console.warn('‚ö†Ô∏è No se pudo cargar desde el webhook:', error.message);\n                console.log('üì¶ Usando datos de respaldo locales');\n                \n                // Usar datos de respaldo\n                setTimeout(() => {\n                    displayCreditsPlans(FALLBACK_PLANS_DATA);\n                }, 500);\n            }\n        }\n        \n        // Display Credits plans in the modal\n        function displayCreditsPlans(plans) {\n            console.log('üéØ displayCreditsPlans llamada con', plans.length, 'planes');\n            \n            const plansLoading = document.getElementById('plansLoading');\n            const plansGrid = document.getElementById('plansGrid');\n            const errorMessage = document.getElementById('errorMessage');\n            \n            console.log('üìç Elementos encontrados:', {\n                plansLoading: !!plansLoading,\n                plansGrid: !!plansGrid,\n                errorMessage: !!errorMessage\n            });\n            \n            // Hide loading, show container\n            if (plansLoading) plansLoading.style.display = 'none';\n            if (plansGrid) {\n                plansGrid.style.display = 'grid';\n                console.log('‚úÖ plansGrid mostrado');\n            }\n            if (errorMessage) errorMessage.style.display = 'none';\n            \n            // Clear existing plans\n            if (plansGrid) {\n                plansGrid.innerHTML = '';\n            }\n            \n            // Create plan cards\n            plans.forEach((plan, index) => {\n                const planCard = createCreditsPlanCard(plan, index);\n                if (plansGrid) {\n                    plansGrid.appendChild(planCard);\n                    console.log(`‚úÖ Plan ${index + 1} agregado:`, plan.plan_name);\n                }\n            });\n            \n            console.log('‚úÖ displayCreditsPlans completado');\n        }\n        \n        // Create Credits plan card element\n        function createCreditsPlanCard(plan, index) {\n            const planCard = document.createElement('div');\n            planCard.className = 'plan-card';\n            \n            // Add popular badge to second plan (index 1)\n            if (index === 1) {\n                planCard.classList.add('popular');\n            }\n            \n            const starIcon = '<img src=\"https://lh3.googleusercontent.com/d/1S7tgDsOF2btd0P5D9XyUeGrIwN3yU1_W=w1000\" style=\"width: 20px; height: 20px; vertical-align: middle;\" alt=\"Credits\">';\n            \n            planCard.innerHTML = `\n                ${index === 1 ? '<div class=\"popular-badge\">POPULAR</div>' : ''}\n                <div style=\"font-size: 18px; font-weight: 600; color: var(--color-primary); margin-bottom: 10px; text-align: center;\">\n                    ${plan.plan_name}\n                </div>\n                <div class=\"plan-credits\">${plan.credits_received} ${starIcon}</div>\n                <div class=\"plan-price\">$${plan.plan_price_usd.toFixed(2)}</div>\n                <div class=\"plan-description\">\n                    ${plan.max_images_possible.toLocaleString()} images or ${plan.max_videos_possible.toLocaleString()} videos\n                </div>\n                <div class=\"plan-details\">\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Credits:</span>\n                        <span class=\"plan-detail-value\">${plan.credits_received} ${starIcon}</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Price:</span>\n                        <span class=\"plan-detail-value\">$${plan.plan_price_usd.toFixed(2)} USD</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Cost per Image:</span>\n                        <span class=\"plan-detail-value\">${plan.generation_costs_in_credits.image} credits</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Cost per Video:</span>\n                        <span class=\"plan-detail-value\">${plan.generation_costs_in_credits.video} credits</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Max Images:</span>\n                        <span class=\"plan-detail-value\">${plan.max_images_possible.toLocaleString()}</span>\n                    </div>\n                    <div class=\"plan-detail-row\">\n                        <span class=\"plan-detail-label\">Max Videos:</span>\n                        <span class=\"plan-detail-value\">${plan.max_videos_possible.toLocaleString()}</span>\n                    </div>\n                </div>\n                <div class=\"calculations-details\">\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 5px;\">\n                        <strong>Calculations:</strong>\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 3px;\">\n                        1 USD = ${plan.conversion_rate}\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted); margin-bottom: 3px;\">\n                        ${plan.calculations.images_calculation}\n                    </div>\n                    <div style=\"font-size: 10px; color: var(--text-muted);\">\n                        ${plan.calculations.videos_calculation}\n                    </div>\n                </div>\n                <button class=\"buy-plan-btn\" onclick=\"buyPlan('${plan.plan_name}', ${plan.plan_price_usd})\">\n                    Buy Plan\n                </button>\n            `;\n            \n            return planCard;\n        }\n        \n        // NOWPayments configuration\n        const NOWPAYMENTS_CONFIG = {\n            // Tu API key de NOWPayments (obtener en: https://account.nowpayments.io/settings/api-keys)\n            apiKey: 'BWBTGMS-G57MP1C-HWT45E9-VK6CDWS',\n            // Sandbox mode para testing (cambiar a false en producci√≥n)\n            sandbox: false,\n            // URL base de la API\n            apiUrl: 'https://api.nowpayments.io/v1',\n            sandboxApiUrl: 'https://api-sandbox.nowpayments.io/v1'\n        };\n        \n        // Get API URL based on mode\n        function getNOWPaymentsApiUrl() {\n            return NOWPAYMENTS_CONFIG.sandbox ? NOWPAYMENTS_CONFIG.sandboxApiUrl : NOWPAYMENTS_CONFIG.apiUrl;\n        }\n        \n        // Buy plan function with NOWPayments integration\n        function buyPlan(planName, priceUSD) {\n            console.log(`Comprando plan: ${planName} por $${priceUSD} USD`);\n            \n            // Mostrar modal de selecci√≥n de criptomoneda\n            showCryptoSelectionModal(planName, priceUSD);\n        }\n        \n        // Show cryptocurrency selection modal\n        function showCryptoSelectionModal(planName, priceUSD) {\n            const modal = document.createElement('div');\n            modal.className = 'crypto-selection-modal';\n            modal.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.9);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 10000;\n                animation: fadeIn 0.3s ease;\n            `;\n            \n            const popularCryptos = [\n                { code: 'btc', name: 'Bitcoin', icon: '‚Çø' },\n                { code: 'eth', name: 'Ethereum', icon: 'Œû' },\n                { code: 'usdttrc20', name: 'USDT (TRC20)', icon: '‚ÇÆ' },\n                { code: 'usdterc20', name: 'USDT (ERC20)', icon: '‚ÇÆ' },\n                { code: 'ltc', name: 'Litecoin', icon: '≈Å' },\n                { code: 'trx', name: 'Tron', icon: 'T' },\n                { code: 'bnbbsc', name: 'BNB (BSC)', icon: 'B' },\n                { code: 'sol', name: 'Solana', icon: 'S' }\n            ];\n            \n            modal.innerHTML = `\n                <div style=\"\n                    background: var(--surface);\n                    border-radius: 20px;\n                    padding: 40px;\n                    max-width: 600px;\n                    width: 90%;\n                    max-height: 80vh;\n                    overflow-y: auto;\n                    border: 2px solid var(--color-primary);\n                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n                \">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\n                        <h2 style=\"color: var(--color-primary); margin: 0;\">\n                            Select Payment Method\n                        </h2>\n                        <button onclick=\"this.closest('.crypto-selection-modal').remove()\" style=\"\n                            background: none;\n                            border: none;\n                            color: var(--text-primary);\n                            font-size: 28px;\n                            cursor: pointer;\n                            padding: 0;\n                            width: 30px;\n                            height: 30px;\n                            line-height: 1;\n                        \">&times;</button>\n                    </div>\n                    \n                    <div style=\"background: rgba(230, 30, 133, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 30px;\">\n                        <p style=\"margin: 0; text-align: center;\">\n                            <strong style=\"color: var(--color-primary);\">${planName}</strong>\n                            <br>\n                            <span style=\"font-size: 24px; color: var(--text-primary); font-weight: bold;\">$${priceUSD.toFixed(2)} USD</span>\n                        </p>\n                    </div>\n                    \n                    <h3 style=\"color: var(--text-primary); margin-bottom: 15px; font-size: 16px;\">\n                        Popular Cryptocurrencies\n                    </h3>\n                    \n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); gap: 10px; margin-bottom: 20px;\">\n                        ${popularCryptos.map(crypto => `\n                            <button onclick=\"createNOWPayment('${planName}', ${priceUSD}, '${crypto.code}')\" style=\"\n                                background: rgba(230, 30, 133, 0.1);\n                                border: 2px solid rgba(230, 30, 133, 0.3);\n                                border-radius: 10px;\n                                padding: 15px 10px;\n                                cursor: pointer;\n                                transition: all 0.3s ease;\n                                color: var(--text-primary);\n                            \" onmouseover=\"this.style.background='rgba(230, 30, 133, 0.2)'; this.style.borderColor='var(--color-primary)'\" \n                               onmouseout=\"this.style.background='rgba(230, 30, 133, 0.1)'; this.style.borderColor='rgba(230, 30, 133, 0.3)'\">\n                                <div style=\"font-size: 24px; margin-bottom: 5px;\">${crypto.icon}</div>\n                                <div style=\"font-size: 12px; font-weight: 600;\">${crypto.name}</div>\n                            </button>\n                        `).join('')}\n                    </div>\n                    \n                    <p style=\"text-align: center; color: var(--text-muted); font-size: 12px; margin-top: 20px;\">\n                        Powered by <strong style=\"color: var(--color-primary);\">NOWPayments</strong> - 300+ cryptocurrencies supported\n                    </p>\n                </div>\n            `;\n            \n            document.body.appendChild(modal);\n        }\n        \n        // Create NOWPayments invoice\n        async function createNOWPayment(planName, priceUSD, payCurrency) {\n            try {\n                // Cerrar modal de selecci√≥n\n                const selectionModal = document.querySelector('.crypto-selection-modal');\n                if (selectionModal) selectionModal.remove();\n                \n                // Mostrar loading\n                showToast('info', 'Processing', 'Creating payment...');\n                \n                const apiUrl = getNOWPaymentsApiUrl();\n                \n                // Crear invoice usando la API de NOWPayments\n                // Si no especificamos pay_currency, el usuario puede elegir en la invoice_url\n                const invoiceData = {\n                    price_amount: priceUSD,\n                    price_currency: 'usd',\n                    order_id: `${planName.replace(/\\s+/g, '-')}-${Date.now()}`,\n                    order_description: `Purchase of ${planName} - ${priceUSD} USD`,\n                    ipn_callback_url: window.location.origin + '/api/nowpayments-callback',\n                    success_url: window.location.href + '?payment=success',\n                    cancel_url: window.location.href + '?payment=cancelled'\n                };\n                \n                // Si el usuario seleccion√≥ una crypto espec√≠fica, la incluimos\n                if (payCurrency) {\n                    invoiceData.pay_currency = payCurrency;\n                }\n                \n                console.log('Creating invoice with data:', invoiceData);\n                \n                const response = await fetch(`${apiUrl}/invoice`, {\n                    method: 'POST',\n                    headers: {\n                        'x-api-key': NOWPAYMENTS_CONFIG.apiKey,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(invoiceData)\n                });\n                \n                if (!response.ok) {\n                    const errorData = await response.json();\n                    console.error('Invoice creation failed:', errorData);\n                    throw new Error(errorData.message || 'Failed to create invoice');\n                }\n                \n                const invoice = await response.json();\n                console.log('Invoice created successfully:', invoice);\n                \n                // Abrir el modal de pago de NOWPayments\n                openNOWPaymentsModal(invoice, planName, priceUSD);\n                \n            } catch (error) {\n                console.error('Error creating invoice:', error);\n                showToast('error', 'Error', error.message || 'Failed to create payment. Please try again.');\n            }\n        }\n        \n        // Open NOWPayments invoice modal\n        function openNOWPaymentsModal(invoice, planName, priceUSD) {\n            const modal = document.createElement('div');\n            modal.className = 'nowpayments-modal';\n            modal.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.95);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 10001;\n                animation: fadeIn 0.3s ease;\n                padding: 20px;\n                overflow-y: auto;\n            `;\n            \n            // Para invoices, usamos invoice_url directamente\n            const invoiceUrl = invoice.invoice_url;\n            const invoiceId = invoice.id;\n            \n            modal.innerHTML = `\n                <div style=\"\n                    background: var(--surface);\n                    border-radius: 20px;\n                    padding: 30px;\n                    max-width: 600px;\n                    width: 100%;\n                    border: 2px solid var(--color-primary);\n                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n                \">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\n                        <div>\n                            <h2 style=\"color: var(--color-primary); margin: 0;\">\n                                üí≥ Complete Your Payment\n                            </h2>\n                            <p style=\"margin: 0; color: var(--text-muted); font-size: 14px;\">\n                                ${planName}\n                            </p>\n                        </div>\n                        <button onclick=\"this.closest('.nowpayments-modal').remove()\" style=\"\n                            background: none;\n                            border: none;\n                            color: var(--text-primary);\n                            font-size: 28px;\n                            cursor: pointer;\n                            padding: 0;\n                            width: 30px;\n                            height: 30px;\n                            line-height: 1;\n                        \">&times;</button>\n                    </div>\n                    \n                    <!-- NOWPayments Trust Badge -->\n                    <div style=\"background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.05)); padding: 12px 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(76, 175, 80, 0.3); display: flex; align-items: center; gap: 10px;\">\n                        <div style=\"font-size: 24px;\">üîí</div>\n                        <div style=\"flex: 1;\">\n                            <p style=\"margin: 0; color: var(--text-primary); font-size: 13px; font-weight: 600;\">\n                                Secure Payment via NOWPayments\n                            </p>\n                            <p style=\"margin: 0; color: var(--text-muted); font-size: 11px; line-height: 1.4;\">\n                                Your payment is processed by NOWPayments, a trusted third-party payment processor. We never handle your funds directly.\n                            </p>\n                        </div>\n                    </div>\n                    \n                    <!-- Payment Info -->\n                    <div style=\"background: rgba(230, 30, 133, 0.1); padding: 20px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(230, 30, 133, 0.3); text-align: center;\">\n                        <p style=\"margin: 0 0 10px 0; color: var(--text-muted); font-size: 14px;\">Amount to Pay</p>\n                        <p style=\"margin: 0; font-size: 28px; font-weight: bold; color: var(--color-primary);\">$${priceUSD.toFixed(2)} USD</p>\n                        <p style=\"margin: 10px 0 0 0; color: var(--text-muted); font-size: 12px;\">\n                            You'll be able to select your preferred cryptocurrency on the next page\n                        </p>\n                    </div>\n                    \n                    <!-- Invoice iframe -->\n                    <div style=\"margin-bottom: 20px;\">\n                        <iframe \n                            src=\"${invoiceUrl}\" \n                            style=\"\n                                width: 100%;\n                                height: 600px;\n                                border: none;\n                                border-radius: 10px;\n                                background: white;\n                            \"\n                            allow=\"payment\"\n                        ></iframe>\n                    </div>\n                    \n                    <p style=\"text-align: center; color: var(--text-muted); font-size: 11px; margin-top: 20px; line-height: 1.5;\">\n                        Invoice ID: <code style=\"background: rgba(230, 30, 133, 0.1); padding: 2px 6px; border-radius: 4px;\">${invoiceId}</code>\n                        <br>\n                        Powered by <strong style=\"color: var(--color-primary);\">NOWPayments</strong>\n                    </p>\n                </div>\n            `;\n            \n            document.body.appendChild(modal);\n            showToast('success', 'Payment Created', 'Please complete the payment using the information provided');\n        }\n        \n        // Toggle payment iframe visibility\n        function togglePaymentIframe(paymentId) {\n            const container = document.getElementById(`payment-iframe-container-${paymentId}`);\n            const button = document.getElementById(`toggle-iframe-btn-${paymentId}`);\n            \n            if (container.style.display === 'none') {\n                container.style.display = 'block';\n                button.innerHTML = 'üîº Hide NOWPayments Interface';\n                // Scroll to iframe\n                container.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n            } else {\n                container.style.display = 'none';\n                button.innerHTML = 'üîó Show NOWPayments Interface';\n            }\n        }\n        \n        // Copy to clipboard helper\n        function copyToClipboard(text, button) {\n            navigator.clipboard.writeText(text).then(() => {\n                const originalText = button.innerHTML;\n                button.innerHTML = '‚úÖ Copied!';\n                button.style.background = '#4CAF50';\n                setTimeout(() => {\n                    button.innerHTML = originalText;\n                    button.style.background = 'var(--color-primary)';\n                }, 2000);\n                showToast('success', 'Copied', 'Address copied to clipboard');\n            }).catch(err => {\n                console.error('Failed to copy:', err);\n                showToast('error', 'Error', 'Failed to copy address');\n            });\n        }\n        \n        // Check payment status\n        async function checkPaymentStatus(paymentId) {\n            try {\n                showToast('info', 'Checking', 'Checking payment status...');\n                \n                const apiUrl = getNOWPaymentsApiUrl();\n                const response = await fetch(`${apiUrl}/payment/${paymentId}`, {\n                    method: 'GET',\n                    headers: {\n                        'x-api-key': NOWPAYMENTS_CONFIG.apiKey\n                    }\n                });\n                \n                if (!response.ok) {\n                    throw new Error('Failed to check payment status');\n                }\n                \n                const status = await response.json();\n                console.log('Payment status:', status);\n                \n                const statusMessages = {\n                    'waiting': 'Waiting for payment',\n                    'confirming': 'Payment received, confirming...',\n                    'confirmed': 'Payment confirmed',\n                    'sending': 'Sending to your wallet...',\n                    'finished': 'Payment completed successfully!',\n                    'failed': 'Payment failed',\n                    'refunded': 'Payment refunded',\n                    'expired': 'Payment expired'\n                };\n                \n                const message = statusMessages[status.payment_status] || status.payment_status;\n                const type = ['finished', 'confirmed'].includes(status.payment_status) ? 'success' : \n                            ['failed', 'refunded', 'expired'].includes(status.payment_status) ? 'error' : 'info';\n                \n                showToast(type, 'Payment Status', message);\n                \n                if (status.payment_status === 'finished') {\n                    // Cerrar modal y actualizar cr√©ditos\n                    const modal = document.querySelector('.nowpayments-modal');\n                    if (modal) modal.remove();\n                    // Aqu√≠ puedes agregar l√≥gica para actualizar los cr√©ditos del usuario\n                }\n                \n            } catch (error) {\n                console.error('Error checking payment status:', error);\n                showToast('error', 'Error', 'Failed to check payment status');\n            }\n        }\n        \n        // Check for payment success/cancel in URL\n        window.addEventListener('DOMContentLoaded', () => {\n            const urlParams = new URLSearchParams(window.location.search);\n            if (urlParams.get('payment') === 'success') {\n                showToast('success', 'Payment Successful', 'Your payment has been completed successfully!');\n                // Limpiar URL\n                window.history.replaceState({}, document.title, window.location.pathname);\n            } else if (urlParams.get('payment') === 'cancelled') {\n                showToast('warning', 'Payment Cancelled', 'Your payment was cancelled');\n                // Limpiar URL\n                window.history.replaceState({}, document.title, window.location.pathname);\n            }\n        });\n\n        // Setup tabs functionality\n        function setupTabs() {\n            const tabButtons = document.querySelectorAll('.tab-btn');\n            const sections = document.querySelectorAll('.creator-section');\n            \n            tabButtons.forEach(button => {\n                button.addEventListener('click', () => {\n                    const targetTab = button.getAttribute('data-tab');\n                    \n                    // Remove active class from all buttons and sections\n                    tabButtons.forEach(btn => btn.classList.remove('active'));\n                    sections.forEach(section => section.classList.remove('active'));\n                    \n                    // Add active class to clicked button and corresponding section\n                    button.classList.add('active');\n                    document.getElementById(`${targetTab}-section`).classList.add('active');\n                });\n            });\n        }\n\n        // Setup forms functionality\n        function setupForms() {\n            // Video form\n            const videoForm = document.getElementById('videoForm');\n            videoForm.addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                const formData = new FormData(this);\n                const videoData = {\n                    type: 'video',\n                    prompt: formData.get('videoPrompt'),\n                    image: videoImageInput.dataset.base64 || null,\n                    user_id: currentUserId,\n                    username: currentUsername,\n                    lang: currentLang,\n                    timestamp: new Date().toISOString()\n                };\n                \n                await handleFormSubmit(videoData, 'video');\n            });\n\n            // Image upload logic\n            const imageUploadArea = document.getElementById('imageUploadArea');\n            const videoImageInput = document.getElementById('videoImage');\n            const imagePreview = document.getElementById('imagePreview');\n            const previewImg = imagePreview.querySelector('.preview-img');\n            const deleteBtn = document.getElementById('deleteBtn');\n            const uploadHint = document.querySelector('.image-upload-hint');\n\n            const handleFiles = (files) => {\n                const file = files[0];\n                if (file && file.type.startsWith('image/')) {\n                    const reader = new FileReader();\n                    reader.onload = (e) => {\n                        previewImg.src = e.target.result;\n                        imagePreview.style.display = 'block';\n                        uploadHint.style.display = 'none';\n                        // Store base64 data for upload\n                        videoImageInput.dataset.base64 = e.target.result.split(',')[1];\n                    };\n                    reader.readAsDataURL(file);\n                }\n            };\n\n            imageUploadArea.addEventListener('click', () => videoImageInput.click());\n            videoImageInput.addEventListener('change', (e) => handleFiles(e.target.files));\n            \n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }, false);\n            });\n\n            ['dragenter', 'dragover'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, () => {\n                    imageUploadArea.style.borderColor = 'var(--color-primary)';\n                });\n            });\n\n            ['dragleave', 'drop'].forEach(eventName => {\n                imageUploadArea.addEventListener(eventName, () => {\n                    imageUploadArea.style.borderColor = 'rgba(230, 30, 133, 0.3)';\n                });\n            });\n\n            imageUploadArea.addEventListener('drop', (e) => {\n                const dt = e.dataTransfer;\n                const files = dt.files;\n                videoImageInput.files = files;\n                handleFiles(files);\n            });\n\n            deleteBtn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                videoImageInput.value = '';\n                delete videoImageInput.dataset.base64;\n                previewImg.src = '';\n                imagePreview.style.display = 'none';\n                uploadHint.style.display = 'block';\n            });\n\n            // Form reset\n            videoForm.addEventListener('reset', () => {\n                deleteBtn.click();\n            });\n            \n            // Image form\n            document.getElementById('imageForm').addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                const formData = new FormData(this);\n                const aspectRatio = document.getElementById('imageAspectRatio').value;\n                const quantity = parseInt(document.getElementById('imageQuantity').value) || 1;\n                \n                // Get dimensions from resolution map\n                const dims = resolutionMap[aspectRatio];\n                \n                const imageData = {\n                    prompt: formData.get('imagePrompt'),\n                    resolution: `${dims.width}x${dims.height}`,\n                    quantity: quantity,\n                    user_id: currentUserId,\n                    username: currentUsername\n                };\n                \n                await handleFormSubmit(imageData, 'image');\n            });\n            \n            // Edit form setup with multiple image handling\n            const editImageUploadArea = document.getElementById('editImageUploadArea');\n            const editImagesInput = document.getElementById('editImages');\n            const editImagePreviews = document.getElementById('editImagePreviews');\n            const editImageCounter = document.getElementById('imageCounter');\n            const editUploadHint = editImageUploadArea.querySelector('.image-upload-hint');\n            \n            let uploadedEditImages = [];\n            const MAX_EDIT_IMAGES = 10;\n\n            const handleEditFiles = (files) => {\n                const filesArray = Array.from(files);\n                const remainingSlots = MAX_EDIT_IMAGES - uploadedEditImages.length;\n                const filesToProcess = filesArray.slice(0, remainingSlots);\n                \n                if (filesArray.length > remainingSlots) {\n                    showToast('warning', 'Limit Exceeded', `Only ${remainingSlots} more images can be uploaded (maximum ${MAX_EDIT_IMAGES})`);\n                }\n                \n                if (filesToProcess.length === 0) {\n                    return;\n                }\n                \n                filesToProcess.forEach(file => {\n                    if (file.type.startsWith('image/')) {\n                        const reader = new FileReader();\n                        reader.onload = (e) => {\n                            const imageData = {\n                                name: file.name,\n                                base64: e.target.result.split(',')[1],\n                                preview: e.target.result\n                            };\n                            uploadedEditImages.push(imageData);\n                            addEditImagePreview(imageData);\n                            updateEditImageCounter();\n                        };\n                        reader.readAsDataURL(file);\n                    }\n                });\n            };\n\n            editImageUploadArea.addEventListener('click', () => {\n                if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                    editImagesInput.click();\n                } else {\n                    showToast('error', 'Maximum Reached', `You can only upload up to ${MAX_EDIT_IMAGES} images`);\n                }\n            });\n\n            editImagesInput.addEventListener('change', (e) => handleEditFiles(e.target.files));\n            \n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }, false);\n            });\n\n            ['dragenter', 'dragover'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, () => {\n                    if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                        editImageUploadArea.style.borderColor = 'var(--color-primary)';\n                    }\n                });\n            });\n\n            ['dragleave', 'drop'].forEach(eventName => {\n                editImageUploadArea.addEventListener(eventName, () => {\n                    editImageUploadArea.style.borderColor = 'rgba(230, 30, 133, 0.3)';\n                });\n            });\n\n            editImageUploadArea.addEventListener('drop', (e) => {\n                if (uploadedEditImages.length < MAX_EDIT_IMAGES) {\n                    const dt = e.dataTransfer;\n                    const files = dt.files;\n                    editImagesInput.files = files;\n                    handleEditFiles(files);\n                }\n            });\n\n            // Edit form submission\n            document.getElementById('editForm').addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                if (uploadedEditImages.length === 0) {\n                    showToast('error', 'No Images', 'Please upload at least one image to edit');\n                    return;\n                }\n                \n                const formData = new FormData(this);\n                const aspectRatio = document.getElementById('editAspectRatio').value;\n                const quantityPerImage = parseInt(document.getElementById('editQuantity').value) || 1;\n                \n                // Get dimensions from resolution map\n                const dims = resolutionMap[aspectRatio];\n                \n                // Total quantity is number of uploaded images multiplied by quantity per image\n                const totalQuantity = uploadedEditImages.length * quantityPerImage;\n                \n                const editData = {\n                    prompt: formData.get('editPrompt'),\n                    resolution: `${dims.width}x${dims.height}`,\n                    images: uploadedEditImages.map(img => img.base64),\n                    quantity: totalQuantity,\n                    user_id: currentUserId,\n                    username: currentUsername\n                };\n                \n                await handleFormSubmit(editData, 'edit');\n            });\n\n            // Edit form reset\n            document.getElementById('editForm').addEventListener('reset', () => {\n                uploadedEditImages = [];\n                refreshEditImagePreviews();\n                updateEditImageCounter();\n                updateEditCost();\n            });\n        }\n        \n        // Update image creation cost based on quantity\n        function updateImageCost() {\n            const quantity = parseInt(document.getElementById('imageQuantity').value) || 1;\n            const totalCost = COST_PER_IMAGE * quantity;\n            const createBtn = document.getElementById('createImageBtn');\n            createBtn.innerHTML = `‚≠ê ${totalCost}`;\n        }\n        \n        // Update edit cost based on number of uploaded images and quantity per image\n        function updateEditCost() {\n            const imageCount = (typeof uploadedEditImages !== 'undefined' && uploadedEditImages) ? uploadedEditImages.length : 0;\n            const quantityPerImage = parseInt(document.getElementById('editQuantity')?.value) || 1;\n            const totalQuantity = imageCount * quantityPerImage;\n            const totalCost = COST_PER_IMAGE * totalQuantity;\n            const editBtn = document.getElementById('editImageBtn');\n            if (imageCount > 0) {\n                editBtn.innerHTML = `‚≠ê ${totalCost}`;\n            } else {\n                editBtn.innerHTML = `‚≠ê 5`;\n            }\n        }\n\n        // Handle form submission\n        async function handleFormSubmit(data, type) {\n            const spinnerElement = document.getElementById(`${type}Spinner`);\n            const buttonElement = document.getElementById(`create${type.charAt(0).toUpperCase() + type.slice(1)}Btn`);\n            \n            // Show spinner and disable button\n            spinnerElement.classList.add('show');\n            buttonElement.disabled = true;\n            \n            try {\n                // Send to webhook\n                const response = await sendToWebhook(data);\n                \n                // Hide spinner and enable button\n                spinnerElement.classList.remove('show');\n                buttonElement.disabled = false;\n                \n                // Show success message\n                showToast('success', `${type.charAt(0).toUpperCase() + type.slice(1)} Created!`, `\"${data.title || data.prompt}\" is being processed.`);\n                \n                // Reset form\n                document.getElementById(`${type}Form`).reset();\n                \n                // Update stats with quantity\n                const quantity = data.quantity || 1;\n                updateStats(type, quantity);\n                \n                // Refresh credits from server after operation\n                await fetchUserCredits();\n                \n                \n            } catch (error) {\n                console.error('Error:', error);\n                \n                // Hide spinner and enable button\n                spinnerElement.classList.remove('show');\n                buttonElement.disabled = false;\n                \n                // Show error message\n                showToast('error', 'Error', `Failed to create ${type}. Please try again.`);\n            }\n        }\n\n        // Send data to webhook with CORS workarounds\n        async function sendToWebhook(data) {\n            const webhookUrl = `https://unimgai-n8n.nmvnem.easypanel.host/webhook/createandedit`;\n            \n            try {\n                // Method 1: Try direct POST with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'unimgai-dashboard',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(data)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                return await response.json();\n                \n            } catch (error) {\n                console.error('Direct webhook call failed, trying CORS proxy:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'User-Agent': 'unimgai-dashboard'\n                        },\n                        body: JSON.stringify(data)\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        return await proxyResponse.json();\n                    }\n                } catch (proxyError) {\n                    console.error('CORS proxy also failed:', proxyError);\n                }\n                \n                // Method 3: Simulate success for development\n                console.log('Simulating webhook success for development');\n                return { success: true, message: 'Data processed successfully' };\n            }\n        }\n\n        // Update stats and deduct credits\n        function updateStats(type, quantity = 1) {\n            // Get current credits from header\n            const headerCreditsElement = document.getElementById('headerCredits');\n            const currentCreditsText = headerCreditsElement.textContent;\n            const currentCredits = parseInt(currentCreditsText);\n            \n            // Calculate credits to deduct based on type\n            let creditsToDeduct = 0;\n            \n            if (type === 'video') {\n                creditsToDeduct = COST_PER_VIDEO;\n            } else if (type === 'image' || type === 'edit') {\n                creditsToDeduct = COST_PER_IMAGE * quantity;\n            }\n            \n            // Deduct credits\n            const newCredits = Math.max(0, currentCredits - creditsToDeduct);\n            updateCreditsDisplay(newCredits);\n        }\n\n        // Setup user avatar click\n        function setupUserAvatar() {\n            const userAvatar = document.getElementById('userAvatar');\n            userAvatar.style.cursor = 'pointer';\n            userAvatar.addEventListener('click', showUserModal);\n        }\n\n        // Show user modal\n        function showUserModal() {\n            const modal = document.getElementById('userModal');\n            \n            // Update modal data\n            document.getElementById('modalAvatar').textContent = currentUsername.charAt(0).toUpperCase();\n            document.getElementById('modalTitle').textContent = currentUsername;\n            \n            // Show modal\n            modal.classList.add('show');\n        }\n\n        // Close user modal\n        function closeUserModal() {\n            const modal = document.getElementById('userModal');\n            modal.classList.remove('show');\n        }\n\n        // Show toast notification\n        function showToast(type, title, message) {\n            const toast = document.getElementById('toast');\n            const toastTitle = document.getElementById('toastTitle');\n            const toastMessage = document.getElementById('toastMessage');\n            \n            toast.className = `toast ${type}`;\n            toastTitle.textContent = title;\n            toastMessage.textContent = message;\n            \n            toast.classList.add('show');\n            \n            setTimeout(() => {\n                toast.classList.remove('show');\n            }, 3000);\n        }\n\n        // Resolution calculations - 4K resolutions for each aspect ratio\n        const resolutionMap = {\n            '1:1': { width: 4096, height: 4096 },\n            '3:2': { width: 4096, height: 2731 },\n            '4:3': { width: 4096, height: 3072 },\n            '16:9': { width: 4096, height: 2304 },\n            '21:9': { width: 4096, height: 1749 },\n            '9:16': { width: 2304, height: 4096 },\n            '2:3': { width: 2731, height: 4096 },\n            '3:4': { width: 3072, height: 4096 }\n        };\n        \n        // Cost per image and video in credits\n        const COST_PER_IMAGE = 5;\n        const COST_PER_VIDEO = 50;\n\n\n        // Daily Reward and unimgai Stars System\n        let dailyRewardClaimed = false;\n\n        // Check daily reward status on page load\n        function checkDailyRewardStatus() {\n            const lastClaim = localStorage.getItem(`lastDailyClaim_${currentUserId}`);\n            const today = new Date().toDateString();\n            \n            if (lastClaim === today) {\n                dailyRewardClaimed = true;\n                updateDailyRewardButton();\n            }\n        }\n        \n        // Reset daily reward (for testing/development)\n        function resetDailyReward() {\n            dailyRewardClaimed = false;\n            localStorage.removeItem(`lastDailyClaim_${currentUserId}`);\n            updateDailyRewardButton();\n            console.log('‚úÖ Daily reward reset! You can claim again.');\n        }\n        \n        // Make resetDailyReward available globally for console access\n        window.resetDailyReward = resetDailyReward;\n\n        // Update daily reward button state\n        function updateDailyRewardButton() {\n            const claimBtn = document.getElementById('claimRewardBtn');\n            const rewardStatus = document.getElementById('rewardStatus');\n            const dailyRewardBtn = document.getElementById('dailyRewardBtn');\n            \n            if (dailyRewardClaimed) {\n                claimBtn.disabled = true;\n                claimBtn.textContent = 'Already Claimed';\n                rewardStatus.textContent = 'Come back tomorrow for your next reward!';\n                if (dailyRewardBtn) {\n                    dailyRewardBtn.classList.add('claimed');\n                    const rewardText = dailyRewardBtn.querySelector('.reward-text');\n                    if (rewardText) rewardText.textContent = 'Claimed';\n                }\n            } else {\n                claimBtn.disabled = false;\n                claimBtn.textContent = 'Claim 5 Free unimgai Stars';\n                rewardStatus.textContent = 'Claim your daily bonus of 5 unimgai stars!';\n                if (dailyRewardBtn) {\n                    dailyRewardBtn.classList.remove('claimed');\n                    const rewardText = dailyRewardBtn.querySelector('.reward-text');\n                    if (rewardText) rewardText.textContent = 'Daily Gift';\n                }\n            }\n        }\n\n        // Open credits modal\n        function openCreditsModal() {\n            console.log('üöÄ openCreditsModal llamada');\n            try {\n                const modal = document.getElementById('creditsModal');\n                console.log('üì¶ Modal encontrado:', !!modal);\n                \n                if (modal) {\n                    modal.classList.add('show');\n                    console.log('‚úÖ Clase \"show\" agregada al modal');\n                    console.log('üîÑ Llamando a loadCreditsPlans()...');\n                    loadCreditsPlans(); // Load Credits plans when opening modal\n                } else {\n                    console.error('‚ùå Credits modal not found');\n                    showToast('error', 'Error', 'Unable to open credits modal');\n                }\n            } catch (error) {\n                console.error('‚ùå Error opening credits modal:', error);\n                showToast('error', 'Error', 'Unable to open credits modal');\n            }\n        }\n\n        // Close credits modal\n        function closeCreditsModal() {\n            const modal = document.getElementById('creditsModal');\n            modal.classList.remove('show');\n        }\n\n        // Claim daily reward\n        async function claimDailyReward() {\n            if (dailyRewardClaimed) {\n                showToast('error', 'Already Claimed', 'You have already claimed your daily reward. Come back tomorrow!');\n                return;\n            }\n\n            const claimBtn = document.getElementById('claimRewardBtn');\n            const originalText = claimBtn.textContent;\n            \n            try {\n                // Show loading state\n                claimBtn.disabled = true;\n                claimBtn.textContent = 'Claiming...';\n                \n                // Send reward claim to webhook and wait for response\n                console.log('üì§ Sending claim request to webhook...');\n                const webhookResponse = await sendRewardClaim();\n                \n                console.log('‚úÖ Webhook response:', webhookResponse);\n                \n                // Check response type\n                if (Array.isArray(webhookResponse) && webhookResponse.length > 0) {\n                    const responseData = webhookResponse[0];\n                    \n                    // Check if already claimed today\n                    if (responseData.profits === 'earned') {\n                        console.log('‚ö†Ô∏è Reward already claimed today');\n                        dailyRewardClaimed = true;\n                        const today = new Date().toDateString();\n                        localStorage.setItem(`lastDailyClaim_${currentUserId}`, today);\n                        updateDailyRewardButton();\n                        throw new Error('You have already claimed your daily reward today. Come back tomorrow!');\n                    }\n                    \n                    // Successful reward claim - update with gem_balance from response\n                    if (responseData.gem_balance !== undefined) {\n                        const newBalance = responseData.gem_balance;\n                        console.log('‚úÖ New gem balance:', newBalance);\n                        \n                        // Update credits display with new balance\n                        updateCreditsDisplay(newBalance);\n                        \n                        // Mark as claimed\n                        dailyRewardClaimed = true;\n                        const today = new Date().toDateString();\n                        localStorage.setItem(`lastDailyClaim_${currentUserId}`, today);\n                        \n                        // Update button state\n                        updateDailyRewardButton();\n                        \n                        // Show success message\n                        showToast('success', 'Daily Reward Claimed!', `You received 5 free unimgai stars! New balance: ${newBalance}`);\n                    } else {\n                        throw new Error('Invalid response from server');\n                    }\n                } else {\n                    throw new Error('Invalid response format from server');\n                }\n                \n            } catch (error) {\n                console.error('‚ùå Error claiming daily reward:', error);\n                claimBtn.disabled = false;\n                claimBtn.textContent = originalText;\n                showToast('error', 'Claim Failed', error.message || 'Unable to claim reward. Please try again.');\n            }\n        }\n\n        // Send reward claim to webhook with CORS workarounds\n        async function sendRewardClaim() {\n            // Build URL with query parameters for GET request\n            const webhookUrl = `https://unimgai-n8n.nmvnem.easypanel.host/webhook/dailyreward?id=${encodeURIComponent(currentUserId)}&usuario=${encodeURIComponent(currentUsername)}`;\n            \n            console.log('üì§ Calling daily reward webhook (GET):', webhookUrl);\n            \n            try {\n                // Method 1: Try direct GET with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'GET',\n                    mode: 'cors',\n                    headers: {\n                        'Accept': 'application/json'\n                    }\n                });\n                \n                console.log('üì° Response status:', response.status);\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                console.log('‚úÖ Response data:', data);\n                return data;\n                \n            } catch (error) {\n                console.error('‚ùå Direct webhook call failed:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    console.log('üîÑ Trying CORS proxy:', proxyUrl);\n                    \n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'GET',\n                        headers: {\n                            'Accept': 'application/json'\n                        }\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        const data = await proxyResponse.json();\n                        console.log('‚úÖ Proxy response data:', data);\n                        return data;\n                    }\n                } catch (proxyError) {\n                    console.error('‚ùå CORS proxy also failed:', proxyError);\n                }\n                \n                // If all methods fail, throw error\n                throw new Error('Unable to connect to reward service. Please try again later.');\n            }\n        }\n\n        // Old Telegram Stars buyPlan function removed - Now using NOWPayments integration\n\n        // Send purchase data to webhook with CORS workarounds\n        async function sendPurchaseData(planType, credits, price, starsNeeded) {\n            const webhookUrl = `https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/dad5726f-ef25-4976-8780-c2e892a37b9e?user_id=${encodeURIComponent(currentUserId)}`;\n            \n            const purchaseData = {\n                type: 'purchase',\n                plan_type: planType,\n                credits: credits,\n                price: price,\n                stars_needed: starsNeeded,\n                telegram_star_price: telegramStarPrice,\n                user_id: currentUserId,\n                username: currentUsername,\n                lang: currentLang,\n                timestamp: new Date().toISOString()\n            };\n            \n            try {\n                // Method 1: Try direct POST with CORS\n                const response = await fetch(webhookUrl, {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'User-Agent': 'unimgai-dashboard',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(purchaseData)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                return await response.json();\n                \n            } catch (error) {\n                console.error('Direct webhook call failed, trying CORS proxy:', error);\n                \n                // Method 2: Try using CORS proxy\n                try {\n                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(webhookUrl)}`;\n                    const proxyResponse = await fetch(proxyUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'User-Agent': 'unimgai-dashboard'\n                        },\n                        body: JSON.stringify(purchaseData)\n                    });\n                    \n                    if (proxyResponse.ok) {\n                        return await proxyResponse.json();\n                    }\n                } catch (proxyError) {\n                    console.error('CORS proxy also failed:', proxyError);\n                }\n                \n                // Method 3: Simulate success for development\n                console.log('Simulating purchase success for development');\n                return { success: true, message: 'Purchase processed successfully' };\n            }\n        }\n\n        // Close modals when clicking outside\n        document.addEventListener('click', function(event) {\n            const creditsModal = document.getElementById('creditsModal');\n            const userModal = document.getElementById('userModal');\n            \n            if (event.target === creditsModal) {\n                closeCreditsModal();\n            }\n            if (event.target === userModal) {\n                closeUserModal();\n            }\n        });\n\n        // Initialize on page load\n        document.addEventListener('DOMContentLoaded', function() {\n            initializePage();\n            \n            // Check daily reward status\n            checkDailyRewardStatus();\n            \n            // Initialize cost displays\n            updateImageCost();\n            updateEditCost();\n        });\n        \n        // Fallback: hide loading screen after 3 seconds even if initialization fails\n        setTimeout(() => {\n            const loadingScreen = document.getElementById('loadingScreen');\n            if (loadingScreen && !loadingScreen.classList.contains('hidden')) {\n                loadingScreen.classList.add('hidden');\n                console.warn('Loading screen hidden by fallback timer');\n            }\n        }, 3000);\n    </script>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2368,
        224
      ],
      "id": "1fa9228a-2c43-45f5-8549-729358262d3b",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.plans }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2368,
        1680
      ],
      "id": "1b9ead01-cb9a-40e7-8474-f19fe5d65909",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c03ddfd7-a255-45f2-9162-2f14bc0a57d8",
              "name": "plans[0].major_price_usd",
              "value": "={{ $json.plans[0].major_price_usd }}",
              "type": "number"
            },
            {
              "id": "3dd7bc3b-b554-40e9-88e2-d770e5f5f322",
              "name": "plans[0]",
              "value": "={{ $json.plans[0] }}",
              "type": "object"
            },
            {
              "id": "fbe11633-6d32-4029-afcc-b5eae13a315f",
              "name": "plans[1]",
              "value": "={{ $json.plans[1] }}",
              "type": "object"
            },
            {
              "id": "d24f61d1-7c59-4088-8d84-260f618b8a91",
              "name": "plans[2]",
              "value": "={{ $json.plans[2] }}",
              "type": "object"
            },
            {
              "id": "b007201e-3944-40ee-8b04-b0a344cadd79",
              "name": "plans[3]",
              "value": "={{ $json.plans[3] }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2592,
        1680
      ],
      "id": "c649153d-1c83-481a-9ef1-4a7266910b84",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.query.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2816,
        2000
      ],
      "id": "575ccd08-52b9-4622-bdb3-dedb7a06c128",
      "name": "Get row(s)2"
    },
    {
      "parameters": {
        "operation": "upsert",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.user_id }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "last_reward": "2025-10-29T16:08:51",
            "total_gems_earned": "={{ $json.total_gems_earned + 5 }}",
            "gem_balance": "={{ $json.gem_balance + 5}}",
            "total_loaded": "={{ $json.total_loaded + 5 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "username",
              "displayName": "username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "language",
              "displayName": "language",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "total_gems_earned",
              "displayName": "total_gems_earned",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "total_gems_purchased",
              "displayName": "total_gems_purchased",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "total_gems_spent",
              "displayName": "total_gems_spent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "gem_balance",
              "displayName": "gem_balance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "total_loaded",
              "displayName": "total_loaded",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "referred_by",
              "displayName": "referred_by",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "referrals_made",
              "displayName": "referrals_made",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "terms_and_conditions",
              "displayName": "terms_and_conditions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "blockade",
              "displayName": "blockade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "last_reward",
              "displayName": "last_reward",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -1920,
        1904
      ],
      "id": "a496aecc-da92-42de-818b-29ef5eedecb3",
      "name": "Upsert row(s)3"
    },
    {
      "parameters": {
        "path": "71a93ff3-2453-46c6-be4e-2865af10d1e5",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -3040,
        0
      ],
      "id": "57fcd7a6-a561-44c8-864c-432a869f435b",
      "name": "terms",
      "webhookId": "71a93ff3-2453-46c6-be4e-2865af10d1e5"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "acept",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -3040,
        448
      ],
      "id": "b52d4fd8-e8bc-4196-8ca7-ff1d450885ab",
      "name": "terms acept",
      "webhookId": "71a93ff3-2453-46c6-be4e-2865af10d1e5"
    },
    {
      "parameters": {
        "path": "dashboard",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -3040,
        224
      ],
      "id": "3ff0bcad-731a-48e5-a6d7-50cb6bf0bdcc",
      "name": "dashboard",
      "webhookId": "2e2e62ee-3551-4233-b140-0a8322d98ae6"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.query.user_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2816,
        224
      ],
      "id": "bdb67dc9-10bc-408d-a6b2-904ce0f2b6c2",
      "name": "Get row(s)3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3df22628-cb25-4092-8588-ad98366825c7",
              "leftValue": "={{ $json.blockade }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2592,
        224
      ],
      "id": "3f791f0c-8acc-4e8a-a3d3-f33917cdfe25",
      "name": "If2"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "credits",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -3040,
        672
      ],
      "id": "a749b858-a09e-4c8f-b7d0-d30e65fab35d",
      "name": "credits",
      "webhookId": "d15823f1-df47-4682-a0d2-c18490f04e04"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.body.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2816,
        672
      ],
      "id": "04c57b90-6abf-4940-bdae-4b16264fda92",
      "name": "Get row(s)4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f075e73d-d511-45f7-8d19-bcce03252033",
              "name": "total_gems_earned",
              "value": "={{ $json.total_gems_earned }}",
              "type": "number"
            },
            {
              "id": "54392908-a1dd-4769-b32e-af0dd56e3ceb",
              "name": "total_gems_purchased",
              "value": "={{ $json.total_gems_purchased }}",
              "type": "number"
            },
            {
              "id": "fa4fdd4c-03ac-41ce-9413-6b529658963b",
              "name": "total_gems_spent",
              "value": "={{ $json.total_gems_spent }}",
              "type": "number"
            },
            {
              "id": "1c1e48ce-5e1a-47e6-9f38-351750f61076",
              "name": "gem_balance",
              "value": "={{ $json.gem_balance }}",
              "type": "number"
            },
            {
              "id": "f76fe3e7-27b3-4372-b644-e1bb970af7f1",
              "name": "total_loaded",
              "value": "={{ $json.total_loaded }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2592,
        672
      ],
      "id": "a7d26f0d-8d3d-4d9e-a21f-8441f35fbb6c",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2368,
        672
      ],
      "id": "e5a591d1-5107-4891-85de-e8dbdbd27a3d",
      "name": "Respond to Webhook5"
    },
    {
      "parameters": {
        "path": "createandedit",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -3040,
        1456
      ],
      "id": "b7499ea9-091f-49ee-b4c7-2948c6332cf2",
      "name": "Webhook",
      "webhookId": "78f3abf1-33ff-4d7a-9408-fa55e12e8fa9"
    },
    {
      "parameters": {
        "path": "plans",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -3040,
        1680
      ],
      "id": "4e4c1913-ee62-4a1f-b64f-0c6a61e17488",
      "name": "plans",
      "webhookId": "dad5726f-ef25-4976-8780-c2e892a37b9e"
    },
    {
      "parameters": {
        "path": "dailyreward",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -3040,
        2000
      ],
      "id": "b8ecfe7e-5c11-4dd9-83ad-b0a6e02b5db8",
      "name": "daily reward",
      "webhookId": "bf8d944b-0885-437b-b709-7079a3fbfbf1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c777b1f1-40ec-477a-912a-665e16908a33",
              "leftValue": "={{ $json.is_24h_passed }}",
              "rightValue": "=",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2368,
        2000
      ],
      "id": "9d7c7c1d-da27-47bf-a23d-6e2c5e39bbf3",
      "name": "If3"
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del primer elemento del nodo anterior\nconst inputData = $input.first()?.json;\n\n// Verificar si los datos de entrada y los campos necesarios existen\nif (!inputData || !inputData.last_reward || !inputData.user_id) {\n  // Si no existen, retornar un objeto de error para que el flujo lo maneje\n  return [{\n    json: {\n      error: \"Faltan datos de entrada. Se requiere 'last_reward' y 'user_id'.\",\n      success: false,\n      received_data: inputData\n    }\n  }];\n}\n\ntry {\n  // 1. Convertir la string de la fecha a un objeto Date\n  const lastRewardDate = new Date(inputData.last_reward);\n\n  // 2. Obtener la fecha y hora actual\n  const now = new Date();\n\n  // 3. Calcular la diferencia en milisegundos\n  const timeDifferenceInMillis = now - lastRewardDate;\n\n  // 4. Definir cu√°ntos milisegundos hay en 24 horas\n  const twentyFourHoursInMillis = 24 * 60 * 60 * 1000;\n\n  // 5. Comparar la diferencia con el umbral de 24 horas\n  const is24hPassed = timeDifferenceInMillis >= twentyFourHoursInMillis;\n\n  // 6. Construir el objeto de salida\n  const result = {\n    user_id: inputData.user_id,\n    last_reward: inputData.last_reward,\n    is_24h_passed: is24hPassed,\n    checked_at: new Date().toISOString(),\n    success: true\n  };\n\n  // Retornar el resultado exitoso\n  return [{ json: result }];\n\n} catch (error) {\n  // Capturar cualquier error inesperado (ej. si la fecha no es v√°lida)\n  return [{\n    json: {\n      error: `Error al procesar la fecha: ${error.message}`,\n      success: false,\n      input_data: inputData\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2592,
        2000
      ],
      "id": "fbd8a338-806a-4bd6-abb5-a359016fafdb",
      "name": "Code in JavaScript4"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "c38pQ4tIJXJTP3Yz",
          "mode": "list",
          "cachedResultName": "User",
          "cachedResultUrl": "/projects/og9eXmj5Fs3xccm6/datatables/c38pQ4tIJXJTP3Yz"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.user_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2144,
        1904
      ],
      "id": "4f6f3c8c-02d3-437f-b20f-be1002cd7aa5",
      "name": "Get row(s)5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "92f2d81a-5a34-4f27-bc05-3c5d044e8f15",
              "name": "profits",
              "value": "earned",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2144,
        2096
      ],
      "id": "147855ad-5b64-43fd-a1aa-edfb117267b6",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1920,
        2096
      ],
      "id": "3b34154c-3cf0-4a6f-abfc-c4e6a42c5b2c",
      "name": "Respond to Webhook6"
    }
  ],
  "pinData": {
    "Telegram Trigger": [
      {
        "json": {
          "update_id": 551730819,
          "message": {
            "message_id": 306,
            "from": {
              "id": 7528798576,
              "is_bot": false,
              "first_name": "Al",
              "username": "Alxx2025",
              "language_code": "en"
            },
            "chat": {
              "id": 7528798576,
              "first_name": "Al",
              "username": "Alxx2025",
              "type": "private"
            },
            "date": 1761730651,
            "text": "/start ref_Alxx2025",
            "entities": [
              {
                "offset": 0,
                "length": 6,
                "type": "bot_command"
              }
            ]
          }
        }
      }
    ],
    "terms": [
      {
        "json": {
          "headers": {
            "host": "mumbai-sampling-conflicts-forest.trycloudflare.com",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
            "accept-encoding": "gzip",
            "accept-language": "es-ES,es;q=0.9",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "206.1.80.150",
            "cf-ew-via": "15",
            "cf-ipcountry": "CO",
            "cf-ray": "990401cde3144c2d-MIA",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-warp-tag-id": "4e633b37-eb1a-4e38-bac1-a7418309a030",
            "cf-worker": "trycloudflare.com",
            "connection": "keep-alive",
            "priority": "u=0, i",
            "referer": "https://web.telegram.org/",
            "sec-ch-ua": "\"Brave\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "iframe",
            "sec-fetch-mode": "navigate",
            "sec-fetch-site": "cross-site",
            "sec-fetch-storage-access": "active",
            "sec-fetch-user": "?1",
            "sec-gpc": "1",
            "upgrade-insecure-requests": "1",
            "x-forwarded-for": "206.1.80.150",
            "x-forwarded-proto": "https"
          },
          "params": {},
          "query": {
            "user_id": "852169805",
            "username": "Tkeyfff",
            "lang": "es",
            "message_id": "231"
          },
          "body": {},
          "webhookUrl": "https://mumbai-sampling-conflicts-forest.trycloudflare.com/webhook/71a93ff3-2453-46c6-be4e-2865af10d1e5",
          "executionMode": "production"
        }
      }
    ],
    "terms acept": [
      {
        "json": {
          "headers": {
            "host": "unimgai-n8n.nmvnem.easypanel.host",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "content-length": "255",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.8",
            "content-type": "application/json",
            "origin": "null",
            "priority": "u=1, i",
            "sec-ch-ua": "\"Brave\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "sec-gpc": "1",
            "x-forwarded-for": "206.1.80.150",
            "x-forwarded-host": "unimgai-n8n.nmvnem.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "bce229a71a1f",
            "x-real-ip": "206.1.80.150"
          },
          "params": {},
          "query": {
            "user_id": "7528798576"
          },
          "body": {
            "username": "Alxx2025",
            "lang": "en",
            "accepted": true,
            "timestamp": "2025-10-29T11:54:58.503Z",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "referrer": "https://web.telegram.org/"
          },
          "webhookUrl": "https://unimgai-n8n.nmvnem.easypanel.host/webhook/acept",
          "executionMode": "production"
        }
      }
    ],
    "dashboard": [
      {
        "json": {
          "headers": {
            "host": "unimgai-n8n.nmvnem.easypanel.host",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.8",
            "priority": "u=0, i",
            "referer": "https://web.telegram.org/",
            "sec-ch-ua": "\"Brave\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "iframe",
            "sec-fetch-mode": "navigate",
            "sec-fetch-site": "cross-site",
            "sec-fetch-storage-access": "none",
            "sec-fetch-user": "?1",
            "sec-gpc": "1",
            "upgrade-insecure-requests": "1",
            "x-forwarded-for": "206.1.80.150",
            "x-forwarded-host": "unimgai-n8n.nmvnem.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "bce229a71a1f",
            "x-real-ip": "206.1.80.150"
          },
          "params": {},
          "query": {
            "user_id": "7528798576",
            "username": "Alxx2025",
            "lang": "en"
          },
          "body": {},
          "webhookUrl": "https://unimgai-n8n.nmvnem.easypanel.host/webhook/dashboard",
          "executionMode": "production"
        }
      }
    ],
    "credits": [
      {
        "json": {
          "headers": {
            "host": "unimgai-n8n.nmvnem.easypanel.host",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "content-length": "40",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.8",
            "content-type": "application/json",
            "origin": "null",
            "priority": "u=1, i",
            "sec-ch-ua": "\"Brave\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "sec-gpc": "1",
            "x-forwarded-for": "206.1.80.150",
            "x-forwarded-host": "unimgai-n8n.nmvnem.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "bce229a71a1f",
            "x-real-ip": "206.1.80.150"
          },
          "params": {},
          "query": {},
          "body": {
            "id": "7528798576",
            "usuario": "Alxx2025"
          },
          "webhookUrl": "https://unimgai-n8n.nmvnem.easypanel.host/webhook/credits",
          "executionMode": "production"
        }
      }
    ],
    "daily reward": [
      {
        "json": {
          "headers": {
            "host": "unimgai-n8n.nmvnem.easypanel.host",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "accept": "application/json",
            "accept-encoding": "gzip",
            "accept-language": "en-US,en;q=0.8",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "2a06:98c0:3600::103",
            "cf-ew-via": "15",
            "cf-ray": "996585f075bea668-MIA",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "priority": "u=1, i",
            "sec-gpc": "1",
            "x-forwarded-for": "206.1.80.150,2a06:98c0:3600::103, 172.70.83.88",
            "x-forwarded-host": "unimgai-n8n.nmvnem.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "bce229a71a1f",
            "x-proxy-service": "CloudflareWorkersCORS",
            "x-real-ip": "172.70.83.88"
          },
          "params": {},
          "query": {
            "id": "7528798576",
            "usuario": "Alxx2025"
          },
          "body": {},
          "webhookUrl": "https://unimgai-n8n.nmvnem.easypanel.host/webhook/dailyreward",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Upsert row(s)": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Upsert row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If row does not exist": {
      "main": [
        [
          {
            "node": "Insert row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert row": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "If row exists",
            "type": "main",
            "index": 0
          },
          {
            "node": "If row does not exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)1": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If row exists": {
      "main": [
        [
          {
            "node": "If user accept send welcome massage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If user accept send welcome massage": {
      "main": [
        [
          {
            "node": "Get row(s)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete a chat message": {
      "main": [
        [
          {
            "node": "Get row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)": {
      "main": [
        [
          {
            "node": "Upsert row(s)2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Delete a chat message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)2": {
      "main": [
        [
          {
            "node": "Code in JavaScript4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert row(s)3": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "terms": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "terms acept": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dashboard": {
      "main": [
        [
          {
            "node": "Get row(s)3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)3": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [],
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "credits": {
      "main": [
        [
          {
            "node": "Get row(s)4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)4": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Respond to Webhook5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "plans": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "daily reward": {
      "main": [
        [
          {
            "node": "Get row(s)2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Get row(s)5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript4": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)5": {
      "main": [
        [
          {
            "node": "Upsert row(s)3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Respond to Webhook6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3fdaf4a2-f40f-47e4-937e-9fcedda23a3d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "31668e2a87a7bef0dfaf1d8a23f3b524be1958446bc59c13fb84d1d6fbb8d889"
  },
  "id": "9KFQUs3b9bgVLYPP",
  "tags": [
    {
      "updatedAt": "2025-10-29T09:08:27.549Z",
      "createdAt": "2025-10-29T09:08:27.549Z",
      "id": "0pRxwLbIjF1R9bqd",
      "name": "Unimgai"
    }
  ]
}